

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (24 June 2023 14:53:32) as E:\ISW1\CUIS\CustomerImporter\CuisUniversity-5832.image!


----End fileIn of E:\ISW1\CUIS\CustomerImporter\CustomerImporter.st----!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:13:39' prior: 50624428!
test01Import

	| allCustomers customersQueryResult allAddresses addressesQueryResult pepesAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	customersQueryResult := session select: [ :customer | (customer identificationType = 'D') and: [customer identificationNumber = '22333444'] ] ofType: Customer.
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Pepe' equals: customersQueryResult anyOne firstName.
	self assert: 'Sanchez' equals: customersQueryResult anyOne lastName.	
	
	pepesAddresses := customersQueryResult addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first  streetNumber = 3322.
	self assert: pepesAddresses first  town equals: 'Olivos'.
	self assert: pepesAddresses first  zipCode equals: 1636.
	self assert: pepesAddresses first  province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

"
	customersQueryResult := session select: [ :customer | (customer identificationType = 'C') and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer.
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Juan' equals: customersQueryResult anyOne firstName.
	self assert: 'Perez' equals: customersQueryResult anyOne lastName.		
	
	
	
	allAddresses := session selectAllOfType: Address.
	self assert: 3 equals: (allAddresses size).
	
	addressesQueryResult := session select: [ :address |
		(address streetName = 'San Martin') 
		and: [ address streetNumber = 3322 ]  
		and: [ address town = 'Olivos' ]
		and: [ address zipCode = 1636 ]
		and: [ address province = 'BsAs' ] ]
		ofType: Address.
	self assert: 1 equals: (addressesQueryResult size).
	
	
	addressesQueryResult := session select: [ :address |
		(address streetName = 'Maipu') 
		and: [ address streetNumber = 888 ]  
		and: [ address town = 'Florida' ]
		and: [ address zipCode = 1122 ]
		and: [ address province = 'Buenos Aires' ] ]
		ofType: Address.
	self assert: 1 equals: (addressesQueryResult size).
	
	addressesQueryResult := session select: [ :address |
		(address streetName = 'Alem') 
		and: [ address streetNumber = 1122 ]  
		and: [ address town = 'CABA' ]
		and: [ address zipCode = 1001 ]
		and: [ address province = 'CABA' ] ]
		ofType: Address.
	self assert: 1 equals: (addressesQueryResult size).		
	
	
	customersQueryResult := session select: [ :customer | (customer identificationType = 'D') and: [customer identificationNumber = '22333444'] ] ofType: Customer.
	self assert: 2 equals: customersQueryResult anyOne addresses size.

	"! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 15:13:48'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 15:14:52'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:15:32' prior: 50624708!
test01Import

	| allCustomers customersQueryResult allAddresses addressesQueryResult pepesAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	customersQueryResult := session select: [ :customer | (customer identificationType = 'D') and: [customer identificationNumber = '22333444'] ] ofType: Customer.
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Pepe' equals: customersQueryResult anyOne firstName.
	self assert: 'Sanchez' equals: customersQueryResult anyOne lastName.	
	
	pepesAddresses := customersQueryResult anyOne addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first  streetNumber = 3322.
	self assert: pepesAddresses first  town equals: 'Olivos'.
	self assert: pepesAddresses first  zipCode equals: 1636.
	self assert: pepesAddresses first  province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

"
	customersQueryResult := session select: [ :customer | (customer identificationType = 'C') and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer.
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Juan' equals: customersQueryResult anyOne firstName.
	self assert: 'Perez' equals: customersQueryResult anyOne lastName.		
	
	
	
	allAddresses := session selectAllOfType: Address.
	self assert: 3 equals: (allAddresses size).
	
	addressesQueryResult := session select: [ :address |
		(address streetName = 'San Martin') 
		and: [ address streetNumber = 3322 ]  
		and: [ address town = 'Olivos' ]
		and: [ address zipCode = 1636 ]
		and: [ address province = 'BsAs' ] ]
		ofType: Address.
	self assert: 1 equals: (addressesQueryResult size).
	
	
	addressesQueryResult := session select: [ :address |
		(address streetName = 'Maipu') 
		and: [ address streetNumber = 888 ]  
		and: [ address town = 'Florida' ]
		and: [ address zipCode = 1122 ]
		and: [ address province = 'Buenos Aires' ] ]
		ofType: Address.
	self assert: 1 equals: (addressesQueryResult size).
	
	addressesQueryResult := session select: [ :address |
		(address streetName = 'Alem') 
		and: [ address streetNumber = 1122 ]  
		and: [ address town = 'CABA' ]
		and: [ address zipCode = 1001 ]
		and: [ address province = 'CABA' ] ]
		ofType: Address.
	self assert: 1 equals: (addressesQueryResult size).		
	
	
	customersQueryResult := session select: [ :customer | (customer identificationType = 'D') and: [customer identificationNumber = '22333444'] ] ofType: Customer.
	self assert: 2 equals: customersQueryResult anyOne addresses size.

	"! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 15:15:39'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 15:15:57'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 15:16:11'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 15:16:12'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:17:43' prior: 50624807!
test01Import

	| allCustomers customersQueryResult allAddresses addressesQueryResult pepesAddresses pepe |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	customersQueryResult := session select: [ :customer | (customer identificationType = 'D') and: [customer identificationNumber = '22333444'] ] ofType: Customer.
	pepe := customersQueryResult anyOne.
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Pepe' equals: pepe firstName.
	self assert: 'Sanchez' equals: pepe lastName.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first  streetNumber = 3322.
	self assert: pepesAddresses first  town equals: 'Olivos'.
	self assert: pepesAddresses first  zipCode equals: 1636.
	self assert: pepesAddresses first  province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

"
	customersQueryResult := session select: [ :customer | (customer identificationType = 'C') and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer.
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Juan' equals: customersQueryResult anyOne firstName.
	self assert: 'Perez' equals: customersQueryResult anyOne lastName.		
	
	
	
	allAddresses := session selectAllOfType: Address.
	self assert: 3 equals: (allAddresses size).
	
	addressesQueryResult := session select: [ :address |
		(address streetName = 'San Martin') 
		and: [ address streetNumber = 3322 ]  
		and: [ address town = 'Olivos' ]
		and: [ address zipCode = 1636 ]
		and: [ address province = 'BsAs' ] ]
		ofType: Address.
	self assert: 1 equals: (addressesQueryResult size).
	
	
	addressesQueryResult := session select: [ :address |
		(address streetName = 'Maipu') 
		and: [ address streetNumber = 888 ]  
		and: [ address town = 'Florida' ]
		and: [ address zipCode = 1122 ]
		and: [ address province = 'Buenos Aires' ] ]
		ofType: Address.
	self assert: 1 equals: (addressesQueryResult size).
	
	addressesQueryResult := session select: [ :address |
		(address streetName = 'Alem') 
		and: [ address streetNumber = 1122 ]  
		and: [ address town = 'CABA' ]
		and: [ address zipCode = 1001 ]
		and: [ address province = 'CABA' ] ]
		ofType: Address.
	self assert: 1 equals: (addressesQueryResult size).		
	
	
	customersQueryResult := session select: [ :customer | (customer identificationType = 'D') and: [customer identificationNumber = '22333444'] ] ofType: Customer.
	self assert: 2 equals: customersQueryResult anyOne addresses size.

	"! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 15:17:51'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 15:17:52'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:20:24' prior: 50624911!
test01Import

	| allCustomers customersQueryResult pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	customersQueryResult := session select: [ :customer | (customer identificationType = 'D') and: [customer identificationNumber = '22333444'] ] ofType: Customer.
	pepe := customersQueryResult anyOne.
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Pepe' equals: pepe firstName.
	self assert: 'Sanchez' equals: pepe lastName.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first  streetNumber = 3322.
	self assert: pepesAddresses first  town equals: 'Olivos'.
	self assert: pepesAddresses first  zipCode equals: 1636.
	self assert: pepesAddresses first  province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	customersQueryResult := session select: [ :customer | (customer identificationType = 'C') and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer.
	juan := customersQueryResult anyOne.
	
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 15:20:35'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 15:20:36'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:23:26' prior: 50625009!
test01Import

	| allCustomers customersQueryResult pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	customersQueryResult := session select: [ :customer | (customer identificationType = 'D') and: [customer identificationNumber = '22333444'] ] ofType: Customer.
	pepe := customersQueryResult anyOne.	
	self assert: 1 equals: (customersQueryResult size).		
	self assert: 'Pepe' equals: pepe firstName.
	self assert: 'Sanchez' equals: pepe lastName.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first  streetNumber = 3322.
	self assert: pepesAddresses first  town equals: 'Olivos'.
	self assert: pepesAddresses first  zipCode equals: 1636.
	self assert: pepesAddresses first  province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	customersQueryResult := session select: [ :customer | (customer identificationType = 'C') and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer.
	juan := customersQueryResult anyOne.
	
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:26:11'!
selectCustomer

	^ session select: [ :customer | (customer identificationType = 'D') and: [customer identificationNumber = '22333444'] ] ofType: Customer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:26:11' prior: 50625077!
test01Import

	| allCustomers customersQueryResult pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	customersQueryResult := self selectCustomer.
	pepe := customersQueryResult anyOne.	
	self assert: 1 equals: (customersQueryResult size).		
	self assert: 'Pepe' equals: pepe firstName.
	self assert: 'Sanchez' equals: pepe lastName.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first  streetNumber = 3322.
	self assert: pepesAddresses first  town equals: 'Olivos'.
	self assert: pepesAddresses first  zipCode equals: 1636.
	self assert: pepesAddresses first  province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	customersQueryResult := session select: [ :customer | (customer identificationType = 'C') and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer.
	juan := customersQueryResult anyOne.
	
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:27:06'!
selectCustomer: anIdentificationType

	^ session select: [ :customer | (customer identificationType = 'D') and: [customer identificationNumber = '22333444'] ] ofType: Customer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:27:06' prior: 50625148!
test01Import

	| allCustomers customersQueryResult pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	customersQueryResult := self selectCustomer: 'D'.
	pepe := customersQueryResult anyOne.	
	self assert: 1 equals: (customersQueryResult size).		
	self assert: 'Pepe' equals: pepe firstName.
	self assert: 'Sanchez' equals: pepe lastName.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first  streetNumber = 3322.
	self assert: pepesAddresses first  town equals: 'Olivos'.
	self assert: pepesAddresses first  zipCode equals: 1636.
	self assert: pepesAddresses first  province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	customersQueryResult := session select: [ :customer | (customer identificationType = 'C') and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer.
	juan := customersQueryResult anyOne.
	
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!methodRemoval: ImportTest #selectCustomer stamp: 'AS 6/24/2023 15:27:06'!
selectCustomer

	^ session select: [ :customer | (customer identificationType = 'D') and: [customer identificationNumber = '22333444'] ] ofType: Customer!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:27:06' prior: 50625207!
selectCustomer: anIdentificationType

	^ session select: [ :customer | (customer identificationType = anIdentificationType) and: [customer identificationNumber = '22333444'] ] ofType: Customer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:28:35'!
selectCustomer: anIdentificationType number: anIdentificationNumber 

	^ session select: [ :customer | (customer identificationType = anIdentificationType) and: [customer identificationNumber = '22333444'] ] ofType: Customer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:28:35' prior: 50625216!
test01Import

	| allCustomers customersQueryResult pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	customersQueryResult := self selectCustomer: 'D' number: '22333444'.
	pepe := customersQueryResult anyOne.	
	self assert: 1 equals: (customersQueryResult size).		
	self assert: 'Pepe' equals: pepe firstName.
	self assert: 'Sanchez' equals: pepe lastName.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first  streetNumber = 3322.
	self assert: pepesAddresses first  town equals: 'Olivos'.
	self assert: pepesAddresses first  zipCode equals: 1636.
	self assert: pepesAddresses first  province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	customersQueryResult := session select: [ :customer | (customer identificationType = 'C') and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer.
	juan := customersQueryResult anyOne.
	
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!methodRemoval: ImportTest #selectCustomer: stamp: 'AS 6/24/2023 15:28:35'!
selectCustomer: anIdentificationType

	^ session select: [ :customer | (customer identificationType = anIdentificationType) and: [customer identificationNumber = '22333444'] ] ofType: Customer!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:28:35' prior: 50625292!
selectCustomer: anIdentificationType number: anIdentificationNumber 

	^ session select: [ :customer | (customer identificationType = anIdentificationType) and: [customer identificationNumber = anIdentificationNumber] ] ofType: Customer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:28:54'!
selectCustomerWith: anIdentificationType number: anIdentificationNumber 

	^ session select: [ :customer | (customer identificationType = anIdentificationType) and: [customer identificationNumber = anIdentificationNumber] ] ofType: Customer! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:28:54' prior: 50625303!
test01Import

	| allCustomers customersQueryResult pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	customersQueryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepe := customersQueryResult anyOne.	
	self assert: 1 equals: (customersQueryResult size).		
	self assert: 'Pepe' equals: pepe firstName.
	self assert: 'Sanchez' equals: pepe lastName.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first  streetNumber = 3322.
	self assert: pepesAddresses first  town equals: 'Olivos'.
	self assert: pepesAddresses first  zipCode equals: 1636.
	self assert: pepesAddresses first  province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	customersQueryResult := session select: [ :customer | (customer identificationType = 'C') and: [customer identificationNumber = '23-25666777-9'] ] ofType: Customer.
	juan := customersQueryResult anyOne.
	
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!methodRemoval: ImportTest #selectCustomer:number: stamp: 'AS 6/24/2023 15:28:54'!
selectCustomer: anIdentificationType number: anIdentificationNumber 

	^ session select: [ :customer | (customer identificationType = anIdentificationType) and: [customer identificationNumber = anIdentificationNumber] ] ofType: Customer!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:29:48' prior: 50625393!
test01Import

	| allCustomers customersQueryResult pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	customersQueryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepe := customersQueryResult anyOne.	
	self assert: 1 equals: (customersQueryResult size).		
	self assert: 'Pepe' equals: pepe firstName.
	self assert: 'Sanchez' equals: pepe lastName.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first  streetNumber = 3322.
	self assert: pepesAddresses first  town equals: 'Olivos'.
	self assert: pepesAddresses first  zipCode equals: 1636.
	self assert: pepesAddresses first  province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	customersQueryResult := self selectCustomerWith: 'C' number: '23-25666777-9'.
	juan := customersQueryResult anyOne.
	
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 15:29:50'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 15:29:51'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:30:51' prior: 50625382!
selectCustomerWith: anIdentificationType number: anIdentificationNumber 

	| queryResult |
	queryResult := session select: [ :customer | (customer identificationType = anIdentificationType) and: [customer identificationNumber = anIdentificationNumber] ] ofType: Customer.
	^queryResult anyOne.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:30:58' prior: 50625527!
selectCustomerWith: anIdentificationType number: anIdentificationNumber 

	| queryResult |
	
	queryResult := session select: [ :customer | (customer identificationType = anIdentificationType) and: [customer identificationNumber = anIdentificationNumber] ] ofType: Customer.
	
	^queryResult anyOne.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:31:31' prior: 50625464!
test01Import

	| allCustomers customersQueryResult pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	pepe := self selectCustomerWith: 'D' number: '22333444'.

	self assert: 1 equals: (customersQueryResult size).		
	self assert: 'Pepe' equals: pepe firstName.
	self assert: 'Sanchez' equals: pepe lastName.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first  streetNumber = 3322.
	self assert: pepesAddresses first  town equals: 'Olivos'.
	self assert: pepesAddresses first  zipCode equals: 1636.
	self assert: pepesAddresses first  province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	juan := self selectCustomerWith: 'C' number: '23-25666777-9'.
	
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:39:10' prior: 50625553!
test01Import

	| allCustomers customersQueryResult pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	pepe := self selectCustomerWith: 'D' number: '22333444'.

	self assert: 1 equals: (customersQueryResult size).		
	self assert: 'Pepe' equals: pepe firstName.
	self assert: 'Sanchez' equals: pepe lastName.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first streetNumber = 3322.
	self assert: pepesAddresses first town equals: 'Olivos'.
	self assert: pepesAddresses first zipCode equals: 1636.
	self assert: pepesAddresses first province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	juan := self selectCustomerWith: 'C' number: '23-25666777-9'.
	
	self assert: 1 equals: (customersQueryResult size).
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:43:08' prior: 50625608!
test01Import

	| allCustomers pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	pepe := self selectCustomerWith: 'D' number: '22333444'.

	self assert: 'Pepe' equals: pepe firstName.
	self assert: 'Sanchez' equals: pepe lastName.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first streetNumber = 3322.
	self assert: pepesAddresses first town equals: 'Olivos'.
	self assert: pepesAddresses first zipCode equals: 1636.
	self assert: pepesAddresses first province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	juan := self selectCustomerWith: 'C' number: '23-25666777-9'.
	
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 15:43:12'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 15:43:13'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:45:44' prior: 50625662!
test01Import

	| allCustomers pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	pepe := self selectCustomerWith: 'D' number: '22333444'.

	self assert: 'Pepe' equals: (self selectCustomerWith: 'D' number: '22333444') firstName.
	self assert: 'Sanchez' equals: ((self selectCustomerWith: 'D' number: '22333444')) lastName.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first streetNumber = 3322.
	self assert: pepesAddresses first town equals: 'Olivos'.
	self assert: pepesAddresses first zipCode equals: 1636.
	self assert: pepesAddresses first province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	juan := self selectCustomerWith: 'C' number: '23-25666777-9'.
	
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:46:48'!
assertCustomerName

	self assert: 'Pepe' equals: (self selectCustomerWith: 'D' number: '22333444') firstName.
	self assert: 'Sanchez' equals: ((self selectCustomerWith: 'D' number: '22333444')) lastName! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:46:48' prior: 50625717!
test01Import

	| allCustomers pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	pepe := self selectCustomerWith: 'D' number: '22333444'.

	self assertCustomerName.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first streetNumber = 3322.
	self assert: pepesAddresses first town equals: 'Olivos'.
	self assert: pepesAddresses first zipCode equals: 1636.
	self assert: pepesAddresses first province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	juan := self selectCustomerWith: 'C' number: '23-25666777-9'.
	
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:47:32' prior: 50625770!
assertCustomerName

	| customer |
	customer := self selectCustomerWith: 'D' number: '22333444'.
	self assert: 'Pepe' equals: (customer) firstName.
	self assert: 'Sanchez' equals: ((self selectCustomerWith: 'D' number: '22333444')) lastName! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:48:22' prior: 50625828!
assertCustomerName

	| customer |
	
	customer := self selectCustomerWith: 'D' number: '22333444'.
	
	self assert: 'Pepe' equals: customer firstName.
	self assert: 'Sanchez' equals: customer lastName.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:49:32'!
assertCustomerName: identificationType

	| customer |
	
	customer := self selectCustomerWith: 'D' number: '22333444'.
	
	self assert: 'Pepe' equals: customer firstName.
	self assert: 'Sanchez' equals: customer lastName.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:49:32' prior: 50625780!
test01Import

	| allCustomers pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	pepe := self selectCustomerWith: 'D' number: '22333444'.

	self assertCustomerName: 'D'.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first streetNumber = 3322.
	self assert: pepesAddresses first town equals: 'Olivos'.
	self assert: pepesAddresses first zipCode equals: 1636.
	self assert: pepesAddresses first province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	juan := self selectCustomerWith: 'C' number: '23-25666777-9'.
	
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!methodRemoval: ImportTest #assertCustomerName stamp: 'AS 6/24/2023 15:49:32'!
assertCustomerName

	| customer |
	
	customer := self selectCustomerWith: 'D' number: '22333444'.
	
	self assert: 'Pepe' equals: customer firstName.
	self assert: 'Sanchez' equals: customer lastName.!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:49:32' prior: 50625848!
assertCustomerName: identificationType

	| customer |
	
	customer := self selectCustomerWith: identificationType number: '22333444'.
	
	self assert: 'Pepe' equals: customer firstName.
	self assert: 'Sanchez' equals: customer lastName.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:50:15'!
assertCustomerName: identificationType number: anIdentificationNumber 

	| customer |
	
	customer := self selectCustomerWith: identificationType number: '22333444'.
	
	self assert: 'Pepe' equals: customer firstName.
	self assert: 'Sanchez' equals: customer lastName.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:50:15' prior: 50625858!
test01Import

	| allCustomers pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	pepe := self selectCustomerWith: 'D' number: '22333444'.

	self assertCustomerName: 'D' number: '22333444'.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first streetNumber = 3322.
	self assert: pepesAddresses first town equals: 'Olivos'.
	self assert: pepesAddresses first zipCode equals: 1636.
	self assert: pepesAddresses first province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	juan := self selectCustomerWith: 'C' number: '23-25666777-9'.
	
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!methodRemoval: ImportTest #assertCustomerName: stamp: 'AS 6/24/2023 15:50:15'!
assertCustomerName: identificationType

	| customer |
	
	customer := self selectCustomerWith: identificationType number: '22333444'.
	
	self assert: 'Pepe' equals: customer firstName.
	self assert: 'Sanchez' equals: customer lastName.!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:50:15' prior: 50625925!
assertCustomerName: identificationType number: anIdentificationNumber 

	| customer |
	
	customer := self selectCustomerWith: identificationType number: anIdentificationNumber.
	
	self assert: 'Pepe' equals: customer firstName.
	self assert: 'Sanchez' equals: customer lastName.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:51:19'!
assertSelectCustomerType: identificationType number: anIdentificationNumber 

	| customer |
	
	customer := self selectCustomerWith: identificationType number: anIdentificationNumber.
	
	self assert: 'Pepe' equals: customer firstName.
	self assert: 'Sanchez' equals: customer lastName.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:51:19' prior: 50625937!
test01Import

	| allCustomers pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	pepe := self selectCustomerWith: 'D' number: '22333444'.

	self assertSelectCustomerType: 'D' number: '22333444'.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first streetNumber = 3322.
	self assert: pepesAddresses first town equals: 'Olivos'.
	self assert: pepesAddresses first zipCode equals: 1636.
	self assert: pepesAddresses first province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	juan := self selectCustomerWith: 'C' number: '23-25666777-9'.
	
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!methodRemoval: ImportTest #assertCustomerName:number: stamp: 'AS 6/24/2023 15:51:19'!
assertCustomerName: identificationType number: anIdentificationNumber 

	| customer |
	
	customer := self selectCustomerWith: identificationType number: anIdentificationNumber.
	
	self assert: 'Pepe' equals: customer firstName.
	self assert: 'Sanchez' equals: customer lastName.!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:52:05'!
assertSelectCustomerType: identificationType number: anIdentificationNumber firstName: aFirstName  

	| customer |
	
	customer := self selectCustomerWith: identificationType number: anIdentificationNumber.
	
	self assert: 'Pepe' equals: customer firstName.
	self assert: 'Sanchez' equals: customer lastName.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:52:05' prior: 50626020!
test01Import

	| allCustomers pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	pepe := self selectCustomerWith: 'D' number: '22333444'.

	self assertSelectCustomerType: 'D' number: '22333444' firstName: 'Pepe'.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first streetNumber = 3322.
	self assert: pepesAddresses first town equals: 'Olivos'.
	self assert: pepesAddresses first zipCode equals: 1636.
	self assert: pepesAddresses first province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	juan := self selectCustomerWith: 'C' number: '23-25666777-9'.
	
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!methodRemoval: ImportTest #assertSelectCustomerType:number: stamp: 'AS 6/24/2023 15:52:05'!
assertSelectCustomerType: identificationType number: anIdentificationNumber 

	| customer |
	
	customer := self selectCustomerWith: identificationType number: anIdentificationNumber.
	
	self assert: 'Pepe' equals: customer firstName.
	self assert: 'Sanchez' equals: customer lastName.!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:52:05' prior: 50626080!
assertSelectCustomerType: identificationType number: anIdentificationNumber firstName: aFirstName  

	| customer |
	
	customer := self selectCustomerWith: identificationType number: anIdentificationNumber.
	
	self assert: aFirstName equals: customer firstName.
	self assert: 'Sanchez' equals: customer lastName.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:52:31'!
assertSelectCustomerType: identificationType number: anIdentificationNumber firstName: aFirstName lastName: aLastName   

	| customer |
	
	customer := self selectCustomerWith: identificationType number: anIdentificationNumber.
	
	self assert: aFirstName equals: customer firstName.
	self assert: 'Sanchez' equals: customer lastName.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:52:31' prior: 50626093!
test01Import

	| allCustomers pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	pepe := self selectCustomerWith: 'D' number: '22333444'.

	self assertSelectCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez'.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first streetNumber = 3322.
	self assert: pepesAddresses first town equals: 'Olivos'.
	self assert: pepesAddresses first zipCode equals: 1636.
	self assert: pepesAddresses first province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	juan := self selectCustomerWith: 'C' number: '23-25666777-9'.
	
	self assert: 'Juan' equals: juan firstName.
	self assert: 'Perez' equals: juan lastName.		
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!methodRemoval: ImportTest #assertSelectCustomerType:number:firstName: stamp: 'AS 6/24/2023 15:52:31'!
assertSelectCustomerType: identificationType number: anIdentificationNumber firstName: aFirstName  

	| customer |
	
	customer := self selectCustomerWith: identificationType number: anIdentificationNumber.
	
	self assert: aFirstName equals: customer firstName.
	self assert: 'Sanchez' equals: customer lastName.!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:52:32' prior: 50626168!
assertSelectCustomerType: identificationType number: anIdentificationNumber firstName: aFirstName lastName: aLastName   

	| customer |
	
	customer := self selectCustomerWith: identificationType number: anIdentificationNumber.
	
	self assert: aFirstName equals: customer firstName.
	self assert: aLastName equals: customer lastName.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:55:20' prior: 50625540!
selectCustomerWith: anIdentificationType number: anIdentificationNumber 
	
	^session select: [ :customer | (customer identificationType = anIdentificationType) and: [customer identificationNumber = anIdentificationNumber] ] ofType: Customer.
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:55:30' prior: 50626245!
assertSelectCustomerType: identificationType number: anIdentificationNumber firstName: aFirstName lastName: aLastName   

	| queryResult |
	
	queryResult := self selectCustomerWith: identificationType number: anIdentificationNumber.
	
	self assert: aFirstName equals: queryResult firstName.
	self assert: aLastName equals: queryResult lastName.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:56:12' prior: 50626270!
assertSelectCustomerType: identificationType number: anIdentificationNumber firstName: aFirstName lastName: aLastName   

	| queryResult customer |
	
	queryResult := self selectCustomerWith: identificationType number: anIdentificationNumber.
	self assert: 1 equals: queryResult size.
	
	customer := queryResult anyOne.
	
	self assert: aFirstName equals: customer firstName.
	self assert: aLastName equals: customer lastName.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 15:59:36' prior: 50626182!
test01Import

	| allCustomers pepesAddresses pepe juan juansAddresses |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
	
	pepesAddresses := pepe addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first streetNumber = 3322.
	self assert: pepesAddresses first town equals: 'Olivos'.
	self assert: pepesAddresses first zipCode equals: 1636.
	self assert: pepesAddresses first province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Sanchez'.	
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:01:14' prior: 50626301!
test01Import

	| allCustomers pepesAddresses juan juansAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := (queryResult anyOne) addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first streetNumber = 3322.
	self assert: pepesAddresses first town equals: 'Olivos'.
	self assert: pepesAddresses first zipCode equals: 1636.
	self assert: pepesAddresses first province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Sanchez'.	
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:01:47' prior: 50626348!
test01Import

	| allCustomers pepesAddresses juan juansAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses.
	
	self assert: pepesAddresses first streetName equals: 'San Martin'.
	self assert: pepesAddresses first streetNumber = 3322.
	self assert: pepesAddresses first town equals: 'Olivos'.
	self assert: pepesAddresses first zipCode equals: 1636.
	self assert: pepesAddresses first province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Sanchez'.	
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:02:59' prior: 50626398!
test01Import

	| allCustomers pepesAddresses juan juansAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses.
	
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first streetName equals: 'San Martin'.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first streetNumber = 3322.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first town equals: 'Olivos'.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first zipCode equals: 1636.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Sanchez'.	
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:04:04' prior: 50626449!
test01Import

	| allCustomers pepesAddresses juan juansAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses.
	
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first streetName equals: 'San Martin'.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first streetNumber = 3322.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first town equals: 'Olivos'.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first zipCode equals: 1636.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first province equals: 'BsAs'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Sanchez'.	
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:04:25'!
assertAddress

	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first streetName equals: 'San Martin'.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first streetNumber = 3322.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first town equals: 'Olivos'.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first zipCode equals: 1636.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:04:25' prior: 50626508!
test01Import

	| allCustomers pepesAddresses juan juansAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses.
	
	self assertAddress.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Sanchez'.	
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:04:55' prior: 50626567!
assertAddress

	| customer |
	customer := (self selectCustomerWith: 'D' number: '22333444') anyOne.
	self assert: (customer) addresses first streetName equals: 'San Martin'.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first streetNumber = 3322.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first town equals: 'Olivos'.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first zipCode equals: 1636.
	self assert: ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses first province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:05:49' prior: 50626631!
assertAddress

	| customer |
	
	customer := (self selectCustomerWith: 'D' number: '22333444') anyOne.
	
	self assert: customer addresses first streetName equals: 'San Martin'.
	
	self assert: customer addresses first streetNumber = 3322.
	self assert: customer addresses first town equals: 'Olivos'.
	self assert: customer addresses first zipCode equals: 1636.
	self assert: customer addresses first province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:06:08'!
assertAddress: anIdentificationType

	| customer |
	
	customer := (self selectCustomerWith: 'D' number: '22333444') anyOne.
	
	self assert: customer addresses first streetName equals: 'San Martin'.
	
	self assert: customer addresses first streetNumber = 3322.
	self assert: customer addresses first town equals: 'Olivos'.
	self assert: customer addresses first zipCode equals: 1636.
	self assert: customer addresses first province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:06:08' prior: 50626589!
test01Import

	| allCustomers pepesAddresses juan juansAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses.
	
	self assertAddress: 'D'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Sanchez'.	
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!methodRemoval: ImportTest #assertAddress stamp: 'AS 6/24/2023 16:06:08'!
assertAddress

	| customer |
	
	customer := (self selectCustomerWith: 'D' number: '22333444') anyOne.
	
	self assert: customer addresses first streetName equals: 'San Martin'.
	
	self assert: customer addresses first streetNumber = 3322.
	self assert: customer addresses first town equals: 'Olivos'.
	self assert: customer addresses first zipCode equals: 1636.
	self assert: customer addresses first province equals: 'BsAs'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:06:08' prior: 50626670!
assertAddress: anIdentificationType

	| customer |
	
	customer := (self selectCustomerWith: anIdentificationType number: '22333444') anyOne.
	
	self assert: customer addresses first streetName equals: 'San Martin'.
	
	self assert: customer addresses first streetNumber = 3322.
	self assert: customer addresses first town equals: 'Olivos'.
	self assert: customer addresses first zipCode equals: 1636.
	self assert: customer addresses first province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:06:32'!
assertAddress: anIdentificationType number: anIdentificationNumber 

	| customer |
	
	customer := (self selectCustomerWith: anIdentificationType number: '22333444') anyOne.
	
	self assert: customer addresses first streetName equals: 'San Martin'.
	
	self assert: customer addresses first streetNumber = 3322.
	self assert: customer addresses first town equals: 'Olivos'.
	self assert: customer addresses first zipCode equals: 1636.
	self assert: customer addresses first province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:06:32' prior: 50626687!
test01Import

	| allCustomers pepesAddresses juan juansAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses.
	
	self assertAddress: 'D' number: '22333444'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Sanchez'.	
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!methodRemoval: ImportTest #assertAddress: stamp: 'AS 6/24/2023 16:06:32'!
assertAddress: anIdentificationType

	| customer |
	
	customer := (self selectCustomerWith: anIdentificationType number: '22333444') anyOne.
	
	self assert: customer addresses first streetName equals: 'San Martin'.
	
	self assert: customer addresses first streetNumber = 3322.
	self assert: customer addresses first town equals: 'Olivos'.
	self assert: customer addresses first zipCode equals: 1636.
	self assert: customer addresses first province equals: 'BsAs'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:06:32' prior: 50626762!
assertAddress: anIdentificationType number: anIdentificationNumber 

	| customer |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	self assert: customer addresses first streetName equals: 'San Martin'.
	
	self assert: customer addresses first streetNumber = 3322.
	self assert: customer addresses first town equals: 'Olivos'.
	self assert: customer addresses first zipCode equals: 1636.
	self assert: customer addresses first province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:07:05'!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 

	| customer |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	self assert: customer addresses first streetName equals: 'San Martin'.
	
	self assert: customer addresses first streetNumber = 3322.
	self assert: customer addresses first town equals: 'Olivos'.
	self assert: customer addresses first zipCode equals: 1636.
	self assert: customer addresses first province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:07:05' prior: 50626781!
test01Import

	| allCustomers pepesAddresses juan juansAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses.
	
	self assertAddressOfCustomerType: 'D' number: '22333444'.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Sanchez'.	
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!methodRemoval: ImportTest #assertAddress:number: stamp: 'AS 6/24/2023 16:07:05'!
assertAddress: anIdentificationType number: anIdentificationNumber 

	| customer |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	self assert: customer addresses first streetName equals: 'San Martin'.
	
	self assert: customer addresses first streetNumber = 3322.
	self assert: customer addresses first town equals: 'Olivos'.
	self assert: customer addresses first zipCode equals: 1636.
	self assert: customer addresses first province equals: 'BsAs'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:10:23' prior: 50626860!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 

	| customer address |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	address := Address new.
	address streetName: 'San Martin'.
	address streetNumber: 3322.
	address town: 'Olivos'.
	address zipCode: 1636.
	address province: 'BsAs'.
	
	self assert: customer addresses first streetName equals: address streetName.
	
	self assert: customer addresses first streetNumber equals: address streetNumber.
	self assert: customer addresses first town equals: address town.
	self assert: customer addresses first zipCode equals: address zipCode.
	self assert: customer addresses first province equals: address province.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:12:32' prior: 50626942!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 

	| customer address |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	address := Address 
	withStreetName: 'San Martin'
	streetNumber: 3322
	town: 'Olivos'
	zipCode: 1636
	province: 'BsAs'.
	
	self assert: customer addresses first streetName equals: address streetName.
	
	self assert: customer addresses first streetNumber equals: address streetNumber.
	self assert: customer addresses first town equals: address town.
	self assert: customer addresses first zipCode equals: address zipCode.
	self assert: customer addresses first province equals: address province.! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:12:36'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:12:37'!
ERROR!
!Address class methodsFor: 'instance creation' stamp: 'AS 6/24/2023 16:12:44'!
withStreetName: aString streetNumber: aSmallInteger town: aString3 zipCode: aSmallInteger4 province: aString5 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithStreetName: aString streetNumber: aSmallInteger town: aString3 zipCode: aSmallInteger4 province: aString5 ! !
!Address class methodsFor: 'instance creation' stamp: 'AS 6/24/2023 16:12:50' prior: 50626999!
withStreetName: aString streetNumber: aSmallInteger town: aString3 zipCode: aSmallInteger4 province: aString5 

	^self new initializeWithStreetName: aString streetNumber: aSmallInteger town: aString3 zipCode: aSmallInteger4 province: aString5 ! !
!Address class methodsFor: 'instance creation' stamp: 'AS 6/24/2023 16:13:01' prior: 50627013!
withStreetName: aStreetName streetNumber: aSmallInteger town: aString3 zipCode: aSmallInteger4 province: aString5 

	^self new initializeWithStreetName: aStreetName streetNumber: aSmallInteger town: aString3 zipCode: aSmallInteger4 province: aString5 ! !
!Address class methodsFor: 'instance creation' stamp: 'AS 6/24/2023 16:13:09' prior: 50627024!
withStreetName: aStreetName streetNumber: aStreetNumber town: aString3 zipCode: aSmallInteger4 province: aString5 

	^self new initializeWithStreetName: aStreetName streetNumber: aStreetNumber town: aString3 zipCode: aSmallInteger4 province: aString5 ! !
!Address class methodsFor: 'instance creation' stamp: 'AS 6/24/2023 16:13:13' prior: 50627035!
withStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aSmallInteger4 province: aString5 

	^self new initializeWithStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aSmallInteger4 province: aString5 ! !
!Address class methodsFor: 'instance creation' stamp: 'AS 6/24/2023 16:13:20' prior: 50627046!
withStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aString5 

	^self new initializeWithStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aString5 ! !
!Address class methodsFor: 'instance creation' stamp: 'AS 6/24/2023 16:13:26' prior: 50627057!
withStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince 

	^self new initializeWithStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince ! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:13:33'!
ERROR!
!Address methodsFor: 'initialization' stamp: 'AS 6/24/2023 16:13:49'!
initializeWithStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince 
	self shouldBeImplemented.
	streetName := aStreetName.
	streetNumber := aStreetNumber.
	town := aTown.
	zipCode := aZipCode.
	province := aProvince.! !
!Address methodsFor: 'initialization' stamp: 'AS 6/24/2023 16:13:54' prior: 50627081!
initializeWithStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince 

	streetName := aStreetName.
	streetNumber := aStreetNumber.
	town := aTown.
	zipCode := aZipCode.
	province := aProvince.! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:13:57'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:14:54' prior: 50626969!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 

	| customer address |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	Address 
	withStreetName: 'San Martin'
	streetNumber: 3322
	town: 'Olivos'
	zipCode: 1636
	province: 'BsAs'.
	
	self assert: customer addresses first streetName equals: address streetName.
	
	self assert: customer addresses first streetNumber equals: address streetNumber.
	self assert: customer addresses first town equals: address town.
	self assert: customer addresses first zipCode equals: address zipCode.
	self assert: customer addresses first province equals: address province.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:15:36' prior: 50627106!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 

	| customer address |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	address := Address 
	withStreetName: 'San Martin'
	streetNumber: 3322
	town: 'Olivos'
	zipCode: 1636
	province: 'BsAs'.
	
	self assert: customer addresses first streetName equals: address streetName.
	
	self assert: customer addresses first streetNumber equals: address streetNumber.
	self assert: customer addresses first town equals: address town.
	self assert: customer addresses first zipCode equals: address zipCode.
	self assert: customer addresses first province equals: address province.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:15:57'!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber address: anAddress  

	| customer address |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	address := Address 
	withStreetName: 'San Martin'
	streetNumber: 3322
	town: 'Olivos'
	zipCode: 1636
	province: 'BsAs'.
	
	self assert: customer addresses first streetName equals: address streetName.
	
	self assert: customer addresses first streetNumber equals: address streetNumber.
	self assert: customer addresses first town equals: address town.
	self assert: customer addresses first zipCode equals: address zipCode.
	self assert: customer addresses first province equals: address province.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:15:58' prior: 50626880!
test01Import

	| allCustomers pepesAddresses juan juansAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses.
	
	self assertAddressOfCustomerType: 'D' number: '22333444' address: (Address 
	withStreetName: 'San Martin'
	streetNumber: 3322
	town: 'Olivos'
	zipCode: 1636
	province: 'BsAs').

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Sanchez'.	
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!methodRemoval: ImportTest #assertAddressOfCustomerType:number: stamp: 'AS 6/24/2023 16:15:58'!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 

	| customer address |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	address := Address 
	withStreetName: 'San Martin'
	streetNumber: 3322
	town: 'Olivos'
	zipCode: 1636
	province: 'BsAs'.
	
	self assert: customer addresses first streetName equals: address streetName.
	
	self assert: customer addresses first streetNumber equals: address streetNumber.
	self assert: customer addresses first town equals: address town.
	self assert: customer addresses first zipCode equals: address zipCode.
	self assert: customer addresses first province equals: address province.!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:15:58' prior: 50627156!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber address: anAddress  

	| customer address |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	address := anAddress.
	
	self assert: customer addresses first streetName equals: address streetName.
	
	self assert: customer addresses first streetNumber equals: address streetNumber.
	self assert: customer addresses first town equals: address town.
	self assert: customer addresses first zipCode equals: address zipCode.
	self assert: customer addresses first province equals: address province.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:16:20' prior: 50627254!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber address: anAddress  

	| customer |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	self assert: customer addresses first streetName equals: anAddress streetName.	
	self assert: customer addresses first streetNumber equals: anAddress streetNumber.
	self assert: customer addresses first town equals: anAddress town.
	self assert: customer addresses first zipCode equals: anAddress zipCode.
	self assert: customer addresses first province equals: anAddress province.! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:17:12'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:17:42' prior: 50627182!
test01Import

	| allCustomers pepesAddresses juan juansAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses.
	
	self assertAddressOfCustomerType: 'D' number: '22333444' address: (Address 
	withStreetName: 'San Martin'
	streetNumber: 3322
	town: 'Olivos'
	zipCode: 1636
	province: 'BsAs').

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez'.	
	
	juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'.
	! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:17:47'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:18:24' prior: 50627302!
test01Import

	| allCustomers pepesAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses.
	
	self assertAddressOfCustomerType: 'D' number: '22333444' address: (Address 
	withStreetName: 'San Martin'
	streetNumber: 3322
	town: 'Olivos'
	zipCode: 1636
	province: 'BsAs').

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez'.	
	
	"juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'."
	! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:18:30'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:18:32'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:19:00' prior: 50627351!
test01Import

	| allCustomers pepesAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses.
	
	self assertAddressOfCustomerType: 'D' number: '22333444' address: (Address 
	withStreetName: 'San Martin'
	streetNumber: 3322
	town: 'Olivos'
	zipCode: 1636
	province: 'BsAs').

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez'.	
	
	"juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'."
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:19:11'!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anAddress  

	| customer |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	self assert: customer addresses first streetName equals: anAddress streetName.	
	self assert: customer addresses first streetNumber equals: anAddress streetNumber.
	self assert: customer addresses first town equals: anAddress town.
	self assert: customer addresses first zipCode equals: anAddress zipCode.
	self assert: customer addresses first province equals: anAddress province.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:19:11' prior: 50627402!
test01Import

	| allCustomers pepesAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses.
	
	self assertAddressOfCustomerType: 'D' number: '22333444' addresses: (Address 
	withStreetName: 'San Martin'
	streetNumber: 3322
	town: 'Olivos'
	zipCode: 1636
	province: 'BsAs').

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez'.	
	
	"juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'."
	! !

!methodRemoval: ImportTest #assertAddressOfCustomerType:number:address: stamp: 'AS 6/24/2023 16:19:11'!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber address: anAddress  

	| customer |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	self assert: customer addresses first streetName equals: anAddress streetName.	
	self assert: customer addresses first streetNumber equals: anAddress streetNumber.
	self assert: customer addresses first town equals: anAddress town.
	self assert: customer addresses first zipCode equals: anAddress zipCode.
	self assert: customer addresses first province equals: anAddress province.!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:19:24' prior: 50627470!
test01Import

	| allCustomers pepesAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses.
	
	self assertAddressOfCustomerType: 'D' number: '22333444' addresses:  {Address 
	withStreetName: 'San Martin'
	streetNumber: 3322
	town: 'Olivos'
	zipCode: 1636
	province: 'BsAs' }.

	self assert: pepesAddresses second streetName equals: 'Maipu'.
	self assert: pepesAddresses second streetNumber equals: 888.
	self assert: pepesAddresses second town equals: 'Florida'.
	self assert: pepesAddresses second zipCode equals: 1122.
	self assert: pepesAddresses second province equals: 'Buenos Aires'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez'.	
	
	"juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'."
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:19:37' prior: 50627448!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: aCollectionOfAddress  

	| customer |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	self assert: customer addresses first streetName equals: aCollectionOfAddress streetName.	
	self assert: customer addresses first streetNumber equals: aCollectionOfAddress streetNumber.
	self assert: customer addresses first town equals: aCollectionOfAddress town.
	self assert: customer addresses first zipCode equals: aCollectionOfAddress zipCode.
	self assert: customer addresses first province equals: aCollectionOfAddress province.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:19:47' prior: 50627586!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	self assert: customer addresses first streetName equals: anArrayOfAddress streetName.	
	self assert: customer addresses first streetNumber equals: anArrayOfAddress streetNumber.
	self assert: customer addresses first town equals: anArrayOfAddress town.
	self assert: customer addresses first zipCode equals: anArrayOfAddress zipCode.
	self assert: customer addresses first province equals: anArrayOfAddress province.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:26:46' prior: 50627611!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	(index < anArrayOfAddress size) whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !

----SNAPSHOT----(24 June 2023 16:26:54) CuisUniversity-5832.image priorSource: 9366758!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:27:05' prior: 50627635!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	(index <= anArrayOfAddress size) whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:27:16'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:27:17'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:28:04' prior: 50627667!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:28:06'!
PASSED!
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:29:49' overrides: 16901772!
= otherAddress
	
	(streetName = otherAddress streetName)
	and: [streetNumber = otherAddress streetNumber]
	and: [town = otherAddress town]
	and: [zipCode = otherAddress zipCode]
	and: [province = otherAddress province].! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:32:20' overrides: 16901788!
hash
	
	((((streetName bitXor: streetNumber) 	bitXor: town) 	bitXor: zipCode) 	bitXor: province)! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:35:03' prior: 50627701!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [self assert: (customer addresses at: index) equals: (anArrayOfAddress at: index).
		index := index + 1 ]! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:35:04'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:35:09'!
ERROR!
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:36:55' prior: 50627743 overrides: 16901788!
hash
	
	((((streetName hash bitXor: streetNumber hash) 	bitXor: town hash) 	bitXor: zipCode hash) 	bitXor: province hash)! !

----STARTUP---- (24 June 2023 16:37:50) as E:\ISW1\CUIS\CustomerImporter\CuisUniversity-5832.image!

!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:27:05' prior: 50627635!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	(index <= anArrayOfAddress size) whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:28:04' prior: 50627782!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:29:49' overrides: 16901772!
= otherAddress
	
	(streetName = otherAddress streetName)
	and: [streetNumber = otherAddress streetNumber]
	and: [town = otherAddress town]
	and: [zipCode = otherAddress zipCode]
	and: [province = otherAddress province].! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:32:20' overrides: 16901788!
hash
	
	((((streetName bitXor: streetNumber) 	bitXor: town) 	bitXor: zipCode) 	bitXor: province)! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:35:03' prior: 50627812!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [self assert: (customer addresses at: index) equals: (anArrayOfAddress at: index).
		index := index + 1 ]! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:36:55' prior: 50627851 overrides: 16901788!
hash
	
	((((streetName hash bitXor: streetNumber hash) 	bitXor: town hash) 	bitXor: zipCode hash) 	bitXor: province hash)! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:38:56' prior: 50627874 overrides: 16901788!
hash
	
	(((((streetName hash) bitXor: (streetNumber hash)) 	bitXor: (town hash)) 	bitXor: (zipCode hash)) 	bitXor: (province hash))! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:39:04'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:39:13'!
ERROR!

----STARTUP---- (24 June 2023 16:40:02) as E:\ISW1\CUIS\CustomerImporter\CuisUniversity-5832.image!

!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:27:05' prior: 50627635!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	(index <= anArrayOfAddress size) whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:28:04' prior: 50627898!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:29:49' overrides: 16901772!
= otherAddress
	
	(streetName = otherAddress streetName)
	and: [streetNumber = otherAddress streetNumber]
	and: [town = otherAddress town]
	and: [zipCode = otherAddress zipCode]
	and: [province = otherAddress province].! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:32:20' overrides: 16901788!
hash
	
	((((streetName bitXor: streetNumber) 	bitXor: town) 	bitXor: zipCode) 	bitXor: province)! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:35:03' prior: 50627928!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [self assert: (customer addresses at: index) equals: (anArrayOfAddress at: index).
		index := index + 1 ]! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:36:55' prior: 50627967 overrides: 16901788!
hash
	
	((((streetName hash bitXor: streetNumber hash) 	bitXor: town hash) 	bitXor: zipCode hash) 	bitXor: province hash)! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:27:05' prior: 50627974!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	(index <= anArrayOfAddress size) whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:28:04' prior: 50627997!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:29:49' prior: 50627957 overrides: 16901772!
= otherAddress
	
	(streetName = otherAddress streetName)
	and: [streetNumber = otherAddress streetNumber]
	and: [town = otherAddress town]
	and: [zipCode = otherAddress zipCode]
	and: [province = otherAddress province].! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:32:20' prior: 50627990 overrides: 16901788!
hash
	
	((((streetName bitXor: streetNumber) 	bitXor: town) 	bitXor: zipCode) 	bitXor: province)! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:35:03' prior: 50628027!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [self assert: (customer addresses at: index) equals: (anArrayOfAddress at: index).
		index := index + 1 ]! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:36:55' prior: 50628068 overrides: 16901788!
hash
	
	((((streetName hash bitXor: streetNumber hash) 	bitXor: town hash) 	bitXor: zipCode hash) 	bitXor: province hash)! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:38:56' prior: 50628091 overrides: 16901788!
hash
	
	(((((streetName hash) bitXor: (streetNumber hash)) 	bitXor: (town hash)) 	bitXor: (zipCode hash)) 	bitXor: (province hash))! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:40:38' prior: 50628099 overrides: 16901788!
hash
	
	^(streetName hash)! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:40:42'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:40:46'!
ERROR!

----STARTUP---- (24 June 2023 16:41:02) as E:\ISW1\CUIS\CustomerImporter\CuisUniversity-5832.image!

!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:27:05' prior: 50627635!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	(index <= anArrayOfAddress size) whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:28:04' prior: 50628119!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:29:49' overrides: 16901772!
= otherAddress
	
	(streetName = otherAddress streetName)
	and: [streetNumber = otherAddress streetNumber]
	and: [town = otherAddress town]
	and: [zipCode = otherAddress zipCode]
	and: [province = otherAddress province].! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:32:20' overrides: 16901788!
hash
	
	((((streetName bitXor: streetNumber) 	bitXor: town) 	bitXor: zipCode) 	bitXor: province)! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:35:03' prior: 50628149!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [self assert: (customer addresses at: index) equals: (anArrayOfAddress at: index).
		index := index + 1 ]! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:36:55' prior: 50628188 overrides: 16901788!
hash
	
	((((streetName hash bitXor: streetNumber hash) 	bitXor: town hash) 	bitXor: zipCode hash) 	bitXor: province hash)! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:27:05' prior: 50628195!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	(index <= anArrayOfAddress size) whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:28:04' prior: 50628218!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:29:49' prior: 50628178 overrides: 16901772!
= otherAddress
	
	(streetName = otherAddress streetName)
	and: [streetNumber = otherAddress streetNumber]
	and: [town = otherAddress town]
	and: [zipCode = otherAddress zipCode]
	and: [province = otherAddress province].! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:32:20' prior: 50628211 overrides: 16901788!
hash
	
	((((streetName bitXor: streetNumber) 	bitXor: town) 	bitXor: zipCode) 	bitXor: province)! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:35:03' prior: 50628248!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [self assert: (customer addresses at: index) equals: (anArrayOfAddress at: index).
		index := index + 1 ]! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:36:55' prior: 50628289 overrides: 16901788!
hash
	
	((((streetName hash bitXor: streetNumber hash) 	bitXor: town hash) 	bitXor: zipCode hash) 	bitXor: province hash)! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:38:56' prior: 50628312 overrides: 16901788!
hash
	
	(((((streetName hash) bitXor: (streetNumber hash)) 	bitXor: (town hash)) 	bitXor: (zipCode hash)) 	bitXor: (province hash))! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:27:05' prior: 50628296!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	(index <= anArrayOfAddress size) whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:28:04' prior: 50628328!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:29:49' prior: 50628278 overrides: 16901772!
= otherAddress
	
	(streetName = otherAddress streetName)
	and: [streetNumber = otherAddress streetNumber]
	and: [town = otherAddress town]
	and: [zipCode = otherAddress zipCode]
	and: [province = otherAddress province].! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:32:20' prior: 50628320 overrides: 16901788!
hash
	
	((((streetName bitXor: streetNumber) 	bitXor: town) 	bitXor: zipCode) 	bitXor: province)! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:35:03' prior: 50628358!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [self assert: (customer addresses at: index) equals: (anArrayOfAddress at: index).
		index := index + 1 ]! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:36:55' prior: 50628399 overrides: 16901788!
hash
	
	((((streetName hash bitXor: streetNumber hash) 	bitXor: town hash) 	bitXor: zipCode hash) 	bitXor: province hash)! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:27:05' prior: 50628406!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	(index <= anArrayOfAddress size) whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:28:04' prior: 50628429!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [
		self assert: (customer addresses at: index) streetName equals: (anArrayOfAddress at: index) streetName.	
		self assert: (customer addresses at: index) streetNumber equals: (anArrayOfAddress at: index) streetNumber.
		self assert: (customer addresses at: index) town equals: (anArrayOfAddress at: index) town.
		self assert: (customer addresses at: index) zipCode equals: (anArrayOfAddress at: index) zipCode.
		self assert: (customer addresses at: index) province equals: (anArrayOfAddress at: index) province. 
		index := index + 1 ]! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:29:49' prior: 50628388 overrides: 16901772!
= otherAddress
	
	(streetName = otherAddress streetName)
	and: [streetNumber = otherAddress streetNumber]
	and: [town = otherAddress town]
	and: [zipCode = otherAddress zipCode]
	and: [province = otherAddress province].! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:32:20' prior: 50628422 overrides: 16901788!
hash
	
	((((streetName bitXor: streetNumber) 	bitXor: town) 	bitXor: zipCode) 	bitXor: province)! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 16:35:03' prior: 50628459!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [self assert: (customer addresses at: index) equals: (anArrayOfAddress at: index).
		index := index + 1 ]! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:36:55' prior: 50628500 overrides: 16901788!
hash
	
	((((streetName hash bitXor: streetNumber hash) 	bitXor: town hash) 	bitXor: zipCode hash) 	bitXor: province hash)! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:38:56' prior: 50628523 overrides: 16901788!
hash
	
	(((((streetName hash) bitXor: (streetNumber hash)) 	bitXor: (town hash)) 	bitXor: (zipCode hash)) 	bitXor: (province hash))! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:40:38' prior: 50628531 overrides: 16901788!
hash
	
	^(streetName hash)! !
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:41:17' prior: 50628489 overrides: 16901772!
= otherAddress
	
	^(streetName = otherAddress streetName)
		and: [streetNumber = otherAddress streetNumber]
		and: [town = otherAddress town]
		and: [zipCode = otherAddress zipCode]
		and: [province = otherAddress province].! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:41:19'!
PASSED!
!Address methodsFor: 'province' stamp: 'AS 6/24/2023 16:44:25' prior: 50628539 overrides: 16901788!
hash
	
	^((((streetName hash) 
		bitXor: (streetNumber hash))
			bitXor: (town hash))
				bitXor: (zipCode hash))
					bitXor: (province hash)! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 16:44:28'!
PASSED!

----SNAPSHOT----(24 June 2023 16:44:35) CuisUniversity-5832.image priorSource: 9472418!

----STARTUP---- (24 June 2023 20:05:36) as E:\ISW1\CUIS\CustomerImporter\CuisUniversity-5832.image!

!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:08:51' prior: 50627539!
test01Import

	| allCustomers pepesAddresses queryResult |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses.
	
	self assertAddressOfCustomerType: 'D' number: '22333444' addresses:  {Address 
	withStreetName: 'San Martin'
	streetNumber: 3322
	town: 'Olivos'
	zipCode: 1636
	province: 'BsAs'.

	Address withStreetName: 'Maipu'
		streetNumber: 888
		town: 'Florida'
		zipCode: 1122
		province: 'Buenos Aires' }.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez'.	
	
	"juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'."
	! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 20:08:58'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 20:08:59'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:10:05' prior: 50628573!
test01Import

	| allCustomers |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
"	queryResult := self selectCustomerWith: 'D' number: '22333444'.
	pepesAddresses := ((self selectCustomerWith: 'D' number: '22333444') anyOne) addresses. "
	
	self 
		assertAddressOfCustomerType: 'D' number: '22333444' 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez'.	
	
	"juansAddresses := juan addresses.
	
	self assert: juansAddresses first streetName equals: 'Alem'.
	self assert: juansAddresses first streetNumber equals: 1122.
	self assert: juansAddresses first town equals: 'CABA'.
	self assert: juansAddresses first zipCode equals: 1001.
	self assert: juansAddresses first province equals: 'CABA'."
	! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 20:10:11'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 20:10:12'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:11:47' prior: 50628618!
test01Import

	| allCustomers |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	self 
		assertAddressOfCustomerType: 'D' number: '22333444' 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez'.	
	
	self 
		assertAddressOfCustomerType: 'C' number: '23-25666777-9' 
		addresses:  {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 20:11:51'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 20:11:52'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:15:14'!
assertCustomerType

	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	self 
		assertAddressOfCustomerType: 'D' number: '22333444' 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:15:14' prior: 50628664!
test01Import

	| allCustomers |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertCustomerType.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez'.	
	
	self 
		assertAddressOfCustomerType: 'C' number: '23-25666777-9' 
		addresses:  {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:15:54'!
assertCustomerType: anIdentificationType

	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	self 
		assertAddressOfCustomerType: 'D' number: '22333444' 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:15:54' prior: 50628718!
test01Import

	| allCustomers |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertCustomerType: 'D'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez'.	
	
	self 
		assertAddressOfCustomerType: 'C' number: '23-25666777-9' 
		addresses:  {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!methodRemoval: ImportTest #assertCustomerType stamp: 'AS 6/24/2023 20:15:54'!
assertCustomerType

	self assertSelectCustomerType: 'D' 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	self 
		assertAddressOfCustomerType: 'D' number: '22333444' 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:15:54' prior: 50628736!
assertCustomerType: anIdentificationType

	self assertSelectCustomerType: anIdentificationType 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	self 
		assertAddressOfCustomerType: anIdentificationType number: '22333444' 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:16:31'!
assertCustomerType: anIdentificationType number: anIdentificationNumber 

	self assertSelectCustomerType: anIdentificationType 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	self 
		assertAddressOfCustomerType: anIdentificationType number: '22333444' 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:16:31' prior: 50628755!
test01Import

	| allCustomers |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertCustomerType: 'D' number: '22333444'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez'.	
	
	self 
		assertAddressOfCustomerType: 'C' number: '23-25666777-9' 
		addresses:  {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!methodRemoval: ImportTest #assertCustomerType: stamp: 'AS 6/24/2023 20:16:31'!
assertCustomerType: anIdentificationType

	self assertSelectCustomerType: anIdentificationType 	number: '22333444' 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	self 
		assertAddressOfCustomerType: anIdentificationType number: '22333444' 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:16:31' prior: 50628810!
assertCustomerType: anIdentificationType number: anIdentificationNumber 

	self assertSelectCustomerType: anIdentificationType 	number: anIdentificationNumber 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	self 
		assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:17:12'!
assertCustomerType: anIdentificationType number: anIdentificationNumber firstName: aFirstName  

	self assertSelectCustomerType: anIdentificationType 	number: anIdentificationNumber 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	self 
		assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:17:12' prior: 50628831!
test01Import

	| allCustomers |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez'.	
	
	self 
		assertAddressOfCustomerType: 'C' number: '23-25666777-9' 
		addresses:  {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!methodRemoval: ImportTest #assertCustomerType:number: stamp: 'AS 6/24/2023 20:17:12'!
assertCustomerType: anIdentificationType number: anIdentificationNumber 

	self assertSelectCustomerType: anIdentificationType 	number: anIdentificationNumber 
			firstName: 'Pepe' lastName: 'Sanchez'.	
		
	self 
		assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:17:12' prior: 50628890!
assertCustomerType: anIdentificationType number: anIdentificationNumber firstName: aFirstName  

	self assertSelectCustomerType: anIdentificationType 	number: anIdentificationNumber 
			firstName: aFirstName lastName: 'Sanchez'.	
		
	self 
		assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:17:31'!
assertCustomerType: anIdentificationType number: anIdentificationNumber firstName: aFirstName lastName: aLastName   

	self assertSelectCustomerType: anIdentificationType 	number: anIdentificationNumber 
			firstName: aFirstName lastName: 'Sanchez'.	
		
	self 
		assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:17:31' prior: 50628912!
test01Import

	| allCustomers |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez'.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez'.	
	
	self 
		assertAddressOfCustomerType: 'C' number: '23-25666777-9' 
		addresses:  {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!methodRemoval: ImportTest #assertCustomerType:number:firstName: stamp: 'AS 6/24/2023 20:17:31'!
assertCustomerType: anIdentificationType number: anIdentificationNumber firstName: aFirstName  

	self assertSelectCustomerType: anIdentificationType 	number: anIdentificationNumber 
			firstName: aFirstName lastName: 'Sanchez'.	
		
	self 
		assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:17:31' prior: 50628975!
assertCustomerType: anIdentificationType number: anIdentificationNumber firstName: aFirstName lastName: aLastName   

	self assertSelectCustomerType: anIdentificationType 	number: anIdentificationNumber 
			firstName: aFirstName lastName: aLastName.	
		
	self 
		assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:18:02'!
assertCustomerType: anIdentificationType number: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses    

	self assertSelectCustomerType: anIdentificationType 	number: anIdentificationNumber 
			firstName: aFirstName lastName: aLastName.	
		
	self 
		assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:18:02' prior: 50628998!
test01Import

	| allCustomers |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
		
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertSelectCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez'.	
	
	self 
		assertAddressOfCustomerType: 'C' number: '23-25666777-9' 
		addresses:  {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!methodRemoval: ImportTest #assertCustomerType:number:firstName:lastName: stamp: 'AS 6/24/2023 20:18:02'!
assertCustomerType: anIdentificationType number: anIdentificationNumber firstName: aFirstName lastName: aLastName   

	self assertSelectCustomerType: anIdentificationType 	number: anIdentificationNumber 
			firstName: aFirstName lastName: aLastName.	
		
	self 
		assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 
		addresses:  {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:18:02' prior: 50629063!
assertCustomerType: anIdentificationType number: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses    

	self assertSelectCustomerType: anIdentificationType 	number: anIdentificationNumber 
			firstName: aFirstName lastName: aLastName.	
		
	self 
		assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 
		addresses:  anArrayOfAddresses! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:18:29' prior: 50629139!
assertCustomerType: anIdentificationType number: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses    

	self assertSelectCustomerType: anIdentificationType 	number: anIdentificationNumber 
		firstName: aFirstName lastName: aLastName.	
		
	self assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 
		addresses:  anArrayOfAddresses! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:20:28' prior: 50629087!
test01Import

	| allCustomers |
	
	self importCustomers.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 20:20:31'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 20:20:32'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:21:25'!
importCustomers: aStream

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.
			session persist: newAddress ].

		line := inputStream nextLine. ].

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:21:25' prior: 50629171!
test01Import

	| allCustomers |
	
	self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false).
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!methodRemoval: ImportTest #importCustomers stamp: 'AS 6/24/2023 20:21:25'!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.
			session persist: newAddress ].

		line := inputStream nextLine. ].

	inputStream close.
	!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:21:25' prior: 50629202!
importCustomers: aStream

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := aStream.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.
			session persist: newAddress ].

		line := inputStream nextLine. ].

	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 20:21:43'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 20:21:44'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:31:02' prior: 50629239!
test01Import

	| allCustomers stream |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	stream := ReadStream on: (OrderedCollection withAll: {
								'C,Pepe,Sanchez,D,22333444'. 
								'A,San Martin,3322,Olivos,1636,BsAs'.
								'A,Maipu,888,Florida,1122,Buenos Aires'.
								'C,Juan,Perez,C,23-25666777-9'.
								'A,Alem,1122,CABA,1001,CABA'
							}) from: 1 to: 5.
	
	self importCustomers: stream.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 20:31:16'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:32:48' prior: 50629345!
test01Import

	| allCustomers stream |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	stream := ReadStream on: (OrderedCollection withAll: {
								'C,Pepe,Sanchez,D,22333444
								A,San Martin,3322,Olivos,1636,BsAs
								A,Maipu,888,Florida,1122,Buenos Aires
								C,Juan,Perez,C,23-25666777-9
								A,Alem,1122,CABA,1001,CABA'
							}) from: 1 to: 1.
	
	self importCustomers: stream.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 20:32:51'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:32:48' prior: 50629386!
test01Import

	| allCustomers stream |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	stream := ReadStream on: (OrderedCollection withAll: {
								'C,Pepe,Sanchez,D,22333444
								A,San Martin,3322,Olivos,1636,BsAs
								A,Maipu,888,Florida,1122,Buenos Aires
								C,Juan,Perez,C,23-25666777-9
								A,Alem,1122,CABA,1001,CABA'
							}) from: 1 to: 1.
	
	self importCustomers: stream.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:32:48' prior: 50629427!
test01Import

	| allCustomers stream |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	stream := ReadStream on: (OrderedCollection withAll: {
								'C,Pepe,Sanchez,D,22333444
								A,San Martin,3322,Olivos,1636,BsAs
								A,Maipu,888,Florida,1122,Buenos Aires
								C,Juan,Perez,C,23-25666777-9
								A,Alem,1122,CABA,1001,CABA'
							}) from: 1 to: 1.
	
	self importCustomers: stream.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:32:48' prior: 50629466!
test01Import

	| allCustomers stream |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	stream := ReadStream on: (OrderedCollection withAll: {
								'C,Pepe,Sanchez,D,22333444
								A,San Martin,3322,Olivos,1636,BsAs
								A,Maipu,888,Florida,1122,Buenos Aires
								C,Juan,Perez,C,23-25666777-9
								A,Alem,1122,CABA,1001,CABA'
							}) from: 1 to: 1.
	
	self importCustomers: stream.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:31:02' prior: 50629505!
test01Import

	| allCustomers stream |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	stream := ReadStream on: (OrderedCollection withAll: {
								'C,Pepe,Sanchez,D,22333444'. 
								'A,San Martin,3322,Olivos,1636,BsAs'.
								'A,Maipu,888,Florida,1122,Buenos Aires'.
								'C,Juan,Perez,C,23-25666777-9'.
								'A,Alem,1122,CABA,1001,CABA'
							}) from: 1 to: 5.
	
	self importCustomers: stream.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:35:16' prior: 50629544!
test01Import

	| allCustomers stream |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	stream := ReadStream on: {
								'C,Pepe,Sanchez,D,22333444'. 
								'A,San Martin,3322,Olivos,1636,BsAs'.
								'A,Maipu,888,Florida,1122,Buenos Aires'.
								'C,Juan,Perez,C,23-25666777-9'.
								'A,Alem,1122,CABA,1001,CABA'
							} from: 1 to: 5.
	
	self importCustomers: stream.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 20:35:19'!
FAILURE!

array := {
								'C,Pepe,Sanchez,D,22333444'. 
								'A,San Martin,3322,Olivos,1636,BsAs'. 
								'A,Maipu,888,Florida,1122,Buenos Aires'. 
								'C,Juan,Perez,C,23-25666777-9'. 
								'A,Alem,1122,CABA,1001,CABA' 
							}.!

array size!

stream next.							!

stream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'
from: 1 to: 5.
						!

stream next.	!

stream next.	!

stream next.	!

stream := ReadStream on: {'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'}
from: 1 to: 5.!

stream next.							!

stream := ReadStream on: {'C,Pepe,Sanchez,D,22333444',Character enter.
'A,San Martin,3322,Olivos,1636,BsAs', Character enter }
from: 1 to: 2.!

stream := ReadStream on: {'C,Pepe,Sanchez,D,22333444',Character enter asString.
'A,San Martin,3322,Olivos,1636,BsAs', Character enter asString }
from: 1 to: 2.!

stream next.							!

stream next.							!

stream := PositionableStream on: {'C,Pepe,Sanchez,D,22333444',Character enter asString.
'A,San Martin,3322,Olivos,1636,BsAs', Character enter asString }!

stream next.		!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:50:59' prior: 50629583!
test01Import

	| allCustomers stream |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	stream := ReadStream on: {
								'C,Pepe,Sanchez,D,22333444'. 
								'A,San Martin,3322,Olivos,1636,BsAs'. 
								'A,Maipu,888,Florida,1122,Buenos Aires'. 
								'C,Juan,Perez,C,23-25666777-9'. 
								'A,Alem,1122,CABA,1001,CABA'
							} from: 1 to: 5.
	
	self importCustomers: stream.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:58:38' prior: 50629663!
test01Import

	| allCustomers stream |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	stream := ReadStream on: {						'C,Pepe,Sanchez,D,22333444', { Character cr. Character lf.}.
							'A,San Martin,3322,Olivos,1636,BsAs', stream nextLine. 
							'A,Maipu,888,Florida,1122,Buenos Aires', stream nextLine.
							'C,Juan,Perez,C,23-25666777-9', stream nextLine. 
							'A,Alem,1122,CABA,1001,CABA'
							}.
	
	self importCustomers: stream.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:58:55'!
crlf

	^ { Character cr. Character lf.}! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:58:55' prior: 50629701!
test01Import

	| allCustomers stream |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	stream := ReadStream on: {						'C,Pepe,Sanchez,D,22333444', self crlf.
							'A,San Martin,3322,Olivos,1636,BsAs', stream nextLine. 
							'A,Maipu,888,Florida,1122,Buenos Aires', stream nextLine.
							'C,Juan,Perez,C,23-25666777-9', stream nextLine. 
							'A,Alem,1122,CABA,1001,CABA'
							}.
	
	self importCustomers: stream.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:59:19' prior: 50629745!
test01Import

	| allCustomers stream |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	stream := ReadStream on: {						'C,Pepe,Sanchez,D,22333444', self crlf.
							'A,San Martin,3322,Olivos,1636,BsAs', self crlf. 
							'A,Maipu,888,Florida,1122,Buenos Aires', self crlf.
							'C,Juan,Perez,C,23-25666777-9', self crlf. 
							'A,Alem,1122,CABA,1001,CABA'
							}.
	
	self importCustomers: stream.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 20:59:24'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 21:00:02' prior: 50629740!
crlf

	^ Character cr,Character lf.! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 21:00:04'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 21:00:04'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:58:55' prior: 50629825!
crlf

	^ { Character cr. Character lf.}! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 20:58:55' prior: 50629834!
crlf

	^ { Character cr. Character lf.}! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 21:00:54' prior: 50629839!
crlf

	^ { Character cr. Character lf } asString.! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 21:00:55'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 21:00:55'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 21:01:32' prior: 50629844!
crlf

	^ {Character cr. Character lf}.! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 21:01:34'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 21:01:34'!
ERROR!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 21:03:06' prior: 50629854!
crlf

	^String with: Character cr with: Character lf! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 21:03:08'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 21:03:08'!
FAILURE!

stream := ReadStream on: (OrderedCollection withAll: {'C,Pepe,Sanchez,D,22333444'.
'A,San Martin,3322,Olivos,1636,BsAs' })!

stream next.							!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 21:05:10' prior: 50629784!
test01Import

	| allCustomers stream |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	stream := ReadStream on: (OrderedCollection withAll: {						'C,Pepe,Sanchez,D,22333444'.
							'A,San Martin,3322,Olivos,1636,BsAs'. 
							'A,Maipu,888,Florida,1122,Buenos Aires'.
							'C,Juan,Perez,C,23-25666777-9'. 
							'A,Alem,1122,CABA,1001,CABA'
							}).
	
	self importCustomers: stream.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/24/2023 21:05:13'!
FAILURE!

stream := ReadStream on: (OrderedCollection withAll: {'C,Pepe,Sanchez,D,22333444'.
'A,San Martin,3322,Olivos,1636,BsAs' })!

stream nextLine		!

stream nextLine		!

stream := ReadStream on: (OrderedCollection withAll: {'C,Pepe,Sanchez,D,22333444'.
'A,San Martin,3322,Olivos,1636,BsAs' })!

stream nextLine		!

crlf := String     with: (Character cr)			 with: (Character lf).!

stream := ReadStream on: {'C,Pepe,Sanchez,D,22333444', crlf.
'A,San Martin,3322,Olivos,1636,BsAs', crlf }!

stream nextLine		!

crlf := String     with: (Character cr)			!

stream := ReadStream on: {'C,Pepe,Sanchez,D,22333444', crlf.
'A,San Martin,3322,Olivos,1636,BsAs', crlf }!

stream nextLine		!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/24/2023 21:13:26' prior: 50629878!
test01Import

	| allCustomers stream crlf |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	crlf := String with: (Character cr)			 with: (Character lf).
	stream := ReadStream on: {						'C,Pepe,Sanchez,D,22333444', crlf.
							'A,San Martin,3322,Olivos,1636,BsAs', crlf. 
							'A,Maipu,888,Florida,1122,Buenos Aires', crlf.
							'C,Juan,Perez,C,23-25666777-9',crlf. 
							'A,Alem,1122,CABA,1001,CABA',crlf
							}.
	
	self importCustomers: stream.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

crlf := String     with: (Character cr)			.!

stream := ReadStream on: 'C,Pepe,Sanchez,D,22333444', crlf.
'A,San Martin,3322,Olivos,1636,BsAs', crlf!

stream nextLine		!

crlf := {Character cr. Character lf }			.!

stream := ReadStream on: 'C,Pepe,Sanchez,D,22333444', crlf, 'A,San Martin,3322,Olivos,1636,BsAs', crlf!

crlf := {Character cr. Character lf }			asString.!

stream := ReadStream on: 'C,Pepe,Sanchez,D,22333444', crlf, 'A,San Martin,3322,Olivos,1636,BsAs', crlf!

stream nextLine		!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 08:32:46' prior: 50629940!
test01Import

	| allCustomers stream crlf |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	crlf := String with: (Character cr)			 with: (Character lf).
	stream := ReadStream on: 'C,Pepe,Sanchez,D,22333444', crlf,
							'A,San Martin,3322,Olivos,1636,BsAs', crlf,
							'A,Maipu,888,Florida,1122,Buenos Aires', crlf,
							'C,Juan,Perez,C,23-25666777-9',crlf,
							'A,Alem,1122,CABA,1001,CABA',crlf.
	
	self importCustomers: stream.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 08:32:48'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 08:32:50'!
PASSED!
!ExtractToMethodObjectForm methodsFor: 'category-name' stamp: 'AS 6/25/2023 08:38:43'!
shouldAutoHighlight
	self shouldBeImplemented.! !
!ExtractToMethodObjectForm methodsFor: 'category-name' stamp: 'AS 6/25/2023 08:38:59' prior: 50630040!
shouldAutoHighlight
	^false.! !

!classDefinition: #ImportCustomers category: 'CustomerImporter' stamp: 'AS 6/25/2023 08:41:15'!
Object subclass: #ImportCustomers
	instanceVariableNames: 'session stream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportCustomers class methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 08:41:15'!
session: aSession inputStream: anInputStream
	^self new initializeSession: aSession inputStream: anInputStream! !
!ImportCustomers methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 08:41:16'!
initializeSession: aSession inputStream: anInputStream
	session := aSession.
	stream := anInputStream.! !
!ImportCustomers methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 08:41:16'!
import

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := stream.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.
			session persist: newAddress ].

		line := inputStream nextLine. ].

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 08:41:16' prior: 50629304!
importCustomers: aStream
	(ImportCustomers session: session inputStream: aStream) import! !
!ImportCustomers class methodsFor: 'instance creation' stamp: 'AS 6/25/2023 08:41:37' prior: 50630057!
session: aSession inputStream: anInputStream

	^self new initializeSession: aSession inputStream: anInputStream! !
!ImportCustomers methodsFor: 'initialization' stamp: 'AS 6/25/2023 08:41:51' prior: 50630064!
initializeSession: aSession inputStream: anInputStream

	session := aSession.
	stream := anInputStream.! !
!ImportCustomers methodsFor: 'evaluating' stamp: 'AS 6/25/2023 08:42:09' prior: 50630070!
import

	| inputStream  newCustomer line |

	inputStream := stream.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.
			session persist: newAddress ].

		line := inputStream nextLine. ].

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 08:42:29' prior: 50630106!
importCustomers: aStream

	(ImportCustomers session: session inputStream: aStream) import! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 08:43:41' prior: 50629996!
test01Import

	| allCustomers stream crlf importCostumers |
	
	"self importCustomers: (UniFileStream new open: 'input.txt' forWrite: false)."
	
	crlf := String with: (Character cr)			 with: (Character lf).
	stream := ReadStream on: 'C,Pepe,Sanchez,D,22333444', crlf,
							'A,San Martin,3322,Olivos,1636,BsAs', crlf,
							'A,Maipu,888,Florida,1122,Buenos Aires', crlf,
							'C,Juan,Perez,C,23-25666777-9',crlf,
							'A,Alem,1122,CABA,1001,CABA',crlf.
	
	importCostumers := ImportCustomers session: session inputStream: stream.
	importCostumers import.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 08:43:53'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 08:43:54'!
PASSED!

!methodRemoval: ImportTest #importCustomers: stamp: 'AS 6/25/2023 08:43:59'!
importCustomers: aStream

	(ImportCustomers session: session inputStream: aStream) import!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 08:45:51' prior: 50630168!
test01Import

	| allCustomers stream importCostumers |
	
	stream := ReadStream on: 'C,Pepe,Sanchez,D,22333444', self crlf,
							'A,San Martin,3322,Olivos,1636,BsAs', self crlf,
							'A,Maipu,888,Florida,1122,Buenos Aires', self crlf,
							'C,Juan,Perez,C,23-25666777-9', self crlf,
							'A,Alem,1122,CABA,1001,CABA', self crlf.
	
	importCostumers := ImportCustomers session: session inputStream: stream.
	importCostumers import.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 08:45:57'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 08:45:58'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 08:46:44'!
createStream

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444', self crlf,
							'A,San Martin,3322,Olivos,1636,BsAs', self crlf,
							'A,Maipu,888,Florida,1122,Buenos Aires', self crlf,
							'C,Juan,Perez,C,23-25666777-9', self crlf,
							'A,Alem,1122,CABA,1001,CABA', self crlf! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 08:46:44' prior: 50630221!
test01Import

	| allCustomers stream importCostumers |
	
	stream := self createStream.
	
	importCostumers := ImportCustomers session: session inputStream: stream.
	importCostumers import.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !
!ImportTest methodsFor: 'stream' stamp: 'AS 6/25/2023 08:47:51'!
createStream: anArrayOfStrings

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444', self crlf,
							'A,San Martin,3322,Olivos,1636,BsAs', self crlf,
							'A,Maipu,888,Florida,1122,Buenos Aires', self crlf,
							'C,Juan,Perez,C,23-25666777-9', self crlf,
							'A,Alem,1122,CABA,1001,CABA', self crlf! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 08:47:51' prior: 50630276!
test01Import

	| allCustomers stream importCostumers |
	
	stream := self createStream: 'C,Pepe,Sanchez,D,22333444'.
	
	importCostumers := ImportCustomers session: session inputStream: stream.
	importCostumers import.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!methodRemoval: ImportTest #createStream stamp: 'AS 6/25/2023 08:47:51'!
createStream

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444', self crlf,
							'A,San Martin,3322,Olivos,1636,BsAs', self crlf,
							'A,Maipu,888,Florida,1122,Buenos Aires', self crlf,
							'C,Juan,Perez,C,23-25666777-9', self crlf,
							'A,Alem,1122,CABA,1001,CABA', self crlf!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 08:47:51' prior: 50630306!
createStream: anArrayOfStrings

	^ ReadStream on: anArrayOfStrings, self crlf,
							'A,San Martin,3322,Olivos,1636,BsAs', self crlf,
							'A,Maipu,888,Florida,1122,Buenos Aires', self crlf,
							'C,Juan,Perez,C,23-25666777-9', self crlf,
							'A,Alem,1122,CABA,1001,CABA', self crlf! !

array := { 'Hola'. 'como'. 'estas?' }.!

array inject: ''  into: [ :inputString :string | inputString, string, self crlf ].!

crlf := #(Character cr. Character lf) asString.!

array inject: ''  into: [ :inputString :string | inputString, string, self crlf ].!

array inject: ''  into: [ :inputString :string | inputString, string, crlf ].!

s := array inject: ''  into: [ :inputString :string | inputString, string, crlf ].!

s!

s print!

stream := ReadStream.
s printOn: stream.!
!ImportTest methodsFor: 'stream' stamp: 'AS 6/25/2023 09:11:23' prior: 50630362!
createStream: anArrayOfStrings

	| result |
	result := anArrayOfStrings inject: ''  into: [ :inputString :string | inputString, string, self crlf ].

	^ ReadStream on: anArrayOfStrings, self crlf,
							'A,San Martin,3322,Olivos,1636,BsAs', self crlf,
							'A,Maipu,888,Florida,1122,Buenos Aires', self crlf,
							'C,Juan,Perez,C,23-25666777-9', self crlf,
							'A,Alem,1122,CABA,1001,CABA', self crlf! !
!ImportTest methodsFor: 'stream' stamp: 'AS 6/25/2023 09:11:39' prior: 50630389!
createStream: anArrayOfStrings

	| result |
	
	result := anArrayOfStrings inject: ''  into: [ :inputString :string | inputString, string, self crlf ].

	^ ReadStream on: result.! !
!ImportTest methodsFor: 'stream' stamp: 'AS 6/25/2023 09:12:15' prior: 50630405!
createStream: anArrayOfStrings

	| result crlf |
	
	crlf := String with: Character cr with: Character lf.
	
	result := anArrayOfStrings inject: ''  into: [ :inputString :string | inputString, string, crlf ].

	^ ReadStream on: result.! !
!ImportTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:13:42' prior: 50630319!
test01Import

	| allCustomers stream importCostumers |
		
	stream := self createStream: { 'C,Pepe,Sanchez,D,22333444'.
							  'A,San Martin,3322,Olivos,1636,BsAs'.
							  'A,Maipu,888,Florida,1122,Buenos Aires'.
							  'C,Juan,Perez,C,23-25666777-9'.
							  'A,Alem,1122,CABA,1001,CABA' }.
								
	importCostumers := ImportCustomers session: session inputStream: stream.
	importCostumers import.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomerType: 'D' number: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }.

	self assertCustomerType: 'C' number: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. }
! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 09:13:45'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 09:13:46'!
PASSED!
!ImportTest methodsFor: 'stream' stamp: 'AS 6/25/2023 09:14:29' prior: 50630414!
createStream: anArrayOfStrings

	| result crlf |
	
	crlf := String with: Character cr with: Character lf.	
	result := anArrayOfStrings inject: ''  into: [ :inputString :string | inputString, string, crlf ].

	^ ReadStream on: result.! !
!ImportTest methodsFor: 'stream' stamp: 'AS 6/25/2023 09:14:59' prior: 50630466!
createStream: anArrayOfStrings

	^ ReadStream on: (anArrayOfStrings inject: ''  into: [ :inputString :string | inputString, string, self crlf ]).! !
!ImportTest methodsFor: 'stream' stamp: 'AS 6/25/2023 09:15:38'!
concatenatedStringFrom: anArrayOfStrings

	^ anArrayOfStrings inject: ''  into: [ :inputString :string | inputString, string, self crlf ]! !
!ImportTest methodsFor: 'stream' stamp: 'AS 6/25/2023 09:15:38' prior: 50630476!
createStream: anArrayOfStrings

	^ ReadStream on: (self concatenatedStringFrom: anArrayOfStrings).! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 09:15:57'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 09:15:58'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'AS 6/25/2023 09:22:30' prior: 50629155!
assertCustomerType: anIdentificationType number: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses    

	| customer |
	customer := Customer identificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses.

	self assertSelectCustomerType: anIdentificationType 	number: anIdentificationNumber 
		firstName: aFirstName lastName: aLastName.	
		
	self assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 
		addresses:  anArrayOfAddresses! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 09:22:38'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 09:22:39'!
ERROR!
!Customer class methodsFor: 'instance creation' stamp: 'AS 6/25/2023 09:22:45'!
identificationType: aString identificationNumber: aString2 firstName: aString3 lastName: aString4 addresses: anArray 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeIdentificationType: aString identificationNumber: aString2 firstName: aString3 lastName: aString4 addresses: anArray ! !
!Customer class methodsFor: 'instance creation' stamp: 'AS 6/25/2023 09:23:44' prior: 50630528!
identificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses 

	^self new initializeIdentificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses ! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 09:23:46'!
ERROR!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'AS 6/25/2023 09:23:53'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses arrayOfAddresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer methodsFor: 'initialization' stamp: 'AS 6/25/2023 09:23:53'!
initializeIdentificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses 
	self shouldBeImplemented.
	identificationType := anIdentificationType.
	identificationNumber := anIdentificationNumber.
	firstName := aFirstName.
	lastName := aLastName.
	arrayOfAddresses := anArrayOfAddresses.! !
!Customer methodsFor: 'initialization' stamp: 'AS 6/25/2023 09:24:12' prior: 50630568!
initializeIdentificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses 

	identificationType := anIdentificationType.
	identificationNumber := anIdentificationNumber.
	firstName := aFirstName.
	lastName := aLastName.
	addresses := anArrayOfAddresses.! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 09:24:16'!
PASSED!

Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'AS 6/25/2023 09:24:26'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer methodsFor: 'initialization' stamp: 'AS 6/25/2023 09:26:17' prior: 50630583!
initializeIdentificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses 

	identificationType := anIdentificationType.
	identificationNumber := anIdentificationNumber.
	firstName := aFirstName.
	lastName := aLastName.
	addresses := OrderedCollection withAll: anArrayOfAddresses.! !
!Customer methodsFor: 'initialization' stamp: 'AS 6/25/2023 09:26:45' prior: 50624604 overrides: 16920235!
initialize

	super initialize.	
	addresses ifNil: [ 	addresses := OrderedCollection new. ].! !
!ImportTest methodsFor: 'assertions' stamp: 'AS 6/25/2023 09:28:41'!
assertCustomer: aCustomer

	self assertSelectCustomer: aCustomer.		
	self assertAddressOfCustomer: aCustomer! !
!ImportTest methodsFor: 'assertions' stamp: 'AS 6/25/2023 09:29:55'!
assertSelectCustomer: aCustomer

	| queryResult customer |
	
	queryResult := self selectCustomerWith: aCustomer identificationType number: aCustomer identificationNumber.
	self assert: 1 equals: queryResult size.
	
	customer := queryResult anyOne.
	
	self assert: aCustomer firstName equals: customer firstName.
	self assert: aCustomer lastName equals: customer lastName.! !
!ImportTest methodsFor: 'assertions' stamp: 'AS 6/25/2023 09:30:04' prior: 50630643!
assertSelectCustomer: aCustomer

	| queryResult customerResult |
	
	queryResult := self selectCustomerWith: aCustomer identificationType number: aCustomer identificationNumber.
	self assert: 1 equals: queryResult size.
	
	customerResult := queryResult anyOne.
	
	self assert: aCustomer firstName equals: customerResult firstName.
	self assert: aCustomer lastName equals: customerResult lastName.! !
!ImportTest methodsFor: 'assertions' stamp: 'AS 6/25/2023 09:31:15'!
assertAddressOfCustomer: aCustomer

	| customer index |
	
	customer := (self selectCustomerWith: aCustomer identificationType number: aCustomer identificationNumber) anyOne.
	
	index := 1.
	[index <= aCustomer addresses size] whileTrue: [self assert: (customer addresses at: index) equals: (aCustomer addresses at: index).
		index := index + 1 ]! !
!ImportTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:32:33' prior: 50630424!
test01Import

	| allCustomers stream importCostumers |
		
	stream := self createStream: { 'C,Pepe,Sanchez,D,22333444'.
							  'A,San Martin,3322,Olivos,1636,BsAs'.
							  'A,Maipu,888,Florida,1122,Buenos Aires'.
							  'C,Juan,Perez,C,23-25666777-9'.
							  'A,Alem,1122,CABA,1001,CABA' }.
								
	importCostumers := ImportCustomers session: session inputStream: stream.
	importCostumers import.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertCustomer: (Customer identificationType: 'D' identificationNumber: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }).

	self assertCustomer: (Customer identificationType: 'C' identificationNumber: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. })
! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 09:32:36'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 09:32:37'!
PASSED!

!methodRemoval: ImportTest #assertCustomerType:number:firstName:lastName:addresses: stamp: 'AS 6/25/2023 09:33:00'!
assertCustomerType: anIdentificationType number: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses    

	| customer |
	customer := Customer identificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses.

	self assertSelectCustomerType: anIdentificationType 	number: anIdentificationNumber 
		firstName: aFirstName lastName: aLastName.	
		
	self assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber 
		addresses:  anArrayOfAddresses!

!methodRemoval: ImportTest #assertSelectCustomerType:number:firstName:lastName: stamp: 'AS 6/25/2023 09:33:05'!
assertSelectCustomerType: identificationType number: anIdentificationNumber firstName: aFirstName lastName: aLastName   

	| queryResult customer |
	
	queryResult := self selectCustomerWith: identificationType number: anIdentificationNumber.
	self assert: 1 equals: queryResult size.
	
	customer := queryResult anyOne.
	
	self assert: aFirstName equals: customer firstName.
	self assert: aLastName equals: customer lastName.!

!methodRemoval: ImportTest #assertAddressOfCustomerType:number:addresses: stamp: 'AS 6/25/2023 09:33:14'!
assertAddressOfCustomerType: anIdentificationType number: anIdentificationNumber addresses: anArrayOfAddress  

	| customer index |
	
	customer := (self selectCustomerWith: anIdentificationType number: anIdentificationNumber) anyOne.
	
	index := 1.
	[index <= anArrayOfAddress size] whileTrue: [self assert: (customer addresses at: index) equals: (anArrayOfAddress at: index).
		index := index + 1 ]!
!ImportTest methodsFor: 'assertions' stamp: 'AS 6/25/2023 09:33:32' prior: 50630658!
assertSelectCustomer: aCustomer

	| queryResult selectedCustomer |
	
	queryResult := self selectCustomerWith: aCustomer identificationType number: aCustomer identificationNumber.
	self assert: 1 equals: queryResult size.
	
	selectedCustomer := queryResult anyOne.
	
	self assert: aCustomer firstName equals: selectedCustomer firstName.
	self assert: aCustomer lastName equals: selectedCustomer lastName.! !
!Customer methodsFor: 'addresses' stamp: 'AS 6/25/2023 09:34:47'!
addressesSize
	
	^ addresses size! !
!ImportTest methodsFor: 'assertions' stamp: 'AS 6/25/2023 09:34:59' prior: 50630673!
assertAddressOfCustomer: aCustomer

	| customer index |
	
	customer := (self selectCustomerWith: aCustomer identificationType number: aCustomer identificationNumber) anyOne.
	
	index := 1.
	[index <= aCustomer addressesSize] whileTrue: [self assert: (customer addresses at: index) equals: (aCustomer addresses at: index).
		index := index + 1 ]! !
!Customer methodsFor: 'comparing' stamp: 'AS 6/25/2023 09:39:08' overrides: 16901772!
= otherCustomer
	
	^(identificationType = otherCustomer identificationType)
	and: [ identificationNumber  = otherCustomer identificationNumber ]
	and: [ firstName  = otherCustomer firstName ]
	and: [ lastName = otherCustomer lastName ]
	and: [ addresses size = otherCustomer addressesSize ]
! !
!Customer methodsFor: 'addresses' stamp: 'AS 6/25/2023 09:44:28'!
sameCustomerAddresses: otherCustomer
	
	(self addressesSize = otherCustomer addressesSize) ifFalse: [^false].
	
	(addresses allSatisfy: [ :anAddress | otherCustomer addresses detect: [ :otherAddress | otherAddress = anAddress ]]) ifFalse: [^false].
	(otherCustomer addresses allSatisfy: [ :anAddress | addresses detect: [ :otherAddress | otherAddress = anAddress ]]) ifFalse: [^false].
	
	^true.! !
!Customer methodsFor: 'comparing' stamp: 'AS 6/25/2023 09:45:00' prior: 50630820 overrides: 16901772!
= otherCustomer
	
	^(identificationType = otherCustomer identificationType)
	and: [ identificationNumber  = otherCustomer identificationNumber ]
	and: [ firstName  = otherCustomer firstName ]
	and: [ lastName = otherCustomer lastName ]
	and: [ self sameCustomerAddresses: otherCustomer ]
! !

----SNAPSHOT----(25 June 2023 09:45:06) CuisUniversity-5832.image priorSource: 9501310!

TestCase subclass: #AddressTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #AddressTest category: 'CustomerImporter' stamp: 'AS 6/25/2023 09:45:33'!
TestCase subclass: #AddressTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:48:34'!
test01InitializeWithAddressName
	
	| address |
	address := Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636 province: 'Buenos Aires'.
	
	self assert: 'San Martin' equals: address streetName.! !
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:49:13' prior: 50630874!
test01InitializeWithAddressName
	
	| address |
	
	address := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	self assert: 'San Martin' equals: address streetName.! !
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:49:26' prior: 50630884!
test01InitializeWithAddressName
	
	| address |
	
	address := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	self assert: 'San Martin' equals: address streetName.! !
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:49:35'!
test01InitializeWithStreetName
	
	| address |
	
	address := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	self assert: 'San Martin' equals: address streetName.! !

!methodRemoval: AddressTest #test01InitializeWithAddressName stamp: 'AS 6/25/2023 09:49:35'!
test01InitializeWithAddressName
	
	| address |
	
	address := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	self assert: 'San Martin' equals: address streetName.!
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:49:42'!
test02InitializeWithStreetNumber
	
	| address |
	
	address := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	self assert: 'San Martin' equals: address streetName.! !
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:49:53' prior: 50630928!
test02InitializeWithStreetNumber
	
	| address |
	
	address := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	self assert: 3388 equals: address streetNumber.! !
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:50:13'!
test03InitializeWithTown
	
	| address |
	
	address := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	self assert: 'Olivos' equals: address town.! !
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:51:16'!
test01InitializeWithCorrectValues
	
	| address |
	
	address := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	self assert: 'San Martin' equals: address streetName.
	self assert: 3388 equals: address streetNumber.
	self assert: 'Olivos' equals: address town.
	self assert: 1636 equals: address zipCode.
	self assert: 'Buenos Aires' equals: address province.! !
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:52:17'!
test01InitializeAssignColaboratorsValues
	
	| address |
	
	address := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	self assert: 'San Martin' equals: address streetName.
	self assert: 3388 equals: address streetNumber.
	self assert: 'Olivos' equals: address town.
	self assert: 1636 equals: address zipCode.
	self assert: 'Buenos Aires' equals: address province.! !

!methodRemoval: AddressTest #test01InitializeWithCorrectValues stamp: 'AS 6/25/2023 09:52:17'!
test01InitializeWithCorrectValues
	
	| address |
	
	address := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	self assert: 'San Martin' equals: address streetName.
	self assert: 3388 equals: address streetNumber.
	self assert: 'Olivos' equals: address town.
	self assert: 1636 equals: address zipCode.
	self assert: 'Buenos Aires' equals: address province.!

!methodRemoval: AddressTest #test01InitializeWithStreetName stamp: 'AS 6/25/2023 09:52:23'!
test01InitializeWithStreetName
	
	| address |
	
	address := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	self assert: 'San Martin' equals: address streetName.!

!methodRemoval: AddressTest #test02InitializeWithStreetNumber stamp: 'AS 6/25/2023 09:52:26'!
test02InitializeWithStreetNumber
	
	| address |
	
	address := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	self assert: 3388 equals: address streetNumber.!

!methodRemoval: AddressTest #test03InitializeWithTown stamp: 'AS 6/25/2023 09:52:27'!
test03InitializeWithTown
	
	| address |
	
	address := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	self assert: 'Olivos' equals: address town.!
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:53:35'!
test02EqualsIsTrueWhenAllValuesAreEquals
	
	| address1 address2 |
	
	address1 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	address2 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.						
					
	self assert: address1 equals: address2.
! !

!testRun: #AddressTest #test02EqualsIsTrueWhenAllValuesAreEquals stamp: 'AS 6/25/2023 09:53:38'!
PASSED!

!testRun: #AddressTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 09:53:38'!
PASSED!

!testRun: #AddressTest #test02EqualsIsTrueWhenAllValuesAreEquals stamp: 'AS 6/25/2023 09:53:38'!
PASSED!
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:55:21'!
test03EqualsIsFalseWhenStreetNameIsNotEqual
	
	| address1 address2 |
	
	address1 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	address2 := Address 
					withStreetName: 'Jose de San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.						
					
	self assert: (address1 ~= address2).
! !

!testRun: #AddressTest #test03EqualsIsFalseWhenStreetNameIsNotEqual stamp: 'AS 6/25/2023 09:55:25'!
PASSED!

!testRun: #AddressTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 09:55:25'!
PASSED!

!testRun: #AddressTest #test02EqualsIsTrueWhenAllValuesAreEquals stamp: 'AS 6/25/2023 09:55:25'!
PASSED!

!testRun: #AddressTest #test03EqualsIsFalseWhenStreetNameIsNotEqual stamp: 'AS 6/25/2023 09:55:25'!
PASSED!
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:55:42'!
test03EqualsIsFalseWhenStreetNumberIsNotEqual
	
	| address1 address2 |
	
	address1 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	address2 := Address 
					withStreetName: 'San Martin'
					streetNumber: 33881
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.						
					
	self assert: (address1 ~= address2).
! !
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:55:52'!
test04EqualsIsFalseWhenStreetNumberIsNotEqual
	
	| address1 address2 |
	
	address1 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	address2 := Address 
					withStreetName: 'San Martin'
					streetNumber: 33881
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.						
					
	self assert: (address1 ~= address2).
! !

!methodRemoval: AddressTest #test03EqualsIsFalseWhenStreetNumberIsNotEqual stamp: 'AS 6/25/2023 09:55:52'!
test03EqualsIsFalseWhenStreetNumberIsNotEqual
	
	| address1 address2 |
	
	address1 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	address2 := Address 
					withStreetName: 'San Martin'
					streetNumber: 33881
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.						
					
	self assert: (address1 ~= address2).
!

!testRun: #AddressTest #test04EqualsIsFalseWhenStreetNumberIsNotEqual stamp: 'AS 6/25/2023 09:55:56'!
PASSED!

!testRun: #AddressTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 09:55:56'!
PASSED!

!testRun: #AddressTest #test02EqualsIsTrueWhenAllValuesAreEquals stamp: 'AS 6/25/2023 09:55:56'!
PASSED!

!testRun: #AddressTest #test03EqualsIsFalseWhenStreetNameIsNotEqual stamp: 'AS 6/25/2023 09:55:56'!
PASSED!

!testRun: #AddressTest #test04EqualsIsFalseWhenStreetNumberIsNotEqual stamp: 'AS 6/25/2023 09:55:56'!
PASSED!
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:56:17'!
test05EqualsIsFalseWhenTownIsNotEqual
	
	| address1 address2 |
	
	address1 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	address2 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Florida'
					zipCode: 1636
					province: 'Buenos Aires'.						
					
	self assert: (address1 ~= address2).
! !

!testRun: #AddressTest #test05EqualsIsFalseWhenTownIsNotEqual stamp: 'AS 6/25/2023 09:56:18'!
PASSED!

!testRun: #AddressTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 09:56:18'!
PASSED!

!testRun: #AddressTest #test02EqualsIsTrueWhenAllValuesAreEquals stamp: 'AS 6/25/2023 09:56:18'!
PASSED!

!testRun: #AddressTest #test03EqualsIsFalseWhenStreetNameIsNotEqual stamp: 'AS 6/25/2023 09:56:18'!
PASSED!

!testRun: #AddressTest #test04EqualsIsFalseWhenStreetNumberIsNotEqual stamp: 'AS 6/25/2023 09:56:19'!
PASSED!

!testRun: #AddressTest #test05EqualsIsFalseWhenTownIsNotEqual stamp: 'AS 6/25/2023 09:56:19'!
PASSED!
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:56:39'!
test06EqualsIsFalseWhenZipCodeIsNotEqual
	
	| address1 address2 |
	
	address1 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	address2 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1640
					province: 'Buenos Aires'.						
					
	self assert: (address1 ~= address2).
! !

!testRun: #AddressTest #test06EqualsIsFalseWhenZipCodeIsNotEqual stamp: 'AS 6/25/2023 09:56:41'!
PASSED!

!testRun: #AddressTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 09:56:41'!
PASSED!

!testRun: #AddressTest #test02EqualsIsTrueWhenAllValuesAreEquals stamp: 'AS 6/25/2023 09:56:41'!
PASSED!

!testRun: #AddressTest #test03EqualsIsFalseWhenStreetNameIsNotEqual stamp: 'AS 6/25/2023 09:56:41'!
PASSED!

!testRun: #AddressTest #test04EqualsIsFalseWhenStreetNumberIsNotEqual stamp: 'AS 6/25/2023 09:56:41'!
PASSED!

!testRun: #AddressTest #test05EqualsIsFalseWhenTownIsNotEqual stamp: 'AS 6/25/2023 09:56:41'!
PASSED!

!testRun: #AddressTest #test06EqualsIsFalseWhenZipCodeIsNotEqual stamp: 'AS 6/25/2023 09:56:41'!
PASSED!
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:56:57'!
test07EqualsIsFalseWhenProvinceIsNotEqual
	
	| address1 address2 |
	
	address1 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	address2 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1640
					province: 'BsAs'.						
					
	self assert: (address1 ~= address2).
! !

!testRun: #AddressTest #test07EqualsIsFalseWhenProvinceIsNotEqual stamp: 'AS 6/25/2023 09:56:58'!
PASSED!

!testRun: #AddressTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 09:56:58'!
PASSED!

!testRun: #AddressTest #test02EqualsIsTrueWhenAllValuesAreEquals stamp: 'AS 6/25/2023 09:56:58'!
PASSED!

!testRun: #AddressTest #test03EqualsIsFalseWhenStreetNameIsNotEqual stamp: 'AS 6/25/2023 09:56:58'!
PASSED!

!testRun: #AddressTest #test04EqualsIsFalseWhenStreetNumberIsNotEqual stamp: 'AS 6/25/2023 09:56:58'!
PASSED!

!testRun: #AddressTest #test05EqualsIsFalseWhenTownIsNotEqual stamp: 'AS 6/25/2023 09:56:58'!
PASSED!

!testRun: #AddressTest #test06EqualsIsFalseWhenZipCodeIsNotEqual stamp: 'AS 6/25/2023 09:56:58'!
PASSED!

!testRun: #AddressTest #test07EqualsIsFalseWhenProvinceIsNotEqual stamp: 'AS 6/25/2023 09:56:58'!
PASSED!
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:57:34'!
test08SameObjectMustHaveSameHash
	
	| address1 address2 |
	
	address1 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	address2 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.						
					
	self assert: address1 hash equals: address2 hash.
! !

!testRun: #AddressTest #test08SameObjectMustHaveSameHash stamp: 'AS 6/25/2023 09:57:35'!
PASSED!

!testRun: #AddressTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 09:57:35'!
PASSED!

!testRun: #AddressTest #test02EqualsIsTrueWhenAllValuesAreEquals stamp: 'AS 6/25/2023 09:57:35'!
PASSED!

!testRun: #AddressTest #test03EqualsIsFalseWhenStreetNameIsNotEqual stamp: 'AS 6/25/2023 09:57:35'!
PASSED!

!testRun: #AddressTest #test04EqualsIsFalseWhenStreetNumberIsNotEqual stamp: 'AS 6/25/2023 09:57:35'!
PASSED!

!testRun: #AddressTest #test05EqualsIsFalseWhenTownIsNotEqual stamp: 'AS 6/25/2023 09:57:35'!
PASSED!

!testRun: #AddressTest #test06EqualsIsFalseWhenZipCodeIsNotEqual stamp: 'AS 6/25/2023 09:57:35'!
PASSED!

!testRun: #AddressTest #test07EqualsIsFalseWhenProvinceIsNotEqual stamp: 'AS 6/25/2023 09:57:35'!
PASSED!

!testRun: #AddressTest #test08SameObjectMustHaveSameHash stamp: 'AS 6/25/2023 09:57:35'!
PASSED!
!AddressTest methodsFor: 'test' stamp: 'AS 6/25/2023 09:58:38'!
test09DifferentObjectShouldHaveDifferentHash
	
	| address1 address2 |
	
	address1 := Address 
					withStreetName: 'San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.	
					
	address2 := Address 
					withStreetName: 'Jode de San Martin'
					streetNumber: 3388
					town: 'Olivos'
					zipCode: 1636
					province: 'Buenos Aires'.						
					
	self assert: (address1 hash ~= address2 hash).
! !

!testRun: #AddressTest #test09DifferentObjectShouldHaveDifferentHash stamp: 'AS 6/25/2023 09:58:40'!
PASSED!

!testRun: #AddressTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 09:58:40'!
PASSED!

!testRun: #AddressTest #test02EqualsIsTrueWhenAllValuesAreEquals stamp: 'AS 6/25/2023 09:58:40'!
PASSED!

!testRun: #AddressTest #test03EqualsIsFalseWhenStreetNameIsNotEqual stamp: 'AS 6/25/2023 09:58:40'!
PASSED!

!testRun: #AddressTest #test04EqualsIsFalseWhenStreetNumberIsNotEqual stamp: 'AS 6/25/2023 09:58:40'!
PASSED!

!testRun: #AddressTest #test05EqualsIsFalseWhenTownIsNotEqual stamp: 'AS 6/25/2023 09:58:40'!
PASSED!

!testRun: #AddressTest #test06EqualsIsFalseWhenZipCodeIsNotEqual stamp: 'AS 6/25/2023 09:58:40'!
PASSED!

!testRun: #AddressTest #test07EqualsIsFalseWhenProvinceIsNotEqual stamp: 'AS 6/25/2023 09:58:40'!
PASSED!

!testRun: #AddressTest #test08SameObjectMustHaveSameHash stamp: 'AS 6/25/2023 09:58:40'!
PASSED!

!testRun: #AddressTest #test09DifferentObjectShouldHaveDifferentHash stamp: 'AS 6/25/2023 09:58:40'!
PASSED!

TestCase subclass: #CustomerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerTest category: 'CustomerImporter' stamp: 'AS 6/25/2023 09:59:02'!
TestCase subclass: #CustomerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:11:06'!
test01InitializeAssignColaboratorsValues
	
	| address |
	
	address := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636 province: 'Buenos Aires' }.
						
	self assert: 'San Martin' equals: address streetName.
	self assert: 3388 equals: address streetNumber.
	self assert: 'Olivos' equals: address town.
	self assert: 1636 equals: address zipCode.
	self assert: 'Buenos Aires' equals: address province.! !
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:11:13' prior: 50631390!
test01InitializeAssignColaboratorsValues
	
	| customer |
	
	customer := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636 province: 'Buenos Aires' }.
						
	self assert: 'San Martin' equals: customer streetName.
	self assert: 3388 equals: customer streetNumber.
	self assert: 'Olivos' equals: customer town.
	self assert: 1636 equals: customer zipCode.
	self assert: 'Buenos Aires' equals: customer province.! !
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:13:40' prior: 50631411!
test01InitializeAssignColaboratorsValues
	
	| customer |
	
	customer := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: #().
						
	self assert: 'D' equals: customer identificationType.
	self assert: '11112222' equals: customer identificationNumber .
	self assert: 'Juan' equals: customer firstName .
	self assert: 'Perez' equals: customer lastName.
	self assert: 0 equals: customer addressesSize.! !
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:16:33'!
test02InitializeAddAddresses
	
	| customer |
	
	customer := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
						
	self assert: 1 equals: customer addressesSize.! !

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:16:36'!
PASSED!

!testRun: #CustomerTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:16:36'!
PASSED!

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:16:36'!
PASSED!
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:17:57'!
test03CustomerAreEqualsIfTheyHaveSameValues
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.					
						
	self assert: customer1 equals: customer2.! !

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:17:58'!
ERROR!

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:19:16'!
ERROR!
!Customer methodsFor: 'comparing' stamp: 'AS 6/25/2023 10:19:50' prior: 50630848 overrides: 16901772!
= otherCustomer
	
	^(identificationType = otherCustomer identificationType)
	and: [ identificationNumber = otherCustomer identificationNumber ]
	and: [ firstName = otherCustomer firstName ]
	and: [ lastName = otherCustomer lastName ]
	and: [ self sameCustomerAddresses: otherCustomer ]
! !
!Customer methodsFor: 'addresses' stamp: 'AS 6/25/2023 10:19:58' prior: 50630832!
sameCustomerAddresses: otherCustomer
	
	self halt.
	(self addressesSize = otherCustomer addressesSize) ifFalse: [^false].
	
	(addresses allSatisfy: [ :anAddress | otherCustomer addresses detect: [ :otherAddress | otherAddress = anAddress ]]) ifFalse: [^false].
	(otherCustomer addresses allSatisfy: [ :anAddress | addresses detect: [ :otherAddress | otherAddress = anAddress ]]) ifFalse: [^false].
	
	^true.! !

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:20:28'!
ERROR!
!Customer methodsFor: 'addresses' stamp: 'AS 6/25/2023 10:21:19' prior: 50631517!
sameCustomerAddresses: otherCustomer
	
	self halt.
	(self addressesSize = otherCustomer addressesSize) ifFalse: [^false].
	
	(addresses allSatisfy: [ :anAddress | otherCustomer addresses includes: [ anAddress ]]) ifFalse: [^false].
	(otherCustomer addresses allSatisfy: [ :anAddress | addresses includes: [ anAddress ]]) ifFalse: [^false].
	
	^true.! !
!Customer methodsFor: 'addresses' stamp: 'AS 6/25/2023 10:21:31' prior: 50631536!
sameCustomerAddresses: otherCustomer
	
	self halt.
	(self addressesSize = otherCustomer addressesSize) ifFalse: [^false].
	
	(addresses allSatisfy: [ :anAddress | otherCustomer addresses includes: anAddress]) ifFalse: [^false].
	(otherCustomer addresses allSatisfy: [ :anAddress | addresses includes: anAddress]) ifFalse: [^false].
	
	^true.! !

!testRun: #CustomerTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:21:33'!
PASSED!

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:21:33'!
PASSED!

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:21:48'!
PASSED!
!Customer methodsFor: 'addresses' stamp: 'AS 6/25/2023 10:21:53' prior: 50631550!
sameCustomerAddresses: otherCustomer
	
	(self addressesSize = otherCustomer addressesSize) ifFalse: [^false].
	
	(addresses allSatisfy: [ :anAddress | otherCustomer addresses includes: anAddress]) ifFalse: [^false].
	(otherCustomer addresses allSatisfy: [ :anAddress | addresses includes: anAddress]) ifFalse: [^false].
	
	^true.! !

!testRun: #CustomerTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:21:55'!
PASSED!

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:21:55'!
PASSED!

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:21:55'!
PASSED!
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:22:46'!
test04CustomerAreNotEqualsIfIdentificationTypeIsDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'C'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.					
						
	self assert: (customer1 ~= customer2).! !

!testRun: #CustomerTest #test04CustomerAreNotEqualsIfIdentificationTypeIsDifferent stamp: 'AS 6/25/2023 10:22:49'!
PASSED!

!testRun: #CustomerTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:22:49'!
PASSED!

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:22:49'!
PASSED!

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:22:49'!
PASSED!

!testRun: #CustomerTest #test04CustomerAreNotEqualsIfIdentificationTypeIsDifferent stamp: 'AS 6/25/2023 10:22:49'!
PASSED!
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:23:04'!
test05CustomerAreNotEqualsIfIdentificationNumberIsDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'D'
					identificationNumber: '11112223'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.					
						
	self assert: (customer1 ~= customer2).! !

!testRun: #CustomerTest #test05CustomerAreNotEqualsIfIdentificationNumberIsDifferent stamp: 'AS 6/25/2023 10:23:05'!
PASSED!

!testRun: #CustomerTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:23:05'!
PASSED!

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:23:05'!
PASSED!

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:23:05'!
PASSED!

!testRun: #CustomerTest #test04CustomerAreNotEqualsIfIdentificationTypeIsDifferent stamp: 'AS 6/25/2023 10:23:05'!
PASSED!

!testRun: #CustomerTest #test05CustomerAreNotEqualsIfIdentificationNumberIsDifferent stamp: 'AS 6/25/2023 10:23:05'!
PASSED!
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:23:27'!
test06CustomerAreNotEqualsIfFirstNameIsDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juancito'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.					
						
	self assert: (customer1 ~= customer2).! !

!testRun: #CustomerTest #test06CustomerAreNotEqualsIfFirstNameIsDifferent stamp: 'AS 6/25/2023 10:23:29'!
PASSED!

!testRun: #CustomerTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:23:29'!
PASSED!

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:23:29'!
PASSED!

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:23:29'!
PASSED!

!testRun: #CustomerTest #test04CustomerAreNotEqualsIfIdentificationTypeIsDifferent stamp: 'AS 6/25/2023 10:23:29'!
PASSED!

!testRun: #CustomerTest #test05CustomerAreNotEqualsIfIdentificationNumberIsDifferent stamp: 'AS 6/25/2023 10:23:29'!
PASSED!

!testRun: #CustomerTest #test06CustomerAreNotEqualsIfFirstNameIsDifferent stamp: 'AS 6/25/2023 10:23:29'!
PASSED!
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:23:41'!
test07CustomerAreNotEqualsIfLastNameIsDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juancito'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.					
						
	self assert: (customer1 ~= customer2).! !
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:23:47' prior: 50631733!
test07CustomerAreNotEqualsIfLastNameIsDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Peres'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.					
						
	self assert: (customer1 ~= customer2).! !

!testRun: #CustomerTest #test07CustomerAreNotEqualsIfLastNameIsDifferent stamp: 'AS 6/25/2023 10:23:48'!
PASSED!

!testRun: #CustomerTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:23:48'!
PASSED!

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:23:48'!
PASSED!

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:23:48'!
PASSED!

!testRun: #CustomerTest #test04CustomerAreNotEqualsIfIdentificationTypeIsDifferent stamp: 'AS 6/25/2023 10:23:48'!
PASSED!

!testRun: #CustomerTest #test05CustomerAreNotEqualsIfIdentificationNumberIsDifferent stamp: 'AS 6/25/2023 10:23:48'!
PASSED!

!testRun: #CustomerTest #test06CustomerAreNotEqualsIfFirstNameIsDifferent stamp: 'AS 6/25/2023 10:23:48'!
PASSED!

!testRun: #CustomerTest #test07CustomerAreNotEqualsIfLastNameIsDifferent stamp: 'AS 6/25/2023 10:23:48'!
PASSED!
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:24:42'!
test08CustomerAreNotEqualsIfAddressesSizeIsDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires'.
								Address withStreetName: 'Roca' streetNumber: 1234 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.					
						
	self assert: (customer1 ~= customer2).! !

!testRun: #CustomerTest #test08CustomerAreNotEqualsIfAddressesSizeIsDifferent stamp: 'AS 6/25/2023 10:24:46'!
PASSED!

!testRun: #CustomerTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:24:46'!
PASSED!

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:24:46'!
PASSED!

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:24:46'!
PASSED!

!testRun: #CustomerTest #test04CustomerAreNotEqualsIfIdentificationTypeIsDifferent stamp: 'AS 6/25/2023 10:24:46'!
PASSED!

!testRun: #CustomerTest #test05CustomerAreNotEqualsIfIdentificationNumberIsDifferent stamp: 'AS 6/25/2023 10:24:46'!
PASSED!

!testRun: #CustomerTest #test06CustomerAreNotEqualsIfFirstNameIsDifferent stamp: 'AS 6/25/2023 10:24:46'!
PASSED!

!testRun: #CustomerTest #test07CustomerAreNotEqualsIfLastNameIsDifferent stamp: 'AS 6/25/2023 10:24:46'!
PASSED!

!testRun: #CustomerTest #test08CustomerAreNotEqualsIfAddressesSizeIsDifferent stamp: 'AS 6/25/2023 10:24:46'!
PASSED!
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:25:32'!
test08CustomerAreNotEqualsIfAddressesAreDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'Roca' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires'.								}.
						
	self assert: (customer1 ~= customer2).! !

!testRun: #CustomerTest #test08CustomerAreNotEqualsIfAddressesAreDifferent stamp: 'AS 6/25/2023 10:25:34'!
PASSED!

!testRun: #CustomerTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:25:34'!
PASSED!

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:25:34'!
PASSED!

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:25:34'!
PASSED!

!testRun: #CustomerTest #test04CustomerAreNotEqualsIfIdentificationTypeIsDifferent stamp: 'AS 6/25/2023 10:25:34'!
PASSED!

!testRun: #CustomerTest #test05CustomerAreNotEqualsIfIdentificationNumberIsDifferent stamp: 'AS 6/25/2023 10:25:34'!
PASSED!

!testRun: #CustomerTest #test06CustomerAreNotEqualsIfFirstNameIsDifferent stamp: 'AS 6/25/2023 10:25:34'!
PASSED!

!testRun: #CustomerTest #test07CustomerAreNotEqualsIfLastNameIsDifferent stamp: 'AS 6/25/2023 10:25:34'!
PASSED!

!testRun: #CustomerTest #test08CustomerAreNotEqualsIfAddressesAreDifferent stamp: 'AS 6/25/2023 10:25:34'!
PASSED!

!testRun: #CustomerTest #test08CustomerAreNotEqualsIfAddressesSizeIsDifferent stamp: 'AS 6/25/2023 10:25:34'!
PASSED!
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:25:43'!
test09CustomerAreNotEqualsIfAddressesAreDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'Roca' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires'.								}.
						
	self assert: (customer1 ~= customer2).! !

!methodRemoval: CustomerTest #test08CustomerAreNotEqualsIfAddressesAreDifferent stamp: 'AS 6/25/2023 10:25:43'!
test08CustomerAreNotEqualsIfAddressesAreDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'Roca' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires'.								}.
						
	self assert: (customer1 ~= customer2).!
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:26:05'!
test10IfCustomerAreEqualsTheyHaveTheSameHash
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'Roca' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires'.								}.
						
	self assert: (customer1 ~= customer2).! !
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:26:31' prior: 50631976!
test10IfCustomerAreEqualsTheyHaveTheSameHash
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires'.								}.
						
	self assert: customer1 hash equals: customer2 hash.! !

!testRun: #CustomerTest #test10IfCustomerAreEqualsTheyHaveTheSameHash stamp: 'AS 6/25/2023 10:26:33'!
FAILURE!
!Customer methodsFor: 'comparing' stamp: 'AS 6/25/2023 10:30:29' overrides: 16901788!
hash
	"
	^(((identificationType hash) 	bitXor: 	(identificationNumber hash))
			bitXor: (firstName hash)				bitXor: (lastName hash)))
					bitXor: (addresses hash))))).
"! !
!Customer methodsFor: 'comparing' stamp: 'AS 6/25/2023 10:32:16' prior: 50632028 overrides: 16901788!
hash
	
	^((((identificationType hash)
		bitXor: 	(identificationNumber hash))
			bitXor: (firstName hash))
				bitXor: (lastName hash))
					bitXor: (addresses hash).
! !

!testRun: #CustomerTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:32:19'!
PASSED!

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:32:19'!
PASSED!

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:32:19'!
PASSED!

!testRun: #CustomerTest #test04CustomerAreNotEqualsIfIdentificationTypeIsDifferent stamp: 'AS 6/25/2023 10:32:19'!
PASSED!

!testRun: #CustomerTest #test05CustomerAreNotEqualsIfIdentificationNumberIsDifferent stamp: 'AS 6/25/2023 10:32:19'!
PASSED!

!testRun: #CustomerTest #test06CustomerAreNotEqualsIfFirstNameIsDifferent stamp: 'AS 6/25/2023 10:32:19'!
PASSED!

!testRun: #CustomerTest #test07CustomerAreNotEqualsIfLastNameIsDifferent stamp: 'AS 6/25/2023 10:32:19'!
PASSED!

!testRun: #CustomerTest #test08CustomerAreNotEqualsIfAddressesSizeIsDifferent stamp: 'AS 6/25/2023 10:32:19'!
PASSED!

!testRun: #CustomerTest #test09CustomerAreNotEqualsIfAddressesAreDifferent stamp: 'AS 6/25/2023 10:32:19'!
PASSED!

!testRun: #CustomerTest #test10IfCustomerAreEqualsTheyHaveTheSameHash stamp: 'AS 6/25/2023 10:32:19'!
PASSED!
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:33:06'!
test10IfCustomerAreNotEqualsTheyShouldHaveDifferentHash
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'C'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires'.								}.
						
	self assert: (customer1 hash ~= customer2 hash).! !
!CustomerTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:33:14'!
test11IfCustomerAreNotEqualsTheyShouldHaveDifferentHash
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'C'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires'.								}.
						
	self assert: (customer1 hash ~= customer2 hash).! !

!methodRemoval: CustomerTest #test10IfCustomerAreNotEqualsTheyShouldHaveDifferentHash stamp: 'AS 6/25/2023 10:33:14'!
test10IfCustomerAreNotEqualsTheyShouldHaveDifferentHash
	
	| customer1 customer2 |
	
	customer1 := Customer 
					identificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					identificationType: 'C'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires'.								}.
						
	self assert: (customer1 hash ~= customer2 hash).!

!testRun: #CustomerTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:33:23'!
PASSED!

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:33:23'!
PASSED!

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:33:23'!
PASSED!

!testRun: #CustomerTest #test04CustomerAreNotEqualsIfIdentificationTypeIsDifferent stamp: 'AS 6/25/2023 10:33:23'!
PASSED!

!testRun: #CustomerTest #test05CustomerAreNotEqualsIfIdentificationNumberIsDifferent stamp: 'AS 6/25/2023 10:33:23'!
PASSED!

!testRun: #CustomerTest #test06CustomerAreNotEqualsIfFirstNameIsDifferent stamp: 'AS 6/25/2023 10:33:23'!
PASSED!

!testRun: #CustomerTest #test07CustomerAreNotEqualsIfLastNameIsDifferent stamp: 'AS 6/25/2023 10:33:23'!
PASSED!

!testRun: #CustomerTest #test08CustomerAreNotEqualsIfAddressesSizeIsDifferent stamp: 'AS 6/25/2023 10:33:23'!
PASSED!

!testRun: #CustomerTest #test09CustomerAreNotEqualsIfAddressesAreDifferent stamp: 'AS 6/25/2023 10:33:23'!
PASSED!

!testRun: #CustomerTest #test10IfCustomerAreEqualsTheyHaveTheSameHash stamp: 'AS 6/25/2023 10:33:23'!
PASSED!

!testRun: #CustomerTest #test11IfCustomerAreNotEqualsTheyShouldHaveDifferentHash stamp: 'AS 6/25/2023 10:33:23'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'AS 6/25/2023 10:36:00' prior: 50630787!
assertSelectCustomer: aCustomer

	| queryResult selectedCustomer |
	
	queryResult := self selectCustomerWith: aCustomer identificationType number: aCustomer identificationNumber.
	self assert: 1 equals: queryResult size.
	
	selectedCustomer := queryResult anyOne.
	
	self assert: aCustomer equals: selectedCustomer! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 10:36:10'!
PASSED!
!ImportTest methodsFor: 'test' stamp: 'AS 6/25/2023 10:37:52' prior: 50630687!
test01Import

	| allCustomers stream importCostumers |
		
	stream := self createStream: { 'C,Pepe,Sanchez,D,22333444'.
							  'A,San Martin,3322,Olivos,1636,BsAs'.
							  'A,Maipu,888,Florida,1122,Buenos Aires'.
							  'C,Juan,Perez,C,23-25666777-9'.
							  'A,Alem,1122,CABA,1001,CABA' }.
								
	importCostumers := ImportCustomers session: session inputStream: stream.
	importCostumers import.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertSelectCustomer: (Customer identificationType: 'D' identificationNumber: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }).

	self assertSelectCustomer: (Customer identificationType: 'C' identificationNumber: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. })
! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 10:37:54'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 10:37:55'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'AS 6/25/2023 10:38:50' prior: 50630637!
assertCustomer: aCustomer
"
	No es necesario si implementamos el = en Customer
	
	self assertSelectCustomer: aCustomer.		
	self assertAddressOfCustomer: aCustomer
	"! !
!ImportTest methodsFor: 'assertions' stamp: 'AS 6/25/2023 10:39:08' prior: 50630806!
assertAddressOfCustomer: aCustomer

"
	No es necesario si implementamos el = en Customer
	
	| customer index |
	
	customer := (self selectCustomerWith: aCustomer identificationType number: aCustomer identificationNumber) anyOne.
	
	index := 1.
	[index <= aCustomer addressesSize] whileTrue: [self assert: (customer addresses at: index) equals: (aCustomer addresses at: index).
		index := index + 1 ]
	"! !

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 10:39:11'!
PASSED!
!Customer methodsFor: 'comparing' stamp: 'AS 6/25/2023 10:41:08' prior: 50631574!
sameCustomerAddresses: otherCustomer

	^addresses = otherCustomer addresses.
"
	(self addressesSize = otherCustomer addressesSize) ifFalse: [^false].
	
	(addresses allSatisfy: [ :anAddress | otherCustomer addresses includes: anAddress]) ifFalse: [^false].
	(otherCustomer addresses allSatisfy: [ :anAddress | addresses includes: anAddress]) ifFalse: [^false].
	
	^true.
	"! !

!testRun: #CustomerTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:41:09'!
PASSED!

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:41:09'!
PASSED!

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:41:09'!
PASSED!

!testRun: #CustomerTest #test04CustomerAreNotEqualsIfIdentificationTypeIsDifferent stamp: 'AS 6/25/2023 10:41:09'!
PASSED!

!testRun: #CustomerTest #test05CustomerAreNotEqualsIfIdentificationNumberIsDifferent stamp: 'AS 6/25/2023 10:41:09'!
PASSED!

!testRun: #CustomerTest #test06CustomerAreNotEqualsIfFirstNameIsDifferent stamp: 'AS 6/25/2023 10:41:09'!
PASSED!

!testRun: #CustomerTest #test07CustomerAreNotEqualsIfLastNameIsDifferent stamp: 'AS 6/25/2023 10:41:09'!
PASSED!

!testRun: #CustomerTest #test08CustomerAreNotEqualsIfAddressesSizeIsDifferent stamp: 'AS 6/25/2023 10:41:09'!
PASSED!

!testRun: #CustomerTest #test09CustomerAreNotEqualsIfAddressesAreDifferent stamp: 'AS 6/25/2023 10:41:09'!
PASSED!

!testRun: #CustomerTest #test10IfCustomerAreEqualsTheyHaveTheSameHash stamp: 'AS 6/25/2023 10:41:09'!
PASSED!

!testRun: #CustomerTest #test11IfCustomerAreNotEqualsTheyShouldHaveDifferentHash stamp: 'AS 6/25/2023 10:41:09'!
PASSED!
!Customer methodsFor: 'comparing' stamp: 'AS 6/25/2023 10:41:36' prior: 50631505 overrides: 16901772!
= otherCustomer
	
	^(identificationType = otherCustomer identificationType)
	and: [ identificationNumber = otherCustomer identificationNumber ]
	and: [ firstName = otherCustomer firstName ]
	and: [ lastName = otherCustomer lastName ]
	and: [ addresses =  otherCustomer addresses ]
! !

!testRun: #CustomerTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:41:38'!
PASSED!

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:41:38'!
PASSED!

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:41:38'!
PASSED!

!testRun: #CustomerTest #test04CustomerAreNotEqualsIfIdentificationTypeIsDifferent stamp: 'AS 6/25/2023 10:41:38'!
PASSED!

!testRun: #CustomerTest #test05CustomerAreNotEqualsIfIdentificationNumberIsDifferent stamp: 'AS 6/25/2023 10:41:38'!
PASSED!

!testRun: #CustomerTest #test06CustomerAreNotEqualsIfFirstNameIsDifferent stamp: 'AS 6/25/2023 10:41:38'!
PASSED!

!testRun: #CustomerTest #test07CustomerAreNotEqualsIfLastNameIsDifferent stamp: 'AS 6/25/2023 10:41:38'!
PASSED!

!testRun: #CustomerTest #test08CustomerAreNotEqualsIfAddressesSizeIsDifferent stamp: 'AS 6/25/2023 10:41:38'!
PASSED!

!testRun: #CustomerTest #test09CustomerAreNotEqualsIfAddressesAreDifferent stamp: 'AS 6/25/2023 10:41:38'!
PASSED!

!testRun: #CustomerTest #test10IfCustomerAreEqualsTheyHaveTheSameHash stamp: 'AS 6/25/2023 10:41:38'!
PASSED!

!testRun: #CustomerTest #test11IfCustomerAreNotEqualsTheyShouldHaveDifferentHash stamp: 'AS 6/25/2023 10:41:38'!
PASSED!

!methodRemoval: Customer #sameCustomerAddresses: stamp: 'AS 6/25/2023 10:41:42'!
sameCustomerAddresses: otherCustomer

	^addresses = otherCustomer addresses.
"
	(self addressesSize = otherCustomer addressesSize) ifFalse: [^false].
	
	(addresses allSatisfy: [ :anAddress | otherCustomer addresses includes: anAddress]) ifFalse: [^false].
	(otherCustomer addresses allSatisfy: [ :anAddress | addresses includes: anAddress]) ifFalse: [^false].
	
	^true.
	"!
!Customer class methodsFor: 'instance creation' stamp: 'AS 6/25/2023 10:42:12'!
withIdentificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses 

	^self new initializeIdentificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses ! !
!CustomerTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 10:42:12' prior: 50631928!
test09CustomerAreNotEqualsIfAddressesAreDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'Roca' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires'.								}.
						
	self assert: (customer1 ~= customer2).! !
!CustomerTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 10:42:12' prior: 50631638!
test05CustomerAreNotEqualsIfIdentificationNumberIsDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112223'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.					
						
	self assert: (customer1 ~= customer2).! !
!CustomerTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 10:42:12' prior: 50631450!
test02InitializeAddAddresses
	
	| customer |
	
	customer := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
						
	self assert: 1 equals: customer addressesSize.! !
!CustomerTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 10:42:12' prior: 50632000!
test10IfCustomerAreEqualsTheyHaveTheSameHash
	
	| customer1 customer2 |
	
	customer1 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires'.								}.
						
	self assert: customer1 hash equals: customer2 hash.! !
!CustomerTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 10:42:12' prior: 50631597!
test04CustomerAreNotEqualsIfIdentificationTypeIsDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					withIdentificationType: 'C'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.					
						
	self assert: (customer1 ~= customer2).! !
!CustomerTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 10:42:12' prior: 50632104!
test11IfCustomerAreNotEqualsTheyShouldHaveDifferentHash
	
	| customer1 customer2 |
	
	customer1 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					withIdentificationType: 'C'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires'.								}.
						
	self assert: (customer1 hash ~= customer2 hash).! !
!CustomerTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 10:42:12' prior: 50631809!
test08CustomerAreNotEqualsIfAddressesSizeIsDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires'.
								Address withStreetName: 'Roca' streetNumber: 1234 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.					
						
	self assert: (customer1 ~= customer2).! !
!CustomerTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 10:42:12' prior: 50631432!
test01InitializeAssignColaboratorsValues
	
	| customer |
	
	customer := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: #().
						
	self assert: 'D' equals: customer identificationType.
	self assert: '11112222' equals: customer identificationNumber .
	self assert: 'Juan' equals: customer firstName .
	self assert: 'Perez' equals: customer lastName.
	self assert: 0 equals: customer addressesSize.! !
!CustomerTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 10:42:12' prior: 50631473!
test03CustomerAreEqualsIfTheyHaveSameValues
	
	| customer1 customer2 |
	
	customer1 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.					
						
	self assert: customer1 equals: customer2.! !
!CustomerTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 10:42:12' prior: 50631684!
test06CustomerAreNotEqualsIfFirstNameIsDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juancito'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.					
						
	self assert: (customer1 ~= customer2).! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 10:42:12' prior: 50632209!
test01Import

	| allCustomers stream importCostumers |
		
	stream := self createStream: { 'C,Pepe,Sanchez,D,22333444'.
							  'A,San Martin,3322,Olivos,1636,BsAs'.
							  'A,Maipu,888,Florida,1122,Buenos Aires'.
							  'C,Juan,Perez,C,23-25666777-9'.
							  'A,Alem,1122,CABA,1001,CABA' }.
								
	importCostumers := ImportCustomers session: session inputStream: stream.
	importCostumers import.
	
	allCustomers := session selectAllOfType: Customer.
	self assert: 2 equals: (allCustomers size).
	
	self assertSelectCustomer: (Customer withIdentificationType: 'D' identificationNumber: '22333444' firstName: 'Pepe' lastName: 'Sanchez' addresses: {
			Address 
				withStreetName: 'San Martin'
				streetNumber: 3322
				town: 'Olivos'
				zipCode: 1636
				province: 'BsAs'.

			Address
				withStreetName: 'Maipu'
				streetNumber: 888
				town: 'Florida'
				zipCode: 1122
				province: 'Buenos Aires' }).

	self assertSelectCustomer: (Customer withIdentificationType: 'C' identificationNumber: '23-25666777-9' firstName: 'Juan' lastName: 'Perez' addresses: {
			Address 
				withStreetName: 'Alem'
				streetNumber: 1122
				town: 'CABA'
				zipCode: 1001
				province: 'CABA'. })
! !
!CustomerTest methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 10:42:12' prior: 50631757!
test07CustomerAreNotEqualsIfLastNameIsDifferent
	
	| customer1 customer2 |
	
	customer1 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Perez'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.
					
	customer2 := Customer 
					withIdentificationType: 'D'
					identificationNumber: '11112222'
					firstName: 'Juan'
					lastName: 'Peres'
					addresses: { Address withStreetName: 'San Martin' streetNumber: 3388 town: 'Olivos' zipCode: 1636  province: 'Buenos Aires' }.					
						
	self assert: (customer1 ~= customer2).! !

!methodRemoval: Customer class #identificationType:identificationNumber:firstName:lastName:addresses: stamp: 'AS 6/25/2023 10:42:12'!
identificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses 

	^self new initializeIdentificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses !
!Customer methodsFor: 'initialization' stamp: 'AS 6/25/2023 10:42:31'!
initializeWithIdentificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses 

	identificationType := anIdentificationType.
	identificationNumber := anIdentificationNumber.
	firstName := aFirstName.
	lastName := aLastName.
	addresses := OrderedCollection withAll: anArrayOfAddresses.! !
!Customer class methodsFor: 'as yet unclassified' stamp: 'AS 6/25/2023 10:42:31' prior: 50632400!
withIdentificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses 

	^self new initializeWithIdentificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses ! !

!methodRemoval: Customer #initializeIdentificationType:identificationNumber:firstName:lastName:addresses: stamp: 'AS 6/25/2023 10:42:31'!
initializeIdentificationType: anIdentificationType identificationNumber: anIdentificationNumber firstName: aFirstName lastName: aLastName addresses: anArrayOfAddresses 

	identificationType := anIdentificationType.
	identificationNumber := anIdentificationNumber.
	firstName := aFirstName.
	lastName := aLastName.
	addresses := OrderedCollection withAll: anArrayOfAddresses.!

!testRun: #ImportTest #test01Import stamp: 'AS 6/25/2023 10:42:44'!
PASSED!

!testRun: #CustomerTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:42:48'!
PASSED!

!testRun: #CustomerTest #test02InitializeAddAddresses stamp: 'AS 6/25/2023 10:42:48'!
PASSED!

!testRun: #CustomerTest #test03CustomerAreEqualsIfTheyHaveSameValues stamp: 'AS 6/25/2023 10:42:48'!
PASSED!

!testRun: #CustomerTest #test04CustomerAreNotEqualsIfIdentificationTypeIsDifferent stamp: 'AS 6/25/2023 10:42:48'!
PASSED!

!testRun: #CustomerTest #test05CustomerAreNotEqualsIfIdentificationNumberIsDifferent stamp: 'AS 6/25/2023 10:42:48'!
PASSED!

!testRun: #CustomerTest #test06CustomerAreNotEqualsIfFirstNameIsDifferent stamp: 'AS 6/25/2023 10:42:48'!
PASSED!

!testRun: #CustomerTest #test07CustomerAreNotEqualsIfLastNameIsDifferent stamp: 'AS 6/25/2023 10:42:48'!
PASSED!

!testRun: #CustomerTest #test08CustomerAreNotEqualsIfAddressesSizeIsDifferent stamp: 'AS 6/25/2023 10:42:48'!
PASSED!

!testRun: #CustomerTest #test09CustomerAreNotEqualsIfAddressesAreDifferent stamp: 'AS 6/25/2023 10:42:48'!
PASSED!

!testRun: #CustomerTest #test10IfCustomerAreEqualsTheyHaveTheSameHash stamp: 'AS 6/25/2023 10:42:48'!
PASSED!

!testRun: #CustomerTest #test11IfCustomerAreNotEqualsTheyShouldHaveDifferentHash stamp: 'AS 6/25/2023 10:42:48'!
PASSED!

!testRun: #AddressTest #test01InitializeAssignColaboratorsValues stamp: 'AS 6/25/2023 10:42:51'!
PASSED!

!testRun: #AddressTest #test02EqualsIsTrueWhenAllValuesAreEquals stamp: 'AS 6/25/2023 10:42:51'!
PASSED!

!testRun: #AddressTest #test03EqualsIsFalseWhenStreetNameIsNotEqual stamp: 'AS 6/25/2023 10:42:51'!
PASSED!

!testRun: #AddressTest #test04EqualsIsFalseWhenStreetNumberIsNotEqual stamp: 'AS 6/25/2023 10:42:51'!
PASSED!

!testRun: #AddressTest #test05EqualsIsFalseWhenTownIsNotEqual stamp: 'AS 6/25/2023 10:42:51'!
PASSED!

!testRun: #AddressTest #test06EqualsIsFalseWhenZipCodeIsNotEqual stamp: 'AS 6/25/2023 10:42:51'!
PASSED!

!testRun: #AddressTest #test07EqualsIsFalseWhenProvinceIsNotEqual stamp: 'AS 6/25/2023 10:42:51'!
PASSED!

!testRun: #AddressTest #test08SameObjectMustHaveSameHash stamp: 'AS 6/25/2023 10:42:51'!
PASSED!

!testRun: #AddressTest #test09DifferentObjectShouldHaveDifferentHash stamp: 'AS 6/25/2023 10:42:51'!
PASSED!