

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (21 March 2023 00:17:50) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


----SNAPSHOT----(21 March 2023 00:31:16) CuisUniversity-5706.image priorSource: 8713034!

1+1!

ObjectBuilder create: #Verdadero asChildOf: DenotativeObject collaboratorNames: '' in: 'Algebra de Boole'!

!classDefinition: #Verdadero category: 'Algebra de Boole' stamp: 'WAL 3/21/2023 00:43:12'!
DenotativeObject subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Algebra de Boole'!

!classDefinition: 'Verdadero class' category: 'Algebra de Boole' stamp: 'WAL 3/21/2023 00:43:12'!
Verdadero class
	instanceVariableNames: ''!

!classDefinition: #Falso category: 'Algebra de Boole' stamp: 'WAL 3/21/2023 00:47:40'!
DenotativeObject subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Algebra de Boole'!
!Verdadero class methodsFor: 'no messages' stamp: 'WAL 3/21/2023 00:47:37'!
negado

	^ Falso! !
!Falso class methodsFor: 'no messages' stamp: 'WAL 3/21/2023 00:58:03'!
negado

	^ Verdadero ! !

----SNAPSHOT----(21 March 2023 01:07:43) CuisUniversity-5706.image priorSource: 8713216!

----STARTUP---- (21 March 2023 21:13:20) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


ObjectBuilder create: #AlgebraDeBooleTests asChildOf: DenotativeObject collaboratorNames: '' in: 'Algebra de Boole'!

!classDefinition: #AlgebraDeBooleTests category: 'Algebra de Boole' stamp: 'WAL 3/21/2023 23:35:44'!
DenotativeObject subclass: #AlgebraDeBooleTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Algebra de Boole'!

!classDefinition: 'AlgebraDeBooleTests class' category: 'Algebra de Boole' stamp: 'WAL 3/21/2023 23:35:44'!
AlgebraDeBooleTests class
	instanceVariableNames: ''!
!AlgebraDeBooleTests class methodsFor: 'no messages' stamp: 'WAL 3/21/2023 23:36:51'!
testVerdaderoNegadoEsFalso

	Assert that: (Verdadero negado) isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/21/2023 23:37:02'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/21/2023 23:37:02'!
PASSED!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/21/2023 23:38:15'!
testFalsoNegadoEsVerdadero

	Assert that: (Falso negado) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/21/2023 23:38:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/21/2023 23:38:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/21/2023 23:38:15'!
PASSED!

----SNAPSHOT----(22 March 2023 00:45:38) CuisUniversity-5706.image priorSource: 8714232!

----QUIT----(22 March 2023 00:46:23) CuisUniversity-5706.image priorSource: 8715789!

----STARTUP---- (23 March 2023 20:30:28) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!

!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 20:55:18'!
test01FalsoNegadoEsVerdadero

	Assert that: (Falso negado) isEqualTo: Verdadero! !

!methodRemoval: AlgebraDeBooleTests class #testFalsoNegadoEsVerdadero stamp: 'WAL 3/23/2023 20:55:18'!
testFalsoNegadoEsVerdadero

	Assert that: (Falso negado) isEqualTo: Verdadero!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 20:55:44'!
test02VerdaderoNegadoEsFalso

	Assert that: (Verdadero negado) isEqualTo: Falso! !

!methodRemoval: AlgebraDeBooleTests class #testVerdaderoNegadoEsFalso stamp: 'WAL 3/23/2023 20:55:44'!
testVerdaderoNegadoEsFalso

	Assert that: (Verdadero negado) isEqualTo: Falso!
!Verdadero class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 20:59:43'!
y: unBooleano

	^unBooleano! !
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:00:37'!
test03VerdaderoYFalsoEsFalso

	Assert that: (Verdadero y: Falso) isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:00:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:00:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:00:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:00:43'!
PASSED!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:01:15'!
test04VerdaderoYVerdaderoEsVerdadero

	Assert that: (Verdadero y: Verdadero) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:01:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:01:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:01:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:01:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:01:21'!
PASSED!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:02:24'!
test05FalsoYVerdaderoEsFalso

	Assert that: (Falso y: Verdadero) isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:02:24'!
ERROR!
!Falso class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:02:47'!
y: Verdadero 
	self shouldBeImplemented.! !
!Falso class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:04:52' prior: 50604103!
y: unBooleano

	^Falso! !
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:05:18'!
test06FalsoYFalsoEsFalso

	Assert that: (Falso y: Falso) isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:05:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:05:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:05:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:05:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:05:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:05:23'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:05:23'!
PASSED!
!Verdadero class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:06:03'!
o: unBooleano

	^Verdadero! !
!Falso class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:06:25'!
o: unBooleano

	^unBooleano! !
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:07:50'!
test07VerdaderoOFalsoEsVerdadero

	Assert that: (Verdadero o: Falso) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:07:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:07:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:07:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:07:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:07:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:07:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:07:50'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:07:50'!
PASSED!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:08:13'!
test08VerdaderoOVerdaderoEsVerdadero

	Assert that: (Verdadero o: Verdadero) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:13'!
PASSED!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:08:46'!
test09FalsoOFalsoEsFalso

	Assert that: (Falso o: Falso) isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:46'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:46'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:46'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:46'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:46'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:46'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:46'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:46'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:46'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:08:46'!
PASSED!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:09:37'!
test10FalsoOVerdaderoEsVerdadero

	Assert that: (Falso o: Verdadero) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:09:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:09:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:09:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:09:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:09:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:09:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:09:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:09:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:09:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:09:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:09:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:10:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:10:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:10:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:10:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:10:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:10:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:10:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:10:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:10:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:10:21'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/23/2023 21:10:21'!
PASSED!
!Verdadero class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:39:10'!
siEsVerdadero: unBloqueDeCodigo

	^unBloqueDeCodigo value! !
!Verdadero class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:40:41'!
siEsFalso: unBloqueDeCodigo

	! !

a:= [Verdadero no]!

a:= [True]!

a:= [True]!

a !

bloqueDeCodigo= [True] !

bloqueDeCodigo!

bloqueDeCodigo:= [True] !

bloqueDeCodigo:= [True] .!

bloqueDeCodigo  !

bloqueDeCodigo!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:48:32'!
test11VerdaderoSiEsVerdaderoEjecutar

	Assert that: (Verdadero siEsVerdadero: Verdadero) isEqualTo: Verdadero! !
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/23/2023 21:49:07' prior: 50604331!
test11VerdaderoSiEsVerdaderoEjecutar

	Assert that: (Verdadero siEsVerdadero: []) isEqualTo: Verdadero! !

----SNAPSHOT----(23 March 2023 22:20:04) CuisUniversity-5706.image priorSource: 8715879!

----STARTUP---- (25 March 2023 10:09:59) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!

!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:17:06' prior: 50604338!
test11VerdaderoSiEsVerdaderoEjecutar

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar +5 ].
	Verdadero siEsVerdaderoEjecutar bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3! !
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:19:17'!
test11VerdaderoSiEsVerdadero

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar +5 ].
	Verdadero siEsVerdaderoEjecutar bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3! !

!methodRemoval: AlgebraDeBooleTests class #test11VerdaderoSiEsVerdaderoEjecutar stamp: 'WAL 3/25/2023 10:19:17'!
test11VerdaderoSiEsVerdaderoEjecutar

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar +5 ].
	Verdadero siEsVerdaderoEjecutar bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:19:34' prior: 50604362!
test11VerdaderoSiEsVerdadero

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar +5 ].
	Verdadero siEsVerdadero bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3! !
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:21:12' prior: 50604385!
test11VerdaderoSiEsVerdadero

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar +5 ].
	Verdadero siEsVerdadero: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:21:35'!
ERROR!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:21:55' prior: 50604396!
test11VerdaderoSiEsVerdadero

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Verdadero siEsVerdadero: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:21:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:21:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:21:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:21:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:21:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:21:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:21:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:21:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:21:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:21:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:21:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:21:58'!
PASSED!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:22:55'!
test11VerdaderoSiEsFalso

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Verdadero siEsFalso: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 0! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:22:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:22:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:22:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:22:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:22:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:22:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:22:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:22:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:22:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:22:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:22:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:22:55'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:22:55'!
PASSED!
!Verdadero class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:23:26' prior: 50604321!
siEsFalso: unBloqueDeCodigo

	^self.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:23:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:23:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:23:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:23:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:23:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:23:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:23:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:23:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:23:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:23:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:23:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:23:56'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:23:56'!
PASSED!
!Falso class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:25:31'!
siEsFalso: bloqueDeCodigo

	bloqueDeCodigo value.
	^self.! !
!Falso class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:25:44'!
siEsVerdadero: bloqueDeCodigo

	^self.! !
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:27:58'!
test13FalsoSiEsFalso

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Verdadero siEsFalso: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3! !
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:28:05'!
test12VerdaderoSiEsVerdadero

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Verdadero siEsVerdadero: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3! !

!methodRemoval: AlgebraDeBooleTests class #test11VerdaderoSiEsVerdadero stamp: 'WAL 3/25/2023 10:28:05'!
test11VerdaderoSiEsVerdadero

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Verdadero siEsVerdadero: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:28:35'!
test14FalsoSiEsVerdadero

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Verdadero siEsFalso: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3! !
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:29:06' prior: 50604593!
test14FalsoSiEsVerdadero

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Verdadero siEsVerdadero: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 0! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:29:09'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:29:45'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:30:52'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:30:52'!
ERROR!

----SNAPSHOT----(25 March 2023 10:31:04) CuisUniversity-5706.image priorSource: 8726185!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:31:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:31:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:31:23'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:31:23'!
ERROR!
!Falso class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:31:47' prior: 50604550!
siEsFalso: bloqueDeCodigo

	^bloqueDeCodigo value.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:31:55'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:31:55'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:32:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:32:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:32:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:32:12'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:32:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:32:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:32:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:33:26'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:33:26'!
ERROR!
!Falso class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:34:59' prior: 50604641!
siEsFalso: bloqueDeCodigo

	^bloqueDeCodigo value! !
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:35:52' prior: 50604560!
test13FalsoSiEsFalso

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Falso siEsFalso: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3! !
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:35:59' prior: 50604604!
test14FalsoSiEsVerdadero

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Falso siEsVerdadero: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 0! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:04'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:36:07'!
PASSED!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:37:16'!
test11VerdaderoSiEsFalsoNoEjecutar

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Verdadero siEsFalso: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 0! !

!methodRemoval: AlgebraDeBooleTests class #test11VerdaderoSiEsFalso stamp: 'WAL 3/25/2023 10:37:16'!
test11VerdaderoSiEsFalso

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Verdadero siEsFalso: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 0!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:37:36'!
test12VerdaderoSiEsVerdaderoEjecutar

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Verdadero siEsVerdadero: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3! !

!methodRemoval: AlgebraDeBooleTests class #test12VerdaderoSiEsVerdadero stamp: 'WAL 3/25/2023 10:37:36'!
test12VerdaderoSiEsVerdadero

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Verdadero siEsVerdadero: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:37:44'!
test13FalsoSiEsFalsoEjecutar

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Falso siEsFalso: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3! !

!methodRemoval: AlgebraDeBooleTests class #test13FalsoSiEsFalso stamp: 'WAL 3/25/2023 10:37:44'!
test13FalsoSiEsFalso

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Falso siEsFalso: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 3!
!AlgebraDeBooleTests class methodsFor: 'as yet unclassified' stamp: 'WAL 3/25/2023 10:37:53'!
test14FalsoSiEsVerdaderoNoEjecutar

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Falso siEsVerdadero: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 0! !

!methodRemoval: AlgebraDeBooleTests class #test14FalsoSiEsVerdadero stamp: 'WAL 3/25/2023 10:37:53'!
test14FalsoSiEsVerdadero

	| bloqueDeCodigo objetoAModificar |
	objetoAModificar := 0.
	bloqueDeCodigo := [ objetoAModificar:= objetoAModificar + 3 ].
	Falso siEsVerdadero: bloqueDeCodigo.
	Assert that: objetoAModificar isEqualTo: 0!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 10:38:01'!
PASSED!

----SNAPSHOT----(25 March 2023 10:38:06) CuisUniversity-5706.image priorSource: 8735207!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 3/25/2023 11:16:37'!
PASSED!

ObjectBuilder create: #Andres asChildOf: DenotativeObject collaboratorNames: '' in: 'Personas'!

!classDefinition: #Andres category: 'Personas' stamp: 'WAL 3/25/2023 11:17:38'!
DenotativeObject subclass: #Andres
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Personas'!

!classDefinition: 'Andres class' category: 'Personas' stamp: 'WAL 3/25/2023 11:17:38'!
Andres class
	instanceVariableNames: ''!
!Andres class methodsFor: 'no messages' stamp: 'WAL 3/25/2023 11:18:31'!
saludar

	^'hola'! !

Andres saludar!

Andres saludar!

Verdadero y: Verdadero!

Verdadero y: Falso!

Andres saludar!

Andres saludar!

----SNAPSHOT----(25 March 2023 23:18:30) CuisUniversity-5706.image priorSource: 8743478!

----STARTUP---- (27 March 2023 19:55:56) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


ObjectBuilder create: #I
	collaboratorNames: ''
	in: 'Natural Numbers'
	!

!classDefinition: #I category: 'Natural Numbers' stamp: 'WAL 3/27/2023 20:01:35'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: 'I class' category: 'Natural Numbers' stamp: 'WAL 3/27/2023 20:01:35'!
I class
	instanceVariableNames: ''!

!classDefinition: #II category: 'Natural Numbers' stamp: 'WAL 3/27/2023 20:03:57'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!
!I class methodsFor: 'nil' stamp: 'WAL 3/27/2023 20:03:51'!
next
	^II.! !
!II class methodsFor: 'nil' stamp: 'WAL 3/27/2023 20:11:48'!
next
	^self cloneNamed: (self name + 'I')! !
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 20:12:12' prior: 50604981!
next
	^self cloneNamed: (self name + 'I')! !

II next!
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 20:14:28' prior: 50604986!
next
	^self cloneNamed: ((self name) appendToString: 'I')! !

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/27/2023 20:14:39'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: ''!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/27/2023 20:14:39'!
III class
	instanceVariableNames: ''!
!III class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 20:14:39'!
next
	^self cloneNamed: ((self name) appendToString: 'I')! !

II next!
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 20:16:17' prior: 50604991!
next
	^self cloneNamed: ((self name), 'I')! !

III next!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'WAL 3/27/2023 20:16:39'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: ''!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'WAL 3/27/2023 20:16:39'!
IIII class
	instanceVariableNames: ''!
!IIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 20:16:39'!
next
	^self cloneNamed: ((self name) appendToString: 'I')! !
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 20:27:56' prior: 50605018!
next
	| next |
	next ifNil: [
			next:= self cloneNamed: ((self name), 'I')
		].
	^next.
	! !

!classRemoval: #IIII stamp: 'WAL 3/27/2023 20:28:43'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 3/27/2023 20:28:51'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/27/2023 20:30:47'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: ''!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/27/2023 20:30:47'!
III class
	instanceVariableNames: ''!
!III class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 20:30:47'!
next
	| next |
	next ifNil: [
			next:= self cloneNamed: ((self name), 'I')
		].
	^next.
	! !

I next!
!I class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 20:40:36'!
+ aNaturalNumber
	^aNaturalNumber next.! !

II
	collaboratorNames: 'next previous'
	in: 'Natural Numbers'!

II
	collaboratorNames: 'next previous'
	in: 'Natural Numbers'!
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:05:43' prior: 50605044!
next
	| next |
	next ifNil: [
			next:= self cloneNamed: ((self name), 'I').
			next setPrevious: self.
		].
	^next.
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:07:25'!
setPrevious: aNaturalNumber
	| previous |
	previous := aNaturalNumber
	
	! !

II
	collaboratorNames: 'next previous'
	in: 'Natural Numbers'!
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:12:40'!
+ aNaturalNumber
	^self previous + aNaturalNumber next! !
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:21:13'!
previous: aNaturalNumber
	| previous |
	previous := aNaturalNumber
	
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:21:13' prior: 50605093!
next
	| next |
	next ifNil: [
			next:= self cloneNamed: ((self name), 'I').
			next previous: self.
		].
	^next.
	! !

!methodRemoval: II class #setPrevious: stamp: 'WAL 3/27/2023 21:21:13'!
setPrevious: aNaturalNumber
	| previous |
	previous := aNaturalNumber
	
	!

II
	collaboratorNames: 'next previous'
	in: 'Natural Numbers'!

II
	collaboratorNames: 'next'
	in: 'Natural Numbers'!

II
	collaboratorNames: 'next'
	in: 'Natural Numbers'!

----STARTUP---- (27 March 2023 21:30:52) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


----End fileIn of /home/a/s/sw/smalltalk/Natural Numbers.st----!

!classRemoval: #III stamp: 'WAL 3/27/2023 21:32:02'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

II
	collaboratorNames: 'next'
	in: 'Natural Numbers'!

!classDefinition: 'II class' category: 'Natural Numbers' stamp: 'WAL 3/27/2023 21:36:16'!
II class
	instanceVariableNames: 'next2'!
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:36:15' prior: 50605007!
next
	
	next2 ifNil: [
			next2:= self cloneNamed: ((self name), 'I').
			next2 previous: self.
		].
	^next2.
	! !

II
	collaboratorNames: 'next2 previous2'
	in: 'Natural Numbers'!

!classDefinition: 'II class' category: 'Natural Numbers' stamp: 'WAL 3/27/2023 21:37:39'!
II class
	instanceVariableNames: 'next2 previous2'!

!classDefinition: #II category: 'Natural Numbers' stamp: 'WAL 3/27/2023 21:37:39'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: 'II class' category: 'Natural Numbers' stamp: 'WAL 3/27/2023 21:37:39'!
II class
	instanceVariableNames: 'next2 previous2'!
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:37:54' prior: 50605014!
previous: aNaturalNumber
	previous2 := aNaturalNumber
	
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:38:12' prior: 50605057!
next
	next2 ifNil: [
			next2:= self cloneNamed: ((self name), 'I').
			next2 previous: self.
		].
	^next2.
	! !

I
	collaboratorNames: 'next'
	in: 'Natural Numbers'!

!classDefinition: 'I class' category: 'Natural Numbers' stamp: 'WAL 3/27/2023 21:38:27'!
I class
	instanceVariableNames: 'next'!

!classDefinition: #I category: 'Natural Numbers' stamp: 'WAL 3/27/2023 21:38:27'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: 'I class' category: 'Natural Numbers' stamp: 'WAL 3/27/2023 21:38:27'!
I class
	instanceVariableNames: 'next'!

I
	collaboratorNames: 'next2'
	in: 'Natural Numbers'!

!classDefinition: 'I class' category: 'Natural Numbers' stamp: 'WAL 3/27/2023 21:39:26'!
I class
	instanceVariableNames: 'next2'!

!classDefinition: #I category: 'Natural Numbers' stamp: 'WAL 3/27/2023 21:39:26'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: 'I class' category: 'Natural Numbers' stamp: 'WAL 3/27/2023 21:39:26'!
I class
	instanceVariableNames: 'next2'!
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:40:26'!
previous
	^previous2
	
	! !

I+I!

II+I!
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:44:21' prior: 50605002!
+ aNaturalNumber
	^previous2 + aNaturalNumber next! !

II+I!
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:45:01' prior: 50605132!
+ aNaturalNumber
	^self previous + aNaturalNumber next! !

II+I!

I+I!
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:45:43' prior: 50605137!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !

II+I!

II+I!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/27/2023 21:47:24'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next2 previous2'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/27/2023 21:47:24'!
III class
	instanceVariableNames: 'next2 previous2'!
!III class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:47:24'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:47:24'!
next
	next2 ifNil: [
			next2:= self cloneNamed: ((self name), 'I').
			next2 previous: self.
		].
	^next2.
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:47:24'!
previous
	^previous2
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:47:24'!
previous: aNaturalNumber
	previous2 := aNaturalNumber
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'WAL 3/27/2023 21:57:56'!
- aNaturalNumber
	(aNaturalNumber = I ) ifTrue: [^self previous]
	^self previous - aNaturalNumber previous.! !

----SNAPSHOT----(27 March 2023 22:02:42) CuisUniversity-5706.image priorSource: 8745670!

----STARTUP---- (28 March 2023 19:42:40) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!classRemoval: #III stamp: 'WAL 3/28/2023 19:42:58'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #II stamp: 'WAL 3/28/2023 19:42:58'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #I stamp: 'WAL 3/28/2023 19:42:59'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #Andres stamp: 'WAL 3/28/2023 19:43:05'!
DenotativeObject subclass: #Andres
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Personas'!

----End fileIn of /home/a/s/sw/smalltalk/3 Natural Numbers Peano Ayudante.st----!

II+I!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classDefinition: #III category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:47:29'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:47:29'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:47:29'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:47:29'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:29'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:29'!
previous
	^previous.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:29'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:29'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

II+I!

II+II!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classDefinition: #IIII category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:47:38'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:47:38'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:47:38'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:47:38'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:38'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:38'!
previous
	^previous.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:38'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:38'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

II+IIII!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classDefinition: #IIIII category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:47:45'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:47:45'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:47:45'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:47:45'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self.! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:45'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:45'!
previous
	^previous.! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:45'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:45'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classDefinition: #IIIIII category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:47:45'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:47:45'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:47:45'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:47:45'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self.! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:45'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:45'!
previous
	^previous.! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:45'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:47:45'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

IIIIII+IIIIII!

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classDefinition: #IIIIIII category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:48:14'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:48:14'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:48:14'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:48:14'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self.! !
!IIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
previous
	^previous.! !
!IIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classDefinition: #IIIIIIII category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:48:14'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

IIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIII class' category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:48:14'!
IIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:48:14'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:48:14'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self.! !
!IIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
previous
	^previous.! !
!IIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classDefinition: #IIIIIIIII category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:48:14'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

IIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIII class' category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:48:14'!
IIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:48:14'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:48:14'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self.! !
!IIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
previous
	^previous.! !
!IIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classDefinition: #IIIIIIIIII category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:48:14'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

IIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIII class' category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:48:14'!
IIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:48:14'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:48:14'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self.! !
!IIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
previous
	^previous.! !
!IIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classDefinition: #IIIIIIIIIII category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:48:14'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

IIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIII class' category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:48:14'!
IIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:48:14'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:48:14'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self.! !
!IIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
previous
	^previous.! !
!IIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classDefinition: #IIIIIIIIIIII category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:48:14'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIII class' category: 'PeanoCloning' stamp: 'WAL 3/28/2023 19:48:14'!
IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:48:14'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 19:48:14'!
- aNaturalNumber
	^aNaturalNumber subtractFrom: self.! !
!IIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
previous
	^previous.! !
!IIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
previous: aNaturalNumber
	previous:=aNaturalNumber.! !
!IIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 19:48:14'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !

!classRemoval: #IIIIIIIIIIII stamp: 'WAL 3/28/2023 19:50:05'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classRemoval: #IIIIIIIIIII stamp: 'WAL 3/28/2023 19:50:06'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classRemoval: #IIIIIIIIII stamp: 'WAL 3/28/2023 19:50:06'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classRemoval: #IIIIIIIII stamp: 'WAL 3/28/2023 19:50:06'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classRemoval: #IIIIIIII stamp: 'WAL 3/28/2023 19:50:06'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classRemoval: #IIIIIII stamp: 'WAL 3/28/2023 19:50:06'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classRemoval: #IIIIII stamp: 'WAL 3/28/2023 19:50:06'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classRemoval: #IIIII stamp: 'WAL 3/28/2023 19:50:07'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classRemoval: #IIII stamp: 'WAL 3/28/2023 19:50:07'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classRemoval: #III stamp: 'WAL 3/28/2023 19:50:07'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classRemoval: #II stamp: 'WAL 3/28/2023 19:50:07'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

!classRemoval: #I stamp: 'WAL 3/28/2023 19:50:07'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'PeanoCloning'!

----End fileIn of /home/a/s/sw/smalltalk/3 Natural Numbers Peano Ayudante.st----!

----STARTUP---- (28 March 2023 19:33:36) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!classRemoval: #III stamp: 'WAL 3/28/2023 19:56:43'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:00:24'!
substractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous
	
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:03:22'!
- aNaturalNumber
	^aNaturalNumber substractFrom: self! !
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:08:06' prior: 50605082!
previous: aNaturalNumber
	previous2 := aNaturalNumber.
	
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:10:16' prior: 50605087!
next
	next2 ifNil: [
		next2:= self cloneNamed: ((self name), 'I').
		next2 previous: self.
	].
	^next2.
	! !
!II class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 20:10:21' prior: 50605943!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
	].
	
	^next.! !

I
	collaboratorNames: ''
	in: 'Natural Numbers'!

!classDefinition: 'I class' category: 'Natural Numbers' stamp: 'WAL 3/28/2023 20:11:33'!
I class
	instanceVariableNames: ''!

!classDefinition: #I category: 'Natural Numbers' stamp: 'WAL 3/28/2023 20:11:33'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: 'I class' category: 'Natural Numbers' stamp: 'WAL 3/28/2023 20:11:33'!
I class
	instanceVariableNames: ''!
!I class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:12:42'!
substractFrom: aNaturalNumber
	^aNaturalNumber previous.! !
!II class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 20:13:23'!
substractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.! !
!I class methodsFor: 'private' stamp: 'WAL 3/28/2023 20:13:23'!
substractFrom: aNaturalNumber
	^aNaturalNumber previous.! !
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:13:23' prior: 50605938!
- aNaturalNumber
	^aNaturalNumber substractFrom: self.! !

!methodRemoval: II class #subtractFrom: stamp: 'WAL 3/28/2023 20:13:23'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous.!

!methodRemoval: I class #subtractFrom: stamp: 'WAL 3/28/2023 20:13:23'!
subtractFrom: aNaturalNumber
	^aNaturalNumber previous.!

!classDefinition: 'II class' category: 'Natural Numbers' stamp: 'WAL 3/28/2023 20:14:47'!
II class
	instanceVariableNames: 'next previous2'!
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:14:47' prior: 50606006!
next
	next ifNil: [
		next:= self cloneNamed: ((self name), 'I').
		next previous: self.
	].
	^next.
	! !

!classDefinition: 'II class' category: 'Natural Numbers' stamp: 'WAL 3/28/2023 20:15:03'!
II class
	instanceVariableNames: 'next previous'!
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:15:03' prior: 50605127!
previous
	^previous
	
	! !
!II class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:15:03' prior: 50606001!
previous: aNaturalNumber
	previous := aNaturalNumber.
	
	! !

II+I!

II+I!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/28/2023 20:16:18'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/28/2023 20:16:18'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:16:18'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:16:18'!
- aNaturalNumber
	^aNaturalNumber substractFrom: self! !
!III class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:16:18'!
next
	next ifNil: [
		next:= self cloneNamed: ((self name), 'I').
		next previous: self.
	].
	^next.
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:16:18'!
previous
	^previous
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:16:18'!
previous: aNaturalNumber
	previous := aNaturalNumber.
	
	! !
!III class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:16:18'!
substractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous
	
	! !

III-II!

I-II!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'WAL 3/28/2023 20:18:15'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'WAL 3/28/2023 20:18:15'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:18:15'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:18:15'!
- aNaturalNumber
	^aNaturalNumber substractFrom: self! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:18:15'!
next
	next ifNil: [
		next:= self cloneNamed: ((self name), 'I').
		next previous: self.
	].
	^next.
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:18:15'!
previous
	^previous
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:18:15'!
previous: aNaturalNumber
	previous := aNaturalNumber.
	
	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:18:15'!
substractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous
	
	! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIII category: 'Natural Numbers' stamp: 'WAL 3/28/2023 20:19:11'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Natural Numbers' stamp: 'WAL 3/28/2023 20:19:11'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:19:11'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:19:11'!
- aNaturalNumber
	^aNaturalNumber substractFrom: self! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:19:11'!
next
	next ifNil: [
		next:= self cloneNamed: ((self name), 'I').
		next previous: self.
	].
	^next.
	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:19:11'!
previous
	^previous
	
	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:19:11'!
previous: aNaturalNumber
	previous := aNaturalNumber.
	
	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:19:11'!
substractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous
	
	! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIII category: 'Natural Numbers' stamp: 'WAL 3/28/2023 20:19:23'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/28/2023 20:19:23'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:19:23'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:19:23'!
- aNaturalNumber
	^aNaturalNumber substractFrom: self! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:19:23'!
next
	next ifNil: [
		next:= self cloneNamed: ((self name), 'I').
		next previous: self.
	].
	^next.
	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:19:23'!
previous
	^previous
	
	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:19:23'!
previous: aNaturalNumber
	previous := aNaturalNumber.
	
	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'WAL 3/28/2023 20:19:23'!
substractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous
	
	! !

----SNAPSHOT----(28 March 2023 20:22:09) CuisUniversity-5706.image priorSource: 8753326!

!classRemoval: #IIIIII stamp: 'WAL 3/28/2023 20:22:31'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIII stamp: 'WAL 3/28/2023 20:22:41'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIII stamp: 'WAL 3/28/2023 20:22:43'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 3/28/2023 20:22:45'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #Andres stamp: 'WAL 3/28/2023 20:30:41'!
DenotativeObject subclass: #Andres
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Personas'!

----SNAPSHOT----(28 March 2023 20:30:44) CuisUniversity-5706.image priorSource: 8788110!
!I class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 20:46:30'!
* aNaturalNumber
	^aNaturalNumber.! !

I*II!

I*I!

----SNAPSHOT----(28 March 2023 20:47:05) CuisUniversity-5706.image priorSource: 8789156!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 20:51:18'!
* aNaturalNumber
	^self previous + aNaturalNumber next.! !
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:12:55' prior: 50606322!
* aNaturalNumber
	
	^ (self + (self * aNaturalNumber previous)).! !

II*II!

II*I!

II*I!

II*II!

II+II!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:22:40' prior: 50606327!
* aNaturalNumber
	(aNaturalNumber = I) ifTrue: [
		^ self .
	]
	^ (self + (self * aNaturalNumber previous)).! !

II+II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/28/2023 21:22:43'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/28/2023 21:22:43'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:22:43'!
next
	next ifNil: [
		next:= self cloneNamed: ((self name), 'I').
		next previous: self.
	].
	^next.
	! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:22:43'!
previous
	^previous
	
	! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:22:43'!
previous: aNaturalNumber
	previous := aNaturalNumber.
	
	! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:22:43'!
substractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous
	
	! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:22:43'!
* aNaturalNumber
	(aNaturalNumber = I) ifTrue: [
		^ self .
	]
	^ (self + (self * aNaturalNumber previous)).! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:22:43'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:22:43'!
- aNaturalNumber
	^aNaturalNumber substractFrom: self! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'WAL 3/28/2023 21:22:43'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'WAL 3/28/2023 21:22:43'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:22:43'!
next
	next ifNil: [
		next:= self cloneNamed: ((self name), 'I').
		next previous: self.
	].
	^next.
	! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:22:43'!
previous
	^previous
	
	! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:22:43'!
previous: aNaturalNumber
	previous := aNaturalNumber.
	
	! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:22:43'!
substractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous
	
	! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:22:43'!
* aNaturalNumber
	(aNaturalNumber = I) ifTrue: [
		^ self .
	]
	^ (self + (self * aNaturalNumber previous)).! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:22:43'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:22:43'!
- aNaturalNumber
	^aNaturalNumber substractFrom: self! !

II*II!

II*II!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:25:22' prior: 50606334!
* aNaturalNumber
	(aNaturalNumber = I) ifTrue: [
		^ self .
	].
	(aNaturalNumber = I) ifFalse: [
		^ (self + (self * aNaturalNumber previous)).
	]! !

II*II!

III*III!

III*III!

III*II!
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:27:49' prior: 50606379!
* aNaturalNumber
		(aNaturalNumber = I) ifTrue: [
		^ self .
	].
	(aNaturalNumber = I) ifFalse: [
		^ (self + (self * aNaturalNumber previous)).
	]! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:27:55' prior: 50606433!
* aNaturalNumber
	(aNaturalNumber = I) ifTrue: [
		^ self .
	].
	(aNaturalNumber = I) ifFalse: [
		^ (self + (self * aNaturalNumber previous)).
	]! !

III*II!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIII category: 'Natural Numbers' stamp: 'WAL 3/28/2023 21:28:00'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Natural Numbers' stamp: 'WAL 3/28/2023 21:28:00'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:28:00'!
next
	next ifNil: [
		next:= self cloneNamed: ((self name), 'I').
		next previous: self.
	].
	^next.
	! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:28:00'!
previous
	^previous
	
	! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:28:00'!
previous: aNaturalNumber
	previous := aNaturalNumber.
	
	! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:28:00'!
substractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous
	
	! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:28:00'!
* aNaturalNumber
	(aNaturalNumber = I) ifTrue: [
		^ self .
	].
	(aNaturalNumber = I) ifFalse: [
		^ (self + (self * aNaturalNumber previous)).
	]! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:28:00'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:28:00'!
- aNaturalNumber
	^aNaturalNumber substractFrom: self! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIII category: 'Natural Numbers' stamp: 'WAL 3/28/2023 21:28:00'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/28/2023 21:28:00'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:28:00'!
next
	next ifNil: [
		next:= self cloneNamed: ((self name), 'I').
		next previous: self.
	].
	^next.
	! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:28:00'!
previous
	^previous
	
	! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:28:00'!
previous: aNaturalNumber
	previous := aNaturalNumber.
	
	! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 21:28:00'!
substractFrom: aNaturalNumber
	^aNaturalNumber previous - self previous
	
	! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:28:00'!
* aNaturalNumber
	(aNaturalNumber = I) ifTrue: [
		^ self .
	].
	(aNaturalNumber = I) ifFalse: [
		^ (self + (self * aNaturalNumber previous)).
	]! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:28:00'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:28:00'!
- aNaturalNumber
	^aNaturalNumber substractFrom: self! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 21:29:22' prior: 50606460!
* aNaturalNumber
	(aNaturalNumber = I) ifTrue: [
		^ self .
	].
	(aNaturalNumber = I) ifFalse: [
		^ (self + (self * aNaturalNumber previous)).
	]! !

----SNAPSHOT----(28 March 2023 22:16:46) CuisUniversity-5706.image priorSource: 8789394!

!classRemoval: #IIIIII stamp: 'WAL 3/28/2023 22:18:44'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIII stamp: 'WAL 3/28/2023 22:18:57'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIII stamp: 'WAL 3/28/2023 22:19:03'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 3/28/2023 22:19:08'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!
!I class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 22:19:29' prior: 50606035!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous.! !
!I class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 22:19:36' prior: 50606315!
* aNaturalNumber
	^ aNaturalNumber.! !
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 22:22:43' prior: 50606451!
* aNaturalNumber
	aNaturalNumber = I ifTrue: [ ^ self ].
	aNaturalNumber = I ifFalse: [ ^ self + (self * aNaturalNumber previous) ].! !
!II class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 22:23:13' prior: 50606083!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!II class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/28/2023 22:23:31' prior: 50605991!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/28/2023 22:23:53' prior: 50605996!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

----SNAPSHOT----(29 March 2023 09:41:14) CuisUniversity-5706.image priorSource: 8753416!

----SNAPSHOT----(29 March 2023 09:41:30) CuisUniversity-5706.image priorSource: 8755386!

----STARTUP---- (29 March 2023 19:31:45) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!

!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:32:30' prior: 50605233!
* aNaturalNumber
	^ self previous + (self * aNaturalNumber ) .! !

II*II!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:34:02' prior: 50605266!
* aNaturalNumber
	^ self previous  * aNaturalNumber + aNaturalNumber .! !

II*II!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:35:47' prior: 50605272!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !

II*II!

II*II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:26'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:26'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:26'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:26'!
previous
	^ previous.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:26'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:26'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:26'!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:26'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:26'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:26'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:26'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:26'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:26'!
previous
	^ previous.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:26'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:26'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:26'!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:26'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:26'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

IIII*IIII!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous
	^ previous.! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous
	^ previous.! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!IIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous
	^ previous.! !
!IIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
IIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!IIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous
	^ previous.! !
!IIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !
!IIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
IIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!IIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous
	^ previous.! !
!IIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !
!IIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
IIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!IIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous
	^ previous.! !
!IIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !
!IIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
IIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!IIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous
	^ previous.! !
!IIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !
!IIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!IIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous
	^ previous.! !
!IIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !
!IIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
IIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!IIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous
	^ previous.! !
!IIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !
!IIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
IIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!IIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous
	^ previous.! !
!IIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:40'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !
!IIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:40'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:40'!
DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:41'!
IIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:41'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!IIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:41'!
previous
	^ previous.! !
!IIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:41'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:41'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:41'!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !
!IIIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:41'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:41'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIIIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:41'!
DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 19:36:41'!
IIIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:41'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!IIIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:41'!
previous
	^ previous.! !
!IIIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:41'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 19:36:41'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:41'!
* aNaturalNumber
	^ (self previous  * aNaturalNumber) + aNaturalNumber .! !
!IIIIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:41'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:36:41'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

!classRemoval: #IIIIIIIIIIIIIIII stamp: 'WAL 3/29/2023 19:36:58'!
DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIIIIIIIIII stamp: 'WAL 3/29/2023 19:36:59'!
DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIIIIIIIII stamp: 'WAL 3/29/2023 19:37:01'!
DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIIIIIIII stamp: 'WAL 3/29/2023 19:37:03'!
DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIIIIIII stamp: 'WAL 3/29/2023 19:37:05'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIIIIII stamp: 'WAL 3/29/2023 19:37:07'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIIIII stamp: 'WAL 3/29/2023 19:37:13'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIIII stamp: 'WAL 3/29/2023 19:37:15'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIII stamp: 'WAL 3/29/2023 19:37:17'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIII stamp: 'WAL 3/29/2023 19:37:18'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIII stamp: 'WAL 3/29/2023 19:37:21'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIII stamp: 'WAL 3/29/2023 19:37:23'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIII stamp: 'WAL 3/29/2023 19:37:25'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 3/29/2023 19:37:27'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

I-II!

self name!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:24:20'!
/ aNaturalNumber
	( self name size > aNaturalNumber name size ) ifTrue: [
		^ (( self - aNaturalNumber ) / aNaturalNumber )+ I .
	]! !
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:24:48' prior: 50606151!
/ aNaturalNumber
	( self name size > aNaturalNumber name size ) ifTrue: [
		^ (( self - aNaturalNumber ) / aNaturalNumber ) + I .
	]! !
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:26:06' prior: 50606159!
/ aNaturalNumber
	( self name size > aNaturalNumber name size ) ifTrue: [
		^ (( self - aNaturalNumber ) / aNaturalNumber ) + I .
	].! !

II/I!
!I class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:28:54'!
/ aNaturalNumber
	( I = I ) ifTrue: [
		^  I .
	].! !

II/I!

II*II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:29:10'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:29:10'!
III class
	instanceVariableNames: 'next previous'!

----STARTUP---- (29 March 2023 21:30:23) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!

!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:32:30' prior: 50605233!
* aNaturalNumber
	^ self previous + (self * aNaturalNumber ) .! !

II*II!

II*II!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:32:54' prior: 50606200!
* aNaturalNumber
	^ (self previous * aNaturalNumber) + aNaturalNumber.! !

II*II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:32:56'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:32:57'!
III class
	instanceVariableNames: 'next previous'!

----STARTUP---- (29 March 2023 21:34:03) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!

!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 19:32:30' prior: 50605233!
* aNaturalNumber
	^ self previous + (self * aNaturalNumber ) .! !
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:35:04' prior: 50606232!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !

----SNAPSHOT----(29 March 2023 21:35:13) CuisUniversity-5706.image priorSource: 8755476!

----STARTUP---- (29 March 2023 21:35:24) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


----SNAPSHOT----(29 March 2023 21:35:51) CuisUniversity-5706.image priorSource: 8786956!

II*II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:35:59'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:35:59'!
III class
	instanceVariableNames: 'next previous'!

----STARTUP---- (29 March 2023 21:37:14) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:37:19'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:37:19'!
III class
	instanceVariableNames: 'next previous'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:37:19'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:37:19'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:37:19'!
III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:37:19'!
III class
	instanceVariableNames: 'next previous'!

!classRemoval: #III stamp: 'WAL 3/29/2023 21:37:37'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!
!II class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:38:53' prior: 50606079!
previous
	^previous! !
!II class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:39:30' prior: 50606068!
next
	^next! !

----STARTUP---- (29 March 2023 21:39:38) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!classRemoval: #II stamp: 'WAL 3/29/2023 21:39:47'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #I stamp: 'WAL 3/29/2023 21:39:47'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

----End fileIn of /home/a/s/sw/smalltalk/3 Natural Numbers Peano Ayudante.st----!
!II class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:41:10' prior: 50606323!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
	].
	
	^next.! !

----SNAPSHOT----(29 March 2023 21:43:14) CuisUniversity-5706.image priorSource: 8787142!

II*II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:43:23'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:43:23'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:43:23'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:43:23'!
previous
	^previous! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:43:23'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:43:23'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:43:23'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:43:23'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:43:23'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:43:23'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:43:23'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:43:23'!
next
	next ifNil: [
		next _ self cloneNamed: self name , 'I'.
		next previous: self ].
	^ next.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:43:23'!
previous
	^previous! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:43:23'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:43:23'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:43:23'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:43:23'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:43:23'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !

!classRemoval: #IIII stamp: 'WAL 3/29/2023 21:43:36'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 3/29/2023 21:43:40'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:45:18'!
/ aNaturalNumber
	^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.! !

----SNAPSHOT----(29 March 2023 21:45:22) CuisUniversity-5706.image priorSource: 8789614!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:46:07' prior: 50606446!
/ aNaturalNumber
	
	^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.! !
!I class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:50:21'!
/ aNaturalNumber
	aNaturalNumber = I ifTrue: [
		^ I.
	]! !

----SNAPSHOT----(29 March 2023 21:50:31) CuisUniversity-5706.image priorSource: 8793611!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:53:50' prior: 50606455!
/ aNaturalNumber
	( (self name size) >= (aNaturalNumber name size) ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	]! !

----SNAPSHOT----(29 March 2023 21:53:54) CuisUniversity-5706.image priorSource: 8794043!

II*II!

----SNAPSHOT----(29 March 2023 21:54:24) CuisUniversity-5706.image priorSource: 8794381!

II*II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:54:27'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:54:28'!
III class
	instanceVariableNames: 'next previous'!

!classRemoval: #III stamp: 'WAL 3/29/2023 21:55:11'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!
!II class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:56:18' prior: 50606439!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !

----SNAPSHOT----(29 March 2023 21:56:35) CuisUniversity-5706.image priorSource: 8794479!

II*II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:56:39'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:56:39'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:56:39'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:56:39'!
previous
	^previous! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:56:39'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:56:39'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:56:39'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:56:39'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:56:39'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:56:39'!
/ aNaturalNumber
	( (self name size) >= (aNaturalNumber name size) ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:56:39'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 21:56:39'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:56:39'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:56:39'!
previous
	^previous! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:56:39'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 21:56:39'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:56:39'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:56:39'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:56:39'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 21:56:39'!
/ aNaturalNumber
	( (self name size) >= (aNaturalNumber name size) ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	]! !

----SNAPSHOT----(29 March 2023 21:57:18) CuisUniversity-5706.image priorSource: 8795530!

II/I!

III/I II !

III/I!

II/I!

IIII/II!

IIII/II!

!classRemoval: #IIII stamp: 'WAL 3/29/2023 21:59:59'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 3/29/2023 22:00:03'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:01:44' prior: 50606468!
/ aNaturalNumber
	( (self name size) >= (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	]! !

----SNAPSHOT----(29 March 2023 22:02:12) CuisUniversity-5706.image priorSource: 8799533!

II*II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 22:02:18'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 22:02:18'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:02:18'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:02:18'!
previous
	^previous! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:02:18'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:02:18'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:02:18'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:02:18'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:02:18'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:02:18'!
/ aNaturalNumber
	( (self name size) >= (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 22:02:18'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 22:02:18'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:02:18'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:02:18'!
previous
	^previous! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:02:18'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:02:18'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:02:18'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:02:18'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:02:18'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:02:18'!
/ aNaturalNumber
	( (self name size) >= (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	]! !

IIII/I!

III/I !

II/I !

I/I  !

IIII/II!

III/II!

III/III!
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:04:21' prior: 50606778!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	]! !

!classRemoval: #IIII stamp: 'WAL 3/29/2023 22:04:28'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 3/29/2023 22:04:33'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:04:40' prior: 50606653!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	]! !

II*II!

II*II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 22:05:13'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 22:05:14'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:05:14'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:05:14'!
previous
	^previous! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:05:14'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:05:14'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:05:14'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:05:14'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:05:14'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:05:14'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 22:05:14'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 22:05:14'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:05:14'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:05:14'!
previous
	^previous! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:05:14'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:05:14'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:05:14'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:05:14'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:05:14'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:05:14'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	]! !

----SNAPSHOT----(29 March 2023 22:05:22) CuisUniversity-5706.image priorSource: 8800314!

II/II!

II/I!

II/II!

aNaturalNumber name size!

self name size!

!classRemoval: #IIII stamp: 'WAL 3/29/2023 22:07:48'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 3/29/2023 22:07:59'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:10:11' prior: 50606808!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].
	( (self name size) > (aNaturalNumber name size) ) ifFalse: [
		^ nil	
	]	! !

I+II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 22:10:39'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 22:10:39'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:10:39'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:10:39'!
previous
	^previous! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:10:40'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:10:40'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:10:40'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:10:40'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:10:40'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:10:40'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].
	( (self name size) > (aNaturalNumber name size) ) ifFalse: [
		^ nil	
	]	! !

III/II!
!I class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:11:18' prior: 50606460!
/ aNaturalNumber
	aNaturalNumber = I ifTrue: [
		^ I.
	].
	aNaturalNumber = I ifFalse: [
		^ nil.
	].! !

III/II!

I/II!

III/I!

II/I  !

I/I !

III/II!

I+III!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 22:35:16'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 22:35:16'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:35:16'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:35:16'!
previous
	^previous! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:35:16'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 22:35:16'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:35:16'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:35:16'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:35:16'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:35:16'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].
	( (self name size) > (aNaturalNumber name size) ) ifFalse: [
		^ nil	
	]	! !

IIII/II!

III/II!

!classRemoval: #IIII stamp: 'WAL 3/29/2023 22:36:13'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 3/29/2023 22:36:17'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 22:37:23' prior: 50606956!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

II+II!

II+II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:26:34'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:26:34'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:26:34'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:26:34'!
previous
	^previous! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:26:34'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:26:34'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:26:34'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:26:34'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:26:34'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:26:34'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:26:34'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:26:34'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:26:34'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:26:34'!
previous
	^previous! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:26:34'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:26:34'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:26:34'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:26:34'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:26:34'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:26:34'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

II/II!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:29:31' prior: 50607116!
/ aNaturalNumber
	"( (self name size) > (aNaturalNumber name size) ) ifTrue: ["
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	"].	"! !

II/II!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:29:46' prior: 50607249!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:31:19' prior: 50607258!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	].	! !

II/II!

IIII/II !
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:32:17' prior: 50607266!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	].
	( (self name size) > (aNaturalNumber name size) ) ifFalse: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ).
	].	! !

IIII/II!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:32:54' prior: 50607275!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	].	! !

IIII/II!

IIII/I !

IIII*IIII!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:54'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:54'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:54'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:54'!
previous
	^previous! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:54'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:54'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:54'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:54'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:54'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:54'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:54'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous
	^previous! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous
	^previous! !
!IIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
IIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous
	^previous! !
!IIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
IIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous
	^previous! !
!IIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
IIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous
	^previous! !
!IIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
IIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous
	^previous! !
!IIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous
	^previous! !
!IIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
IIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous
	^previous! !
!IIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
IIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous
	^previous! !
!IIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
IIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous
	^previous! !
!IIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIIIIIIIIIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:35:55'!
IIIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous
	^previous! !
!IIIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIIIIIIIIIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:35:55'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIIIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIIIIIIIIIIIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:35:55'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (aNaturalNumber substractFrom: self )  /  aNaturalNumber ) + I.
	].	! !

IIIIIIIIIIIIIIII/IIII!

IIIIIIIII/III!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:39:19' prior: 50607287!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	].
	( (self name size) = (aNaturalNumber name size) ) ifTrue: [
		^ I.
	].! !

!classRemoval: #IIIIIIIIIIIIIIII stamp: 'WAL 3/29/2023 23:39:28'!
DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIIIIIIIIII stamp: 'WAL 3/29/2023 23:39:30'!
DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIIIIIIIII stamp: 'WAL 3/29/2023 23:39:32'!
DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIIIIIIII stamp: 'WAL 3/29/2023 23:39:34'!
DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIIIIIII stamp: 'WAL 3/29/2023 23:39:36'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIIIIII stamp: 'WAL 3/29/2023 23:39:39'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIIIII stamp: 'WAL 3/29/2023 23:39:41'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIIII stamp: 'WAL 3/29/2023 23:39:42'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIIII stamp: 'WAL 3/29/2023 23:39:45'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIIII stamp: 'WAL 3/29/2023 23:39:48'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIIII stamp: 'WAL 3/29/2023 23:39:51'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIII stamp: 'WAL 3/29/2023 23:39:57'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIII stamp: 'WAL 3/29/2023 23:40:00'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 3/29/2023 23:40:04'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

----SNAPSHOT----(29 March 2023 23:40:25) CuisUniversity-5706.image priorSource: 8809209!

II*II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:40:36'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:40:36'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:40:36'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:40:36'!
previous
	^previous! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:40:36'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:40:36'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:40:36'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:40:36'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:40:36'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:40:36'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	].
	( (self name size) = (aNaturalNumber name size) ) ifTrue: [
		^ I.
	].! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:40:36'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:40:36'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:40:36'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:40:36'!
previous
	^previous! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:40:36'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:40:36'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:40:36'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:40:36'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:40:36'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:40:36'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	].
	( (self name size) = (aNaturalNumber name size) ) ifTrue: [
		^ I.
	].! !

IIII/II!

III+II!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:41:00'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:41:01'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:41:01'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:41:01'!
previous
	^previous! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:41:01'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:41:01'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:41:01'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:41:01'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:41:01'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:41:01'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	].
	( (self name size) = (aNaturalNumber name size) ) ifTrue: [
		^ I.
	].! !

IIII/III!

IIII/II!

IIII/I!

IIIII+I!

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIIIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:45:27'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:45:27'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:45:27'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:45:27'!
previous
	^previous! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:45:27'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIIIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:45:27'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:45:27'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:45:27'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:45:27'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIIIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:45:27'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	].
	( (self name size) = (aNaturalNumber name size) ) ifTrue: [
		^ I.
	].! !

IIIIII/II!

IIIIII/III !

!classRemoval: #IIIIII stamp: 'WAL 3/29/2023 23:47:33'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIIII stamp: 'WAL 3/29/2023 23:47:37'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #IIII stamp: 'WAL 3/29/2023 23:47:39'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 3/29/2023 23:47:42'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:48:47' prior: 50608072!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	].
	( self  = aNaturalNumber ) ifTrue: [
		^ I.
	].! !

II*II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:48:54'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:48:54'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:48:54'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:48:54'!
previous
	^previous! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:48:54'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!III class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:48:54'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:48:54'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:48:54'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:48:54'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!III class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:48:54'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	].
	( self  = aNaturalNumber ) ifTrue: [
		^ I.
	].! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:48:54'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'WAL 3/29/2023 23:48:54'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:48:54'!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:48:54'!
previous
	^previous! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:48:54'!
previous: aNaturalNumber
	previous := aNaturalNumber.! !
!IIII class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/29/2023 23:48:54'!
substractFrom: aNaturalNumber
	^ aNaturalNumber previous - self previous.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:48:54'!
* aNaturalNumber
	^ (self previous * aNaturalNumber )  + aNaturalNumber .! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:48:54'!
+ aNaturalNumber
	^self previous + aNaturalNumber next.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:48:54'!
- aNaturalNumber
	^ aNaturalNumber substractFrom: self.! !
!IIII class methodsFor: 'arithmetic operations' stamp: 'WAL 3/29/2023 23:48:54'!
/ aNaturalNumber
	( (self name size) > (aNaturalNumber name size) ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	].
	( self  = aNaturalNumber ) ifTrue: [
		^ I.
	].! !

IIII/II!

----SNAPSHOT----(29 March 2023 23:55:47) CuisUniversity-5706.image priorSource: 8848609!

----SNAPSHOT----(29 March 2023 23:55:57) CuisUniversity-5706.image priorSource: 8862024!

----STARTUP---- (30 March 2023 18:47:10) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


ObjectBuilder create: #Semaforo asChildOf: DenotativeObject collaboratorNames: '' in: 'Semaforo'!

!classDefinition: #Semaforo category: 'Semaforo' stamp: 'WAL 3/30/2023 18:50:25'!
DenotativeObject subclass: #Semaforo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

!classDefinition: 'Semaforo class' category: 'Semaforo' stamp: 'WAL 3/30/2023 18:50:25'!
Semaforo class
	instanceVariableNames: ''!

!classRenamed: #Semaforo as: #SemaforoDeMaipuYCorrientes stamp: 'WAL 3/30/2023 18:53:41'!
Smalltalk renameClassNamed: #Semaforo as: #SemaforoDeMaipuYCorrientes!
!SemaforoDeMaipuYCorrientes class methodsFor: 'nil' stamp: 'WAL 3/30/2023 19:38:26'!
avisarPrecaucionPorEncendido

	5 timesRepeat: [ self titilarLuzAmarilla ]! !

!classRemoval: #SemaforoDeMaipuYCorrientes stamp: 'WAL 3/30/2023 19:58:22'!
DenotativeObject subclass: #SemaforoDeMaipuYCorrientes
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!
!I class methodsFor: 'arithmetic operations' stamp: 'WAL 3/30/2023 20:46:50' prior: 50607031!
/ aNaturalNumber
	aNaturalNumber = I ifTrue: [
		^ I.
	].
	aNaturalNumber = I ifFalse: [
		^ nil.
	].
	"^aNaturalNumber timesDivideTo: self "! !
!II class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/30/2023 21:30:17' prior: 50606505!
next
	next ifNil: [
		next := self cloneNamed: self name, 'I'. 
		next previous: self.		
	].
	
	^next.! !
!II class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/30/2023 21:34:29' prior: 50608638!
next
	next ifNil: [
		next := self createChildNamed: self name, 'I'. 
		next previous: self.		
	].
	
	^next.! !
!II class methodsFor: 'private auxiliary operations' stamp: 'WAL 3/30/2023 21:39:30' prior: 50608645!
next
	next ifNil: [
		next := II createChildNamed: self name, 'I'. 
		next previous: self.		
	].
	
	^next.! !

!classRemoval: #IIII stamp: 'WAL 3/30/2023 21:40:27'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 3/30/2023 21:40:31'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

----STARTUP---- (2 April 2023 17:53:54) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!

!II class methodsFor: 'private auxiliary operations' stamp: 'WAL 4/2/2023 17:57:34' prior: 50606505!
next
	next ifNil: [
		next := II createChildNamed: self name, 'I'. 
		next previous: self.		
		].
	
	^next.! !

!classRemoval: #IIII stamp: 'WAL 4/2/2023 17:57:51'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 4/2/2023 17:57:55'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

----SNAPSHOT----(2 April 2023 17:58:10) CuisUniversity-5706.image priorSource: 8862114!

----SNAPSHOT----(2 April 2023 17:58:22) CuisUniversity-5706.image priorSource: 8862920!
!II class methodsFor: 'private auxiliary operations' stamp: 'WAL 4/2/2023 17:58:48' prior: 50608599!
next
	next ifNil: [
		next := II createChildNamed: self name, 'I'. 
		next previous: self.		
	].
	
	^next.! !

----SNAPSHOT----(2 April 2023 17:59:04) CuisUniversity-5706.image priorSource: 8863009!

II+II!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 4/2/2023 17:59:13'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 4/2/2023 17:59:13'!
III class
	instanceVariableNames: ''!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'WAL 4/2/2023 17:59:13'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'WAL 4/2/2023 17:59:13'!
IIII class
	instanceVariableNames: ''!

!classRemoval: #IIII stamp: 'WAL 4/2/2023 18:00:25'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 4/2/2023 18:00:28'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

----SNAPSHOT----(2 April 2023 18:00:47) CuisUniversity-5706.image priorSource: 8863309!

----SNAPSHOT----(2 April 2023 18:01:06) CuisUniversity-5706.image priorSource: 8864428!

----STARTUP---- (2 April 2023 18:08:10) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


----End fileIn of /home/a/s/sw/smalltalk/3 Natural Numbers Tests Ayudante.st----!

II+II!

!classDefinition: #III category: 'Natural Numbers' stamp: 'WAL 4/2/2023 18:09:24'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: 'III class' category: 'Natural Numbers' stamp: 'WAL 4/2/2023 18:09:24'!
III class
	instanceVariableNames: ''!

!classDefinition: #IIII category: 'Natural Numbers' stamp: 'WAL 4/2/2023 18:09:24'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classDefinition: 'IIII class' category: 'Natural Numbers' stamp: 'WAL 4/2/2023 18:09:24'!
IIII class
	instanceVariableNames: ''!

	Assert that: I + II isEqualTo: II next.!

	Assert that: I + II isEqualTo: II next.!

test01OnePlusAnAdderEqualsTheNextOfTheAdder!

test01OnePlusAnAdderEqualsTheNextOfTheAdder!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:21:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:21:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:21:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:21:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:21:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:21:24'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:21:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:21:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:21:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:21:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:21:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:21:24'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:21:24'!
ERROR!

----SNAPSHOT----(2 April 2023 18:25:32) CuisUniversity-5706.image priorSource: 8864517!

----STARTUP---- (2 April 2023 18:25:44) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!classRemoval: #IIII stamp: 'WAL 4/2/2023 18:25:53'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 4/2/2023 18:25:53'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #II stamp: 'WAL 4/2/2023 18:25:53'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #I stamp: 'WAL 4/2/2023 18:25:54'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

----End fileIn of /home/a/s/sw/smalltalk/3 Natural Numbers Peano Ayudante.st----!

----STARTUP---- (2 April 2023 18:48:18) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


test01OnePlusAnAdderEqualsTheNextOfTheAdder!

	Assert that: I * I isEqualTo: I.!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:48:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:48:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:48:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:48:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:48:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:48:53'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:48:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:48:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:48:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:48:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:48:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:48:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 18:48:53'!
ERROR!

Error!
!I class methodsFor: 'arithmetic operations' stamp: 'WAL 4/2/2023 19:02:11' prior: 50607031!
/ aNaturalNumber
	aNaturalNumber = I ifTrue: [
		^ I.
	].
	aNaturalNumber = I ifFalse: [
		^ Error name: 'canNotDivideByBiggerNumberErrorDescription'.
	].! !
!I class methodsFor: 'arithmetic operations' stamp: 'WAL 4/2/2023 19:02:24' prior: 50608885!
/ aNaturalNumber
	aNaturalNumber = I ifTrue: [
		^ I.
	].
	aNaturalNumber = I ifFalse: [
		^ Error name: 'negativeNumbersNotSupportedErrorDescription'.
	].! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:02:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:02:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:02:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:02:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:02:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:02:43'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:02:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:02:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:02:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:02:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:02:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:02:43'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:02:43'!
ERROR!
!I class methodsFor: 'private auxiliary operations' stamp: 'WAL 4/2/2023 19:07:57'!
negativeNumbersNotSupportedErrorDescription
	^ 'Números negativos no están soportados'! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:09:02'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:09:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:09:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:09:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:09:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:09:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:09:31'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:09:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:09:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:09:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:09:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:09:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:09:31'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 19:09:31'!
ERROR!
!I class methodsFor: 'error messages' stamp: 'WAL 4/2/2023 19:25:44' prior: 50608939!
negativeNumbersNotSupportedErrorDescription
	^ 'Negative numbers not supported.'! !

----SNAPSHOT----(2 April 2023 19:36:04) CuisUniversity-5706.image priorSource: 8869975!

!classRemoval: #IIII stamp: 'WAL 4/2/2023 19:36:13'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 4/2/2023 19:36:13'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #II stamp: 'WAL 4/2/2023 19:36:13'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #I stamp: 'WAL 4/2/2023 19:36:13'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

----End fileIn of /home/a/s/sw/smalltalk/3 Natural Numbers Peano Ayudante.st----!

----STARTUP---- (2 April 2023 19:46:57) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!

!I class methodsFor: 'private auxiliary operations' stamp: 'WAL 4/2/2023 19:50:44' prior: 50605223!
substractFrom: aNaturalNumber
	(self greaterThanMe: aNaturalNumber) error: self negativeNumbersNotSupportedErrorDescription.
	^ aNaturalNumber previous.! !
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 4/2/2023 20:09:16'!
> aNaturalNumber
	^ (self name size) > (aNaturalNumber name size) ! !
!II class methodsFor: 'arithmetic operations' stamp: 'WAL 4/2/2023 20:10:01' prior: 50608454!
/ aNaturalNumber
	( self  > aNaturalNumber ) ifTrue: [
		^ ( (self - aNaturalNumber )  /  aNaturalNumber ) + I.
	].
	( self  = aNaturalNumber ) ifTrue: [
		^ I.
	].! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:14:36'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:15:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:15:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:15:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:15:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:15:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:15:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:15:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:15:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:15:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:15:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:15:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:15:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:15:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:15:10'!
ERROR!
!I class methodsFor: 'private auxiliary operations' stamp: 'WAL 4/2/2023 20:15:59' prior: 50608998!
substractFrom: aNaturalNumber
	(aNaturalNumber > self) error: self negativeNumbersNotSupportedErrorDescription.
	^ aNaturalNumber previous.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:16:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:16:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:16:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:16:15'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:16:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:16:15'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:16:15'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:16:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:16:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:16:15'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:16:15'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:16:15'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:16:15'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:16:25'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:18:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:18:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:18:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:18:37'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:18:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:18:37'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:18:37'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:18:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:18:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:18:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:18:37'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:18:37'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:18:37'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:18:56'!
ERROR!
!I class methodsFor: 'private auxiliary operations' stamp: 'WAL 4/2/2023 20:20:56' prior: 50609065!
substractFrom: aNaturalNumber
	(self > aNaturalNumber) error: self negativeNumbersNotSupportedErrorDescription.
	^ aNaturalNumber previous.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:21:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:21:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:21:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:21:05'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:21:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:21:05'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:21:05'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:21:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:21:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:21:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:21:05'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:21:05'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:21:05'!
ERROR!
!I class methodsFor: 'arithmetic operations' stamp: 'WAL 4/2/2023 20:43:08'!
greaterThanMe: aNaturalNumber
	^ (self name size) > (aNaturalNumber name size) ! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:43:31'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:44:07'!
ERROR!
!I class methodsFor: 'private auxiliary operations' stamp: 'WAL 4/2/2023 20:44:32' prior: 50609155!
substractFrom: aNaturalNumber
	(aNaturalNumber > self) error: self negativeNumbersNotSupportedErrorDescription.
	^ aNaturalNumber previous.! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:45:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:45:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:45:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:45:03'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:45:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:45:03'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:45:03'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:45:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:45:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:45:03'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:45:03'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:45:03'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 20:45:03'!
ERROR!

----STARTUP---- (2 April 2023 21:35:59) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!classRemoval: #IIII stamp: 'WAL 4/2/2023 21:36:05'!
II subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #III stamp: 'WAL 4/2/2023 21:36:06'!
II subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #II stamp: 'WAL 4/2/2023 21:36:06'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

!classRemoval: #I stamp: 'WAL 4/2/2023 21:36:06'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Natural Numbers'!

----End fileIn of /home/a/s/sw/smalltalk/NaturalNumbers.st----!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:36:41'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:38:08'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:38:08'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:38:08'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:38:08'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:38:08'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:38:08'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:38:08'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:38:08'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:38:08'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:38:08'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:38:08'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:38:08'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:39:23'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:39:24'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:39:24'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:39:24'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:39:24'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:39:24'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:39:24'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:39:24'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:39:24'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:39:24'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:39:24'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:39:24'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:39:27'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:40:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:40:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:40:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:40:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:40:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:40:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:40:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:40:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:40:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:40:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:40:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:40:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:40:25'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:40:39'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:17'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:34'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:46'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:49'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:51'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:53'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:54'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:56'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:57'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:41:59'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:00'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:02'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:03'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:11'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'WAL 4/2/2023 21:42:11'!
ERROR!
!II class methodsFor: 'private' stamp: 'WAL 4/2/2023 21:43:05' prior: 50609125!
next
	next ifNil: [
		next := II createChildNamed: self name, 'I'.
		next previous: self
	].
	^next.! !
!II class methodsFor: 'private' stamp: 'WAL 4/2/2023 21:46:41' prior: 50609112!
divideTo: aNaturalNumber
	(self greaterThanMe: aNaturalNumber) ifTrue: [
		^(I + (self divideTo: (aNaturalNumber - self)))
	]
	ifFalse: [^I]
! !
!I class methodsFor: '--** private fileout/in **--' stamp: 'WAL 4/2/2023 21:47:08' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.
	previous := I.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'WAL 4/2/2023 21:47:08' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'WAL 4/2/2023 21:47:08' overrides: 50609508!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'WAL 4/2/2023 21:47:08' overrides: 50609508!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := III.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'WAL 4/2/2023 21:47:08'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.
	previous := I.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'WAL 4/2/2023 21:47:08'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'WAL 4/2/2023 21:47:08'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'WAL 4/2/2023 21:47:08'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := III.!
!I class methodsFor: '--** private fileout/in **--' stamp: 'WAL 4/2/2023 21:47:49' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.
	previous := I.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'WAL 4/2/2023 21:47:49' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'WAL 4/2/2023 21:47:49' overrides: 50609568!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'WAL 4/2/2023 21:47:49' overrides: 50609568!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := III.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'WAL 4/2/2023 21:47:49'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := II.
	previous := I.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'WAL 4/2/2023 21:47:49'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'WAL 4/2/2023 21:47:49'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'WAL 4/2/2023 21:47:49'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := III.!

----STARTUP---- (3 April 2023 17:14:54) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


ObjectBuilder create: #SemaforoDeMYC asChildOf: DenotativeObject collaboratorNames: '' in: 'Semaforo'!

!classDefinition: #SemaforoDeMYC category: 'Semaforo' stamp: 'WAL 4/3/2023 17:17:18'!
DenotativeObject subclass: #SemaforoDeMYC
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

!classDefinition: 'SemaforoDeMYC class' category: 'Semaforo' stamp: 'WAL 4/3/2023 17:17:18'!
SemaforoDeMYC class
	instanceVariableNames: ''!

ObjectBuilder create: #SeñalDePrecaucion asChildOf: DenotativeObject collaboratorNames: '' in: 'Semaforo'!

!classDefinition: #SeñalDePrecaucion category: 'Semaforo' stamp: 'WAL 4/3/2023 17:20:33'!
DenotativeObject subclass: #SeñalDePrecaucion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

!classDefinition: 'SeñalDePrecaucion class' category: 'Semaforo' stamp: 'WAL 4/3/2023 17:20:33'!
SeñalDePrecaucion class
	instanceVariableNames: ''!

SeñalDePrecaucion
	asChildOf: Light
	collaboratorNames: ''
	in: 'Semaforo'!

!classDefinition: 'SeñalDePrecaucion class' category: 'Semaforo' stamp: 'WAL 4/3/2023 17:20:55'!
SeñalDePrecaucion class
	instanceVariableNames: ''!

!classDefinition: #SeñalDePrecaucion category: 'Semaforo' stamp: 'WAL 4/3/2023 17:20:55'!
Light subclass: #SeñalDePrecaucion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

!classDefinition: 'SeñalDePrecaucion class' category: 'Semaforo' stamp: 'WAL 4/3/2023 17:20:55'!
SeñalDePrecaucion class
	instanceVariableNames: ''!

ObjectBuilder create: #SeñalDeAvanzar asChildOf: DenotativeObject collaboratorNames: '' in: 'Semaforo'!

!classDefinition: #SeñalDeAvanzar category: 'Semaforo' stamp: 'WAL 4/3/2023 17:23:42'!
DenotativeObject subclass: #SeñalDeAvanzar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

!classDefinition: 'SeñalDeAvanzar class' category: 'Semaforo' stamp: 'WAL 4/3/2023 17:23:42'!
SeñalDeAvanzar class
	instanceVariableNames: ''!
!SemaforoDeMYC class methodsFor: 'no messages' stamp: 'WAL 4/3/2023 17:30:44'!
prender

	self avisarPrecaucionPorEncendido.! !
!SemaforoDeMYC class methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 17:31:17'!
avisarPrecaucionPorEncendido

	! !

!classRenamed: #SeñalDePrecaucion as: #SeñalDePrecaucionDeMaipu stamp: 'WAL 4/3/2023 17:39:26'!
Smalltalk renameClassNamed: #SeñalDePrecaucion as: #SeñalDePrecaucionDeMaipu!

Light subclass: #SeñalDePrecaucionDeCorrientes
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

!classDefinition: #SeñalDePrecaucionDeCorrientes category: 'Semaforo' stamp: 'WAL 4/3/2023 17:39:39'!
Light subclass: #SeñalDePrecaucionDeCorrientes
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

SeñalDePrecaucionDeCorrientes class
	instanceVariableNames: ''!

!classDefinition: 'SeñalDePrecaucionDeCorrientes class' category: 'Semaforo' stamp: 'WAL 4/3/2023 17:39:39'!
SeñalDePrecaucionDeCorrientes class
	instanceVariableNames: ''!
!SeñalDePrecaucionDeCorrientes class methodsFor: 'no messages' stamp: 'WAL 4/3/2023 17:41:06'!
prender

	self color: Color yellow! !
!SeñalDePrecaucionDeCorrientes class methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 17:41:29'!
apagar

	self color: Color black! !

!classRemoval: #SeñalDePrecaucionDeMaipu stamp: 'WAL 4/3/2023 17:41:43'!
Light subclass: #SeñalDePrecaucionDeMaipu
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

Light subclass: #SeñalDePrecaucionDeMaipu
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

!classDefinition: #SeñalDePrecaucionDeMaipu category: 'Semaforo' stamp: 'WAL 4/3/2023 17:42:32'!
Light subclass: #SeñalDePrecaucionDeMaipu
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Semaforo'!

SeñalDePrecaucionDeMaipu class
	instanceVariableNames: ''!

!classDefinition: 'SeñalDePrecaucionDeMaipu class' category: 'Semaforo' stamp: 'WAL 4/3/2023 17:42:32'!
SeñalDePrecaucionDeMaipu class
	instanceVariableNames: ''!
!SeñalDePrecaucionDeMaipu class methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 17:42:32'!
apagar

	self color: Color black! !
!SeñalDePrecaucionDeMaipu class methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 17:42:32'!
prender

	self color: Color yellow! !
!SeñalDePrecaucionDeCorrientes class methodsFor: '--** private fileout/in **--' stamp: 'WAL 4/3/2023 19:51:12' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.! !
!SeñalDePrecaucionDeMaipu class methodsFor: '--** private fileout/in **--' stamp: 'WAL 4/3/2023 19:51:12' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.! !

!methodRemoval: SeñalDePrecaucionDeCorrientes class #initializeCollaboratorsFromFile stamp: 'WAL 4/3/2023 19:51:12'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.!

!methodRemoval: SeñalDePrecaucionDeMaipu class #initializeCollaboratorsFromFile stamp: 'WAL 4/3/2023 19:51:12'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	morph := nil.!

Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CollectionExercise'!

!classDefinition: #XXX category: 'CollectionExercise' stamp: 'WAL 4/3/2023 20:49:13'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CollectionExercise'!

Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CollectionExercise'!

!classDefinition: #XXX category: 'CollectionExercise' stamp: 'WAL 4/3/2023 20:49:32'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CollectionExercise'!
!XXX methodsFor: 'no messages' stamp: 'WAL 4/3/2023 20:57:01'!
findOddsPart1

	| elements odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	
	elements do:[: element | element odd ifTrue: [ odds add: element] ].
	
	^odds
	
	! !

XXX new findOddsPart1!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 20:59:28'!
findOddsPart0

	| elements odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	
	elements do:[: element | element odd ifTrue: [ odds add: element] ].
	
	^odds
	
	! !

!methodRemoval: XXX #findOddsPart0 stamp: 'WAL 4/3/2023 21:00:00'!
findOddsPart0

	| elements odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	
	elements do:[: element | element odd ifTrue: [ odds add: element] ].
	
	^odds
	
	!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 21:05:32'!
findOddsPart2

	| elements |
	
	elements:= #(1 2 5 6 9).
	

	^ elements select:[:  odd ].
	

	
	! !

XXX new findOddsPart2!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 21:07:14' prior: 50609218!
findOddsPart2

	| elements |
	
	elements:= #(1 2 5 6 9).
	

	^ elements select:[: each | each odd ].
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 21:07:33' prior: 50609225!
findOddsPart2

	| elements |
	
	elements:= #(1 2 5 6 9).
	

	^ elements select:[: element | element odd ].
	

	
	! !

XXX new findOddsPart2!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 21:07:49' prior: 50609232!
findOddsPart2

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements select:[: element | element odd ].
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 21:17:12'!
findDoubles

	| elements index odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	index := 1.
	
	[ index <= elements size ]  whileTrue: [
		
		
		
	].
	
	
	^ elements select:[: element | element odd ].
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 21:22:03' prior: 50609246!
findDoubles

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements collect:[: element | element *2 ].
	

	

	
	! !

| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements collect:[: element | element *2 ].
	!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 21:27:02'!
findFirstEven

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements detect:[: element | element even ].
	

	

	
	! !

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements detect:[: element | element even ].
	

	
!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 21:30:03'!
findFirstEvenWithoutMatching

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements detect:[: element | element even ] ifNone:['no hay pares'].
	

	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 21:31:30' prior: 50609275!
findFirstEvenWithoutMatching

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements detect:[: element | element even ] ifNone:[ self error: 'no hay pares'].
	

	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/3/2023 21:42:11'!
sumElementsInjecting

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements inject: 0 into: [: sum : element | sum + element ] .
	

	

	
	! !

| elements |
	
	elements:= #(1 5 9).
	
	^ elements inject: 0 into: [: sum : element | sum + element ] .!

Object subclass: #YYY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MeasuresExercise'!

!classDefinition: #YYY category: 'MeasuresExercise' stamp: 'WAL 4/3/2023 21:45:09'!
Object subclass: #YYY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MeasuresExercise'!

----STARTUP---- (7 April 2023 17:40:15) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


----End fileIn of /home/a/s/sw/smalltalk/CollectionExercise.st----!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 17:42:35' prior: 50609008!
findDoubles

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements collect: [ : element | element *2 ].
	

	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 17:46:07' prior: 50609028!
findOddsPart1

	| elements odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	
	elements do: [ : element | element odd ifTrue: [ odds add: element] ].
	
	^odds
	
	! !

	| elements odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	
	elements do: [ : element | element odd ifTrue: [ odds add: element] ].
	
	^odds!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 17:52:11'!
findOddsPart0

    | elements index odds |

    elements:= #(1 2 5 6 9).

    odds := OrderedCollection new.
    index := 1.

    [index <= elements size]
    whileTrue: [
        ((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
        index := index +1.
        ].
    ^odds
	
	! !

    | elements index odds |

    elements:= #(1 2 5 6 9).

    odds := OrderedCollection new.
    index := 1.

    [index <= elements size]
    whileTrue: [
        ((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
        index := index +1.
        ].
    ^odds!

| elements odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	
	elements do: [ : element | element odd ifTrue: [ odds add: element] ].
	
	^odds
	!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 17:53:46' prior: 50609036!
findOddsPart2

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements select: [ : element | element odd ].
	

	
	! !

| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements select: [ : element | element odd ].
	
!

[ : element | element odd ]!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 17:56:22' prior: 50609100!
findOddsPart2

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements select: [ : element | element odd ].
			   "select selecciona los elementos element
			 para los que el resultado de la operación derecha da verdadero"
	

	
	! !

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements select: [ : element | element odd ].
			   "select selecciona los elementos element
			 para los que el resultado de la operación derecha da verdadero"
	!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 17:57:29' prior: 50609111!
findOddsPart2

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements select: [ : element | element odd ].
	
			  "select selecciona los elementos element de elements
			   para los que el resultado de la
			   operación a la derecha de la barra da verdadero"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 17:59:11' prior: 50609059!
findOddsPart1

	| elements odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	
	elements do: [ : element | element odd ifTrue: [ odds add: element] ].
	
			   "do recorre los elementos element de elements
			   y para cada uno ejecuta
			   el código a la derecha de la barra |"
	
	^odds
	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 17:59:47' prior: 50609140!
findOddsPart1

	| elements odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	
	elements do: [ : element | element odd ifTrue: [ odds add: element ] ].
	
			   "do recorre los elementos element de elements
			   y para cada uno ejecuta
			   el código a la derecha de la barra |"
	
	^odds
	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:00:27' prior: 50609153!
findOddsPart1

	| elements odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	
	elements do: [ : element | element odd ifTrue: [ odds add: element ] ].
	
			   "do recorre cada elemento element de elements
			   y para cada uno ejecuta
			   el código a la derecha de la barra |"
	
	^odds
	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:03:20' prior: 50609128!
findOddsPart2

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements select: [ : element | element odd ].
	
			  "select selecciona cada elemento element de elements
			   para el que el resultado del
			   código a la derecha de la barra | da verdadero
			   y devuelve una colección con los selectos
			   del mismo tipo que la colección elements"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:04:07' prior: 50609052!
findDoubles

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements collect: [ : element | element  * 2 ].
	

	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:10:30' prior: 50609194!
findDoubles

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements collect: [ : element | element  * 2 ].
	
			"collect recorre cada elemento de elements
			 le aplica el código a la derecha de la barra |
			 y guara su resultado como elemento nuevo
			 en una nueva colección del mismo tipo que la colección elements"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:11:04' prior: 50609201!
findDoubles

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements collect: [ : element | element  * 2 ].
	
			"collect recorre cada elemento de elements
			 le aplica el código a la derecha de la barra |
			 y guara su resultado en un elemento nuevo
			 en una colección nueva del mismo tipo que la colección elements"
	

	
	! !

| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements collect: [ : element | element  * 2 ].
	
			"collect recorre cada elemento de elements
			 le aplica el código a la derecha de la barra |
			 y guara su resultado en un elemento nuevo
			 en una colección nueva del mismo tipo que la colección elements"!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:12:34' prior: 50609014!
findFirstEven

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements detect: [ : element | element even ].
	

	

	
	! !

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements detect: [ : element | element even ].!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:13:11' prior: 50609020!
findFirstEvenWithoutMatching

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements detect: [: element | element even ] ifNone:[ self error: 'no hay pares'].
	

	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:13:15' prior: 50609249!
findFirstEvenWithoutMatching

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements detect: [ : element | element even ] ifNone:[ self error: 'no hay pares'].
	

	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:14:18' prior: 50609257!
findFirstEvenWithoutMatching

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements detect: [ : element | element even ] ifNone: [ self error: 'no hay pares'].
	

	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:14:55' prior: 50609179!
findOddsPart2

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements select: [ : element | element odd ].
	
			  "select: selecciona cada elemento element de elements
			   para el que el resultado del
			   código a la derecha de la barra | da verdadero
			   y devuelve una colección con los selectos
			   del mismo tipo que la colección elements"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:14:58' prior: 50609166!
findOddsPart1

	| elements odds |
	
	elements:= #(1 2 5 6 9).
	
	odds := OrderedCollection new.
	
	elements do: [ : element | element odd ifTrue: [ odds add: element ] ].
	
			   "do: recorre cada elemento element de elements
			   y para cada uno ejecuta
			   el código a la derecha de la barra |"
	
	^odds
	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:15:48' prior: 50609266!
findFirstEvenWithoutMatching

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements detect: [ : element | element even ] ifNone: [ self error: 'no hay pares'].
	
			   "detect:ifNone: "
	

	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:15:58' prior: 50609303!
findFirstEvenWithoutMatching

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements detect: [ : element | element even ] ifNone: [ self error: 'no hay pares'].
	
			  "detect:ifNone: "
	

	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:16:58' prior: 50609239!
findFirstEven

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements detect: [ : element | element even ].
	
			  "detect: devuelve el primer elemento element de elements
			    para el que el código a la derecha de la barra |
			    da verdadero "
	

	
	! !

| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements detect: [ : element | element even ].!

	| elements |
	
	elements:= #(1 3).
	
	^ elements detect: [ : element | element even ].
	
			  "detect: devuelve el primer elemento element de elements
			    para el que el código a la derecha de la barra |
			    da verdadero "
	!

	| elements |
	
	elements:= #(1 3).
	
	^ elements detect: [ : element | element even ].
	
			  "detect: devuelve el primer elemento element de elements
			    para el que el código a la derecha de la barra |
			    da verdadero "
	!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:18:51' prior: 50609321!
findFirstEven

	| elements |
	
	elements:= #(1 2 5 6 9).
	
	^ elements detect: [ : element | element even ].
	
			  "detect: devuelve el primer elemento element de elements
			    para el que el código a la derecha de la barra |
			    da verdadero,
			    y si no encuentra ninguno
			    devuelve el error ObjectIsNotInTheCollection"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:20:12' prior: 50609312!
findFirstEvenWithoutMatching

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements detect: [ : element | element even ] ifNone: [ self error: 'no hay pares'].
	
			  "detect:ifNone: devuelve el primer elemento element de elements
			    para el que el código a la derecha de la barra |
			    da verdadero,
			    y si no encuentra ninguno
			    ejecuta el código entregado a ifNone:"
	

	

	
	! !

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements detect: [ : element | element even ] ifNone: [ self error: 'no hay pares'].
	
			  "detect:ifNone: devuelve el primer elemento element de elements
			    para el que el código a la derecha de la barra |
			    da verdadero,
			    y si no encuentra ninguno
			    ejecuta el código entregado a ifNone:"!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:26:57' prior: 50609042!
sumElementsInjecting

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements inject: 0 into: [: sum : element | sum + element ] .
	
			"inject:into: para cada elemento element de elements
			  ejecuta el código a la derecha de la barra | 
			  y guarda su resultado en la variable sum
			  iniciada con el valor entregado al keyword inject:"
	

	
	! !

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements inject: 0 into: [: sum : element | sum + element ] .
	
			"inject:into: para cada elemento element de elements
			  ejecuta el código a la derecha de la barra | 
			  y guarda su resultado en la variable sum
			  iniciada con el valor entregado al keyword inject:"!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:28:10' prior: 50609391!
sumElementsInjecting

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements inject: 0 into: [: sum : element | sum + element ] .
	
			"inject:into: para cada elemento element de elements
			  ejecuta el código a la derecha de la barra | 
			  y guarda (acumula) su resultado en la variable sum
			  iniciada con el valor entregado al keyword inject:"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:28:33' prior: 50609415!
sumElementsInjecting

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements inject: 0 into: [: sum : element | sum + element ] .
	
			"inject:into: para cada elemento element de elements
			  ejecuta el código a la derecha de la barra | 
			  y guarda su resultado en la variable sum
			  iniciada con el valor entregado al keyword inject:"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:29:54' prior: 50609429!
sumElementsInjecting

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements sum .
	
			"sum: "
	

	
	! !

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements sum .
	
			"sum: "!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:30:48' prior: 50609443!
sumElementsInjecting

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements sum .
	
			"sum: suma cada elemento de la colección elements "
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:31:12' prior: 50609452!
sumElementsInjecting

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements inject: 0 into: [: sum : element | sum + element ] .
	
			"inject:into: para cada elemento element de elements
			  ejecuta el código a la derecha de la barra | 
			  y guarda su resultado en la variable sum
			  iniciada con el valor entregado al keyword inject:"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:31:20'!
sumElementsSum

	| elements |
	
	elements:= #(1 5 9).
	
	^ elements sum .
	
			"sum: suma cada elemento de la colección elements "
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:36:12'!
extractVowels

	| string vowelsString |
	
	string := 'abcdefguijp'.
	
	vowelsString:=''.
	
	^ vowelsString .
	
			"los strings son colecciones"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:36:39' prior: 50609481!
extractVowels

	| string vowelsString |
	
	string := 'abcdefguijp'.
	
	vowelsString:=''.
	
	^ vowelsString .
	
			"se concluye que los strings son colecciones"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:37:39' prior: 50609489!
extractVowels

	| string vowelsString |
	
	string := 'abcdefguijp'.
	
	vowelsString := ''.
	
	^ vowelsString .
	
			"se concluye que los strings son colecciones"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:38:03' prior: 50609498!
extractVowels

	| string vowelsString |
	
	string := 'abcdefguijp'.
	
	vowelsString := ''.
	
	^ vowelsString .
	
			"se observa que los strings son colecciones"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:41:31' prior: 50609507!
extractVowels

	| string vowels |
	
	string := 'abcdefguijp'.
	
	vowels := 'aeiou'.

	^ string select: [ : element | element in: vowels ].
	
			"se observa que los strings son colecciones"
	

	
	! !

	| string vowels |
	
	string := 'abcdefguijp'.
	
	vowels := 'aeiou'.

	^ string select: [ : element | element in: vowels ].!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:54:36' prior: 50609516!
extractVowels

	| string vowels |
	
	string := 'abcdefguijp'.
	vowels := 'aeiou'.

	^ ((((string
	               select: [ : element |  element == 'a' 	])
		       select: [ : element |  element == 'e' 	])
		       select: [ : element |  element == 'i'  	])
		       select: [ : element |  element == 'o' 	])
		       select: [ : element |  element == 'u' 	]
	
			"se observa que los strings son colecciones"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:54:53' prior: 50609529!
extractVowels

	| string |
	
	string := 'abcdefguijp'.

	^ ((((string
	               select: [ : element |  element == 'a' 	])
		       select: [ : element |  element == 'e' 	])
		       select: [ : element |  element == 'i'  	])
		       select: [ : element |  element == 'o' 	])
		       select: [ : element |  element == 'u' 	]
	
			"se observa que los strings son colecciones"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 18:55:15' prior: 50609545!
extractVowels

	| string |
	
	string := 'abcdefguijp'.

	^ (((( string
	               select: [ : element |  element == 'a' 	])
		       select: [ : element |  element == 'e' 	])
		       select: [ : element |  element == 'i'  	])
		       select: [ : element |  element == 'o' 	])
		       select: [ : element |  element == 'u' 	]
	
			"se observa que los strings son colecciones"
	

	
	! !

	| string |
	
	string := 'abcdefguijp'.

	^ (((( string
	               select: [ : element |  element == 'a' 	])
		       select: [ : element |  element == 'e' 	])
		       select: [ : element |  element == 'i'  	])
		       select: [ : element |  element == 'o' 	])
		       select: [ : element |  element == 'u' 	]
	
			"se observa que los strings son colecciones"!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 19:03:17' prior: 50609560!
extractVowels

	| string vowels |
	
	string := 'abcdefguijp'.
	vowels := 'aeiou'.

	^  string select: [ : element |  (vowels occurrencesOf: element > 0 ) 	]
	
			"se observa que los strings son colecciones"
	

	
	! !


	| string vowels |
	
	string := 'abcdefguijp'.
	vowels := 'aeiou'.

	^  string select: [ : element |  (vowels occurrencesOf: element > 0 ) 	]
	
			"se observa que los strings son colecciones"!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 19:03:49' prior: 50609587!
extractVowels

	| string vowels |
	
	string := 'abcdefguijp'.
	vowels := 'aeiou'.

	^  string select: [ : element |  (vowels occurrencesOf: element ) > 0  	]
	
			"se observa que los strings son colecciones"
	

	
	! !

	| string vowels |
	
	string := 'abcdefguijp'.
	vowels := 'aeiou'.

	^  string select: [ : element |  (vowels occurrencesOf: element ) > 0  	]
	
			"se observa que los strings son colecciones"
	!

Object subclass: #YYY
    instanceVariableNames: ''
    classVariableNames: ''
    poolDictionaries: ''
    category: 'MeasuresExercise'!

!classDefinition: #YYY category: 'MeasuresExercise' stamp: 'WAL 4/7/2023 19:18:09'!
Object subclass: #YYY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MeasuresExercise'!

metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.!

diezMetros := 10 * metros.!

pulgadas := BaseUnit nameForOne:  'pulgada' nameForMany:  'pulgadas'.!

sesentaPulgadas := 60 * pulgadas.!

ProportionalDerivedUnit!

	| metros |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	1*metros!

BaseUnit!

ProportionalDerivedUnit!
!YYY methodsFor: 'no messages' stamp: 'WAL 4/7/2023 19:39:09'!
add10MetersPlus500Centimeters

	| metros centimetros |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit nameForOne: 'centimetro' nameForMany: 'centimetros' sign: 'cm' baseUnit: 'metros' conversionFactor: 1/100.

	10*metros

! !
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 19:43:52' prior: 50609641!
add10MetersPlus500Centimeters

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit nameForOne: 'centimetro' nameForMany: 'centimetros' sign: 'cm' baseUnit: 'metros' conversionFactor: 1/100.

	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity2

! !

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit nameForOne: 'centimetro' nameForMany: 'centimetros' sign: 'cm' baseUnit: 'metros' conversionFactor: 1/100.

	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity2
!

ProportionalDerivedUnit!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 19:46:51' prior: 50609653!
add10MetersPlus500Centimeters

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit nameForOne: 'centimetro' nameForMany: 'centimetros' sign: 'cm' baseUnit: 'metros' conversionFactor: 1/100.

	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity1

! !
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 19:48:44' prior: 50609682!
add10MetersPlus500Centimeters

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit nameForOne: 'centimetro' nameForMany: 'centimetros' sign: 'cm' baseUnit: metros conversionFactor: 1/100.

	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity1

! !
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 19:48:51' prior: 50609698!
add10MetersPlus500Centimeters

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit nameForOne: 'centimetro' nameForMany: 'centimetros' sign: 'cm' baseUnit: metros conversionFactor: 1/100.

	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity2

! !

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit nameForOne: 'centimetro' nameForMany: 'centimetros' sign: 'cm' baseUnit: metros conversionFactor: 1/100.

	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity2!

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit nameForOne: 'centimetro' nameForMany: 'centimetros' sign: 'cm' baseUnit: metros conversionFactor: 1/100.

	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity2!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 19:52:36' prior: 50609714!
add10MetersPlus500Centimeters

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit nameForOne: 'centimetro' nameForMany: 'centimetros' sign: 'cm' baseUnit: metros conversionFactor: 100.

	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity2

! !

| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit nameForOne: 'centimetro' nameForMany: 'centimetros' sign: 'cm' baseUnit: metros conversionFactor: 100.!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 19:54:57' prior: 50609755!
add10MetersPlus500Centimeters

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit nameForOne: 'centimetro' nameForMany: 'centimetros' sign: '+' baseUnit: metros conversionFactor: 100.

	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity2

! !

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit nameForOne: 'centimetro' nameForMany: 'centimetros' sign: '+' baseUnit: metros conversionFactor: 100.

	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity2!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 19:57:53' prior: 50609780!
add10MetersPlus500Centimeters

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit baseUnit: metros conversionFactor: 100 named: 'centimetros'.
			"nameForOne: 'centimetro' nameForMany: 'centimetros' sign: '+' "
	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity2

! !

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit baseUnit: metros conversionFactor: 100 named: 'centimetros'.
			"nameForOne: 'centimetro' nameForMany: 'centimetros' sign: '+' "
	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity2!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 19:58:04' prior: 50609808!
add10MetersPlus500Centimeters

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit baseUnit: metros conversionFactor: 1/100 named: 'centimetros'.
			"nameForOne: 'centimetro' nameForMany: 'centimetros' sign: '+' "
	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity2

! !

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit baseUnit: metros conversionFactor: 1/100 named: 'centimetros'.
			"nameForOne: 'centimetro' nameForMany: 'centimetros' sign: '+' "
	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity2!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 19:58:38' prior: 50609838!
add10MetersPlus500Centimeters

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit baseUnit: metros conversionFactor: 1/100 named: 'centimetros'.
			"nameForOne: 'centimetro' nameForMany: 'centimetros' sign: '+' "
	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity2 + measureQuantity1

! !

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit baseUnit: metros conversionFactor: 1/100 named: 'centimetros'.
			"nameForOne: 'centimetro' nameForMany: 'centimetros' sign: '+' "
	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity2 + measureQuantity1!

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit baseUnit: metros conversionFactor: 1/100 named: 'centimetros'.
			"nameForOne: 'centimetro' nameForMany: 'centimetros' sign: '+' "
	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity2 + measureQuantity1!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 19:59:58' prior: 50609868!
add10MetersPlus500Centimeters

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit baseUnit: metros conversionFactor: 1/100 named: 'centimetros'.
			"nameForOne: 'centimetro' nameForMany: 'centimetros' sign: '+' "
	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity2

! !

	| metros centimetros measureQuantity1 measureQuantity2 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit baseUnit: metros conversionFactor: 1/100 named: 'centimetros'.
			"nameForOne: 'centimetro' nameForMany: 'centimetros' sign: '+' "
	measureQuantity1 := 10*metros.
	measureQuantity2 := 500*centimetros.
	
	 
	^ measureQuantity1 + measureQuantity2!

ProportionalDerivedUnit!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 20:05:19' prior: 50609911!
add10MetersPlus500Centimeters

	| metros centimetros measureQuantity1 |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit baseUnit: metros conversionFactor: 1/100 named: 'centimetros'.
			
	
	 
	^ (10*metros) + (500*centimetros).

! !
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 20:05:32' prior: 50609942!
add10MetersPlus500Centimeters

	| metros centimetros |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit baseUnit: metros conversionFactor: 1/100 named: 'centimetros'.
			
	
	 
	^ (10*metros) + (500*centimetros).

! !
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 20:05:52' prior: 50609954!
add10MetersPlus500Centimeters

	| metros centimetros |

	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.

	centimetros := ProportionalDerivedUnit baseUnit: metros conversionFactor: 1/100 named: 'centimetros'.
	 
	^ (10*metros) + (500*centimetros).

! !

ConversionTable!

MeasureConverter!

MeasureConverter!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 20:25:37'!
add1btcPlus10000Pesos

	| btc |

	ConversionTable.
	
	MeasureConverter.
	
	
	btc := ProportionalDerivedUnit baseUnit: peso conversionFactor: 1/100 named: 'btc'.
	 
	^ (1*btc) + (10000*peso).

! !

	| table graph |
	
	table := ConversionTable new.
	table measure: self onePeso convertsTo: self tenDollars.!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 20:50:34' prior: 50609979!
add1btcPlus10000Pesos

	| table btc oneBitcoin |

	btc := ProportionalDerivedUnit baseUnit: peso conversionFactor: 1/100 named: 'btc'.
	oneBitcoin := 1*btc.

	table := ConversionTable new.
	table measure: oneBitcoin convertsTo: ( 5895268.0956*peso ).


	
	 
	^ (1*btc) + (10000*peso).

! !

	| table btc oneBitcoin |

	btc := ProportionalDerivedUnit baseUnit: peso conversionFactor: 1/100 named: 'btc'.
	oneBitcoin := 1*btc.

	table := ConversionTable new.
	table measure: oneBitcoin convertsTo: ( 5895268.0956*peso ).


	
	 
	^ (1*btc) + (10000*peso).!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 20:51:39' prior: 50609992!
add1btcPlus10000Pesos

	| table btc oneBitcoin |

	btc := ProportionalDerivedUnit baseUnit: peso conversionFactor: 1/100 named: 'btc'.
	"oneBitcoin := 1*btc.

	table := ConversionTable new.
	table measure: oneBitcoin convertsTo: ( 5895268.0956*peso )."


	
	 
	^ (1*btc) + (10000*peso).

! !

	| table btc oneBitcoin |

	btc := ProportionalDerivedUnit baseUnit: peso conversionFactor: 1/100 named: 'btc'.
	"oneBitcoin := 1*btc.

	table := ConversionTable new.
	table measure: oneBitcoin convertsTo: ( 5895268.0956*peso )."


	
	 
	^ (1*btc) + (10000*peso).!

| string vowels |
	
	string := 'abcdefguijp'.
	vowels := 'aeiou'.!

$u!
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 21:00:43' prior: 50609603!
extractVowels

	| string vowels |
	
	string := 'abcdefguijp'.
	vowels := 'aeiou'.

	^  string select: [ : element |  (vowels occurrencesOf: element ) > 0  	]
	
			"se observa que los strings son colecciones, en particular seguramente sean arreglos"
	

	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 21:01:01' prior: 50610036!
extractVowels
	| string vowels |
	string := 'abcdefguijp'.
	vowels := 'aeiou'.
	^  string select: [ : element |  (vowels occurrencesOf: element ) > 0  	].
	"se observa que los strings son colecciones, en particular seguramente sean arreglos"
	

	
	! !
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 21:08:35' prior: 50610013!
add1btcPlus10000Pesos

	| table btc oneBitcoin |
	
	btc := BaseUnit nameForOne: 'btc' nameForMany: 'btc'.
	oneBitcoin := 1*btc.

	table := ConversionTable new.
	table measure: oneBitcoin convertsTo: ( 5895268.0956*peso ).


	
	 
	^ (1*btc) + (10000*peso).

! !

MeasureConverter!

MeasureConverter!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 22:14:29' prior: 50610058!
add1btcPlus10000Pesos

	| table btc oneBitcoin moneyConverter |
	
	btc := BaseUnit nameForOne: 'btc' nameForMany: 'btc'.
	oneBitcoin := 1*btc.

	table := ConversionTable new.
	table measure: oneBitcoin convertsTo: ( 5895268.0956*peso ).

	moneyConverter := MeasureConverter on: table.
	 
	^(10000*peso) + (moneyConverter convert: oneBitcoin to: peso).

! !

	| table btc oneBitcoin moneyConverter |
	
	btc := BaseUnit nameForOne: 'btc' nameForMany: 'btc'.
	oneBitcoin := 1*btc.

	table := ConversionTable new.
	table measure: oneBitcoin convertsTo: ( 5895268.0956*peso ).

	moneyConverter := MeasureConverter on: table.
	 
	^(10000*peso) + (moneyConverter convert: oneBitcoin to: peso).!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 22:16:55' prior: 50610071!
add1btcPlus10000Pesos

	| table btc oneBitcoin moneyConverter |
	
	btc := BaseUnit nameForOne: 'btc' nameForMany: 'btc'.
	oneBitcoin := 1*btc.

	table := ConversionTable new.
	table measure: oneBitcoin convertsTo: ( 5895268.0956*peso ).	   "5895268.0956 es el valor del bitcoin en pesos el 7/4/2023"

	moneyConverter := MeasureConverter on: table.
	 
	^(10000*peso) + (moneyConverter convert: oneBitcoin to: peso).
	
	
	"el problema con esta implementación es que en ningún momento indicamos que la conversión corresponde al 7/4/2023"

! !
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/7/2023 22:38:03' prior: 50610096!
add1btcPlus10000Pesos

	| table btc oneBitcoin moneyConverter |
	
	btc := BaseUnit nameForOne: 'btc' nameForMany: 'btc'.
	oneBitcoin := 1*btc.

	table := ConversionTable new.
	table measure: oneBitcoin convertsTo: ( 5895268.0956*peso ).	   "5895268.0956 es el valor del bitcoin en pesos el 7/4/2023"

	moneyConverter := MeasureConverter on: table.
	 
	^(10000*peso) + (moneyConverter convert: oneBitcoin to: peso).
	
	
	"el problema con esta implementación es que en ningún momento indicamos que la conversión corresponde a una fecha determinada"

! !

----SNAPSHOT----(7 April 2023 22:38:10) CuisUniversity-5706.image priorSource: 8874899!

----STARTUP---- (8 April 2023 10:46:40) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!

!XXX methodsFor: 'as yet unclassified' stamp: 'WAL 4/8/2023 10:49:23' prior: 50610047!
extractVowels
	| string |
	string := 'abcdefguijp'.
	"vowels := 'aeiou'."
	^  string select: [ : element |  element isVowel  	].
	"se observa que los strings son colecciones, en particular seguramente sean arreglos"
	"^  string select: [ : element |  (vowels occurrencesOf: element ) > 0  	]."

	
	! !

	| string |
	string := 'abcdefguijp'.
	"vowels := 'aeiou'."
	^  string select: [ : element |  element isVowel  	].!

$a!

| string |
	string := 'abcdefguijp'.
	"vowels := 'aeiou'."
	^  string select: [ : element |  element isVowel  	].!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/8/2023 15:26:40'!
add30kelvinsPlus20celsiusPlus10Fahrenheit

	| kelvin celsius fahrenheit |

	kelvin := BaseUnit nameForOne:  'kelvin' nameForMany:  'kelvin'.

	celsius := NotProportionalDerivedUnit baseUnit: kelvin conversionFormula: 1/100 named: 'celsius'.
	
	fahrenheit := NotProportionalDerivedUnit baseUnit: kelvin conversionFormula: 1/100 named: 'fahrenheit'.
	
	
	
	^ (30*kelvin) + (20*celsius) + (10*fahrenheit).

! !

NotProportionalDerivedUnit!
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/8/2023 15:39:52' prior: 50610162!
add30kelvinsPlus20celsiusPlus10Fahrenheit

	| kelvin celsius fahrenheit |

	kelvin := BaseUnit nameForOne:  'kelvin' nameForMany:  'kelvin'.

	celsius := NotProportionalDerivedUnit
		baseUnit: kelvin
		conversionBlock: [ : celsiusTemperature | celsiusTemperature + (5463/20)]
		reciprocalConversionBlock: [ : kelvinTemperature | kelvinTemperature - (5463/20) ]
		named: 'celsius'
		sign: 'º'.
	
	fahrenheit := NotProportionalDerivedUnit
		baseUnit: kelvin
		conversionBlock: [ : fahrenheitTemperature | (fahrenheitTemperature -32)/1.8+273]
		reciprocalConversionBlock: [ : kelvinTemperature | 1.8*(kelvinTemperature-273) + 32 ]
		named: 'celsius'
		sign: 'º'.


	
	^ (30*kelvin) + (20*celsius) + (10*fahrenheit).

! !
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/8/2023 15:49:02' prior: 50610179!
add30kelvinsPlus20celsiusPlus10Fahrenheit

	| kelvin celsius fahrenheit |

	kelvin := BaseUnit nameForOne:  'kelvin' nameForMany:  'kelvin'.

	celsius := NotProportionalDerivedUnit
		baseUnit: kelvin
		conversionBlock: [ : celsiusTemperature | celsiusTemperature + (5463/20)]
		reciprocalConversionBlock: [ : kelvinTemperature | kelvinTemperature - (5463/20) ]
		named: 'celsius'
		sign: 'ºC'.
	
	fahrenheit := NotProportionalDerivedUnit
		baseUnit: kelvin
		conversionBlock: [ : fahrenheitTemperature | (fahrenheitTemperature -32)/1.8+273]
		reciprocalConversionBlock: [ : kelvinTemperature | 1.8*(kelvinTemperature-273) + 32 ]
		named: 'celsius'
		sign: 'ºF'.



	
	^ (30*kelvin) + (20*celsius) + (10*fahrenheit).

! !
!YYY methodsFor: 'as yet unclassified' stamp: 'WAL 4/8/2023 15:49:38' prior: 50610205!
add30kelvinsPlus20celsiusPlus10Fahrenheit

	| kelvin celsius fahrenheit |

	kelvin := BaseUnit nameForOne:  'kelvin' nameForMany:  'kelvin'.

	celsius := NotProportionalDerivedUnit
		baseUnit: kelvin
		conversionBlock: [ : celsiusTemperature | celsiusTemperature + (5463/20)]
		reciprocalConversionBlock: [ : kelvinTemperature | kelvinTemperature - (5463/20) ]
		named: 'celsius'
		sign: 'ºC'.
	
	fahrenheit := NotProportionalDerivedUnit
		baseUnit: kelvin
		conversionBlock: [ : fahrenheitTemperature | (fahrenheitTemperature -32)/1.8+273]
		reciprocalConversionBlock: [ : kelvinTemperature | 1.8*(kelvinTemperature-273) + 32 ]
		named: 'celsius'
		sign: 'ºF'.
	
	^ (30*kelvin) + (20*celsius) + (10*fahrenheit).

! !

	| kelvin celsius fahrenheit |

	kelvin := BaseUnit nameForOne:  'kelvin' nameForMany:  'kelvin'.

	celsius := NotProportionalDerivedUnit
		baseUnit: kelvin
		conversionBlock: [ : celsiusTemperature | celsiusTemperature + (5463/20)]
		reciprocalConversionBlock: [ : kelvinTemperature | kelvinTemperature - (5463/20) ]
		named: 'celsius'
		sign: 'ºC'.
	
	fahrenheit := NotProportionalDerivedUnit
		baseUnit: kelvin
		conversionBlock: [ : fahrenheitTemperature | (fahrenheitTemperature -32)/1.8+273]
		reciprocalConversionBlock: [ : kelvinTemperature | 1.8*(kelvinTemperature-273) + 32 ]
		named: 'celsius'
		sign: 'ºF'.
	
	^ (30*kelvin) + (20*celsius) + (10*fahrenheit).!

BaseUnit!

----SNAPSHOT----(8 April 2023 16:04:25) CuisUniversity-5706.image priorSource: 8911533!

----STARTUP---- (10 April 2023 20:12:26) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


----End fileIn of /home/a/s/e/c/is1/tp/01/CodigoRepetido-Ejercicio.st----!
!CustomerBookTest methodsFor: 'testing auxilliaries' stamp: 'WAL 4/11/2023 21:49:23' prior: 50610335!
calculateElapsedTime: aCustomerBook blockToMeasureTime: aBlock

	| millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^millisecondsAfterRunning-millisecondsBeforeRunning! !

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self assertIfActionTakesLongTimeOnCustomerBook: customerBook
		 blockToMeasureTime: [customerBook addCustomerNamed: 'John Lennon'] 
		lessThan: 50 * millisecond
!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'WAL 4/11/2023 21:54:41'!
PASSED!
!Behavior method!
numberOfSuspendedCustomers
	#_coverageTracker92549027_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker92549027_
		cover: (32 to: 40)
		declaredAt: (32 to: 40)
		by: suspended.
	#_coverageTracker92549027_
		coverAll:
			{42 to: 45}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.! !
!Behavior method!
customerCanNotBeEmptyErrorMessage
	#_coverageTracker92549042_ markAsExecuted.
	^ #_coverageTracker92549042_
		coverAll:
			{38 to: 71}
		byLiteralOrPseudoVariable: 'Customer name cannot be empty!!!!!!'.! !
!Behavior method!
customerAlreadyExistsErrorMessage
	#_coverageTracker92549055_ markAsExecuted.
	^ #_coverageTracker92549055_
		coverAll:
			{38 to: 65}
		byLiteralOrPseudoVariable: 'Customer already exists!!!!!!'.! !
!Behavior method!
signalCustomerNameCannotBeEmpty
	#_coverageTracker92549057_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker92549057_
		coverAll:
			{36 to: 39}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker92549057_
		coverAll:
			{41 to: 46}
		evaluating: [
			receiver3 error:
				[ | receiver2 |
				receiver2 _ [ | receiver1 |
				receiver1 _ #_coverageTracker92549057_
					coverAll:
						{48 to: 51}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker92549057_
					coverAll:
						{53 to: 57}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value.
				#_coverageTracker92549057_
					coverAll:
						{59 to: 91}
					evaluating: [ receiver2 customerCanNotBeEmptyErrorMessage ]
					thatSends: #customerCanNotBeEmptyErrorMessage
					to: receiver2 ] value ]
		thatSends: #error:
		to: receiver3 ] value.! !
!Behavior method!
addCustomerNamed: aName
	#_coverageTracker92549061_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker92549061_
		cover: (27 to: 31)
		declaredAt: (19 to: 23)
		by: aName.
	#_coverageTracker92549061_
		coverAll:
			{33 to: 39}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.
	#_coverageTracker92549061_
		coverAll:
			{41 to: 47}
		evaluating: [
			receiver3 ifTrue: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker92549061_
					coverAll:
						{51 to: 54}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker92549061_
					coverAll:
						{56 to: 86}
					evaluating: [ receiver2 signalCustomerNameCannotBeEmpty ]
					thatSends: #signalCustomerNameCannotBeEmpty
					to: receiver2 ] value ]]
		thatSends: #ifTrue:
		to: receiver3 ] value.
	[ | receiver8 |
	receiver8 _ [ | receiver6 |
	receiver6 _ [ | receiver4 |
	receiver4 _ #_coverageTracker92549061_
		cover: (94 to: 99)
		declaredAt: (94 to: 99)
		by: active.
	#_coverageTracker92549061_
		coverAll:
			{101 to: 109}
		evaluating: [
			receiver4 includes:
				(#_coverageTracker92549061_
					cover: (111 to: 115)
					declaredAt: (19 to: 23)
					by: aName) ]
		thatSends: #includes:
		to: receiver4 ] value.
	#_coverageTracker92549061_
		coverAll:
			{118 to: 120}
		evaluating: [
			receiver6 or: [
				[ | receiver5 |
				receiver5 _ #_coverageTracker92549061_
					cover: (123 to: 131)
					declaredAt: (123 to: 131)
					by: suspended.
				#_coverageTracker92549061_
					coverAll:
						{133 to: 141}
					evaluating: [
						receiver5 includes:
							(#_coverageTracker92549061_
								cover: (143 to: 147)
								declaredAt: (19 to: 23)
								by: aName) ]
					thatSends: #includes:
					to: receiver5 ] value ]]
		thatSends: #or:
		to: receiver6 ] value.
	#_coverageTracker92549061_
		coverAll:
			{151 to: 157}
		evaluating: [
			receiver8 ifTrue: [
				[ | receiver7 |
				receiver7 _ #_coverageTracker92549061_
					coverAll:
						{161 to: 164}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker92549061_
					coverAll:
						{166 to: 192}
					evaluating: [ receiver7 signalCustomerAlreadyExists ]
					thatSends: #signalCustomerAlreadyExists
					to: receiver7 ] value ]]
		thatSends: #ifTrue:
		to: receiver8 ] value.
	[ | receiver9 |
	receiver9 _ #_coverageTracker92549061_
		cover: (200 to: 205)
		declaredAt: (94 to: 99)
		by: active.
	#_coverageTracker92549061_
		coverAll:
			{207 to: 210}
		evaluating: [
			receiver9 add:
				(#_coverageTracker92549061_
					cover: (212 to: 216)
					declaredAt: (19 to: 23)
					by: aName) ]
		thatSends: #add:
		to: receiver9 ] value.! !
!Behavior method!
numberOfCustomers
	#_coverageTracker92549084_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker92549084_
		cover: (23 to: 28)
		declaredAt: (23 to: 28)
		by: active.
	#_coverageTracker92549084_
		coverAll:
			{30 to: 33}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.
	#_coverageTracker92549084_
		coverAll:
			{35 to: 35}
		evaluating: [
			receiver3 +
				[ | receiver2 |
				receiver2 _ #_coverageTracker92549084_
					cover: (37 to: 45)
					declaredAt: (37 to: 45)
					by: suspended.
				#_coverageTracker92549084_
					coverAll:
						{47 to: 50}
					evaluating: [ receiver2 size ]
					thatSends: #size
					to: receiver2 ] value ]
		thatSends: #+
		to: receiver3 ] value.! !
!Behavior method!
removeCustomerNamed: aName
	#_coverageTracker92549091_ markAsExecuted.
	[ | receiver6 |
	receiver6 _ #_coverageTracker92549091_
		coverAll:
			{32 to: 32}
		byLiteralOrPseudoVariable: 1.
	#_coverageTracker92549091_
		coverAll:
			{34 to: 36. 50 to: 52}
		evaluating: [
			receiver6
				to:
					[ | receiver1 |
					receiver1 _ #_coverageTracker92549091_
						cover: (38 to: 43)
						declaredAt: (38 to: 43)
						by: active.
					#_coverageTracker92549091_
						coverAll:
							{45 to: 48}
						evaluating: [ receiver1 size ]
						thatSends: #size
						to: receiver1 ] value
				do: [ :index |
					[ | receiver5 |
					receiver5 _ [ | receiver3 |
					receiver3 _ #_coverageTracker92549091_
						cover: (69 to: 73)
						declaredAt: (22 to: 26)
						by: aName.
					#_coverageTracker92549091_
						coverAll:
							{75 to: 75}
						evaluating: [
							receiver3 =
								[ | receiver2 |
								receiver2 _ #_coverageTracker92549091_
									cover: (78 to: 83)
									declaredAt: (38 to: 43)
									by: active.
								#_coverageTracker92549091_
									coverAll:
										{85 to: 87}
									evaluating: [
										receiver2 at:
											(#_coverageTracker92549091_
												cover: (89 to: 93)
												declaredAt: (59 to: 63)
												by: index) ]
									thatSends: #at:
									to: receiver2 ] value ]
						thatSends: #=
						to: receiver3 ] value.
					#_coverageTracker92549091_
						coverAll:
							{99 to: 105}
						evaluating: [
							receiver5 ifTrue: [
								[ | receiver4 |
								receiver4 _ #_coverageTracker92549091_
									cover: (113 to: 118)
									declaredAt: (38 to: 43)
									by: active.
								#_coverageTracker92549091_
									coverAll:
										{120 to: 128}
									evaluating: [
										receiver4 removeAt:
											(#_coverageTracker92549091_
												cover: (130 to: 134)
												declaredAt: (59 to: 63)
												by: index) ]
									thatSends: #removeAt:
									to: receiver4 ] value.
								^ #_coverageTracker92549091_
									cover: (143 to: 147)
									declaredAt: (22 to: 26)
									by: aName ]]
						thatSends: #ifTrue:
						to: receiver5 ] value ]]
		thatSends: #to:do:
		to: receiver6 ] value.
	[ | receiver12 |
	receiver12 _ #_coverageTracker92549091_
		coverAll:
			{162 to: 162}
		byLiteralOrPseudoVariable: 1.
	#_coverageTracker92549091_
		coverAll:
			{164 to: 166. 183 to: 185}
		evaluating: [
			receiver12
				to:
					[ | receiver7 |
					receiver7 _ #_coverageTracker92549091_
						cover: (168 to: 176)
						declaredAt: (168 to: 176)
						by: suspended.
					#_coverageTracker92549091_
						coverAll:
							{178 to: 181}
						evaluating: [ receiver7 size ]
						thatSends: #size
						to: receiver7 ] value
				do: [ :index |
					[ | receiver11 |
					receiver11 _ [ | receiver9 |
					receiver9 _ #_coverageTracker92549091_
						cover: (203 to: 207)
						declaredAt: (22 to: 26)
						by: aName.
					#_coverageTracker92549091_
						coverAll:
							{209 to: 209}
						evaluating: [
							receiver9 =
								[ | receiver8 |
								receiver8 _ #_coverageTracker92549091_
									cover: (212 to: 220)
									declaredAt: (168 to: 176)
									by: suspended.
								#_coverageTracker92549091_
									coverAll:
										{222 to: 224}
									evaluating: [
										receiver8 at:
											(#_coverageTracker92549091_
												cover: (226 to: 230)
												declaredAt: (193 to: 197)
												by: index) ]
									thatSends: #at:
									to: receiver8 ] value ]
						thatSends: #=
						to: receiver9 ] value.
					#_coverageTracker92549091_
						coverAll:
							{236 to: 242}
						evaluating: [
							receiver11 ifTrue: [
								[ | receiver10 |
								receiver10 _ #_coverageTracker92549091_
									cover: (250 to: 258)
									declaredAt: (168 to: 176)
									by: suspended.
								#_coverageTracker92549091_
									coverAll:
										{260 to: 268}
									evaluating: [
										receiver10 removeAt:
											(#_coverageTracker92549091_
												cover: (270 to: 274)
												declaredAt: (193 to: 197)
												by: index) ]
									thatSends: #removeAt:
									to: receiver10 ] value.
								^ #_coverageTracker92549091_
									cover: (283 to: 287)
									declaredAt: (22 to: 26)
									by: aName ]]
						thatSends: #ifTrue:
						to: receiver11 ] value ]]
		thatSends: #to:do:
		to: receiver12 ] value.
	^ [ | receiver13 |
	receiver13 _ #_coverageTracker92549091_
		coverAll:
			{305 to: 312}
		by: NotFound.
	#_coverageTracker92549091_
		coverAll:
			{314 to: 319}
		evaluating: [ receiver13 signal ]
		thatSends: #signal
		to: receiver13 ] value.! !
!Behavior method!
includesCustomerNamed: aName
	#_coverageTracker92549127_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker92549127_
		cover: (34 to: 39)
		declaredAt: (34 to: 39)
		by: active.
	#_coverageTracker92549127_
		coverAll:
			{41 to: 49}
		evaluating: [
			receiver1 includes:
				(#_coverageTracker92549127_
					cover: (51 to: 55)
					declaredAt: (24 to: 28)
					by: aName) ]
		thatSends: #includes:
		to: receiver1 ] value.
	#_coverageTracker92549127_
		coverAll:
			{58 to: 60}
		evaluating: [
			receiver3 or: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker92549127_
					cover: (64 to: 72)
					declaredAt: (64 to: 72)
					by: suspended.
				#_coverageTracker92549127_
					coverAll:
						{74 to: 82}
					evaluating: [
						receiver2 includes:
							(#_coverageTracker92549127_
								cover: (84 to: 88)
								declaredAt: (24 to: 28)
								by: aName) ]
					thatSends: #includes:
					to: receiver2 ] value ]]
		thatSends: #or:
		to: receiver3 ] value.! !
!Behavior method!
suspendCustomerNamed: aName
	#_coverageTracker92549142_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker92549142_
		cover: (34 to: 39)
		declaredAt: (34 to: 39)
		by: active.
	#_coverageTracker92549142_
		coverAll:
			{41 to: 49}
		evaluating: [
			receiver1 includes:
				(#_coverageTracker92549142_
					cover: (51 to: 55)
					declaredAt: (23 to: 27)
					by: aName) ]
		thatSends: #includes:
		to: receiver1 ] value.
	#_coverageTracker92549142_
		coverAll:
			{58 to: 65}
		evaluating: [ receiver3 ifFalse: [ ^ [ | receiver2 |
				receiver2 _ #_coverageTracker92549142_
					coverAll:
						{69 to: 79}
					by: CantSuspend.
				#_coverageTracker92549142_
					coverAll:
						{81 to: 86}
					evaluating: [ receiver2 signal ]
					thatSends: #signal
					to: receiver2 ] value ]]
		thatSends: #ifFalse:
		to: receiver3 ] value.
	[ | receiver4 |
	receiver4 _ #_coverageTracker92549142_
		cover: (93 to: 98)
		declaredAt: (34 to: 39)
		by: active.
	#_coverageTracker92549142_
		coverAll:
			{100 to: 106}
		evaluating: [
			receiver4 remove:
				(#_coverageTracker92549142_
					cover: (108 to: 112)
					declaredAt: (23 to: 27)
					by: aName) ]
		thatSends: #remove:
		to: receiver4 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker92549142_
		cover: (118 to: 126)
		declaredAt: (118 to: 126)
		by: suspended.
	#_coverageTracker92549142_
		coverAll:
			{128 to: 131}
		evaluating: [
			receiver5 add:
				(#_coverageTracker92549142_
					cover: (133 to: 137)
					declaredAt: (23 to: 27)
					by: aName) ]
		thatSends: #add:
		to: receiver5 ] value.! !
!Behavior method!
isEmpty
	#_coverageTracker92549152_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker92549152_
		cover: (13 to: 18)
		declaredAt: (13 to: 18)
		by: active.
	#_coverageTracker92549152_
		coverAll:
			{20 to: 26}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.
	#_coverageTracker92549152_
		coverAll:
			{28 to: 31}
		evaluating: [
			receiver3 and: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker92549152_
					cover: (35 to: 43)
					declaredAt: (35 to: 43)
					by: suspended.
				#_coverageTracker92549152_
					coverAll:
						{45 to: 51}
					evaluating: [ receiver2 isEmpty ]
					thatSends: #isEmpty
					to: receiver2 ] value ]]
		thatSends: #and:
		to: receiver3 ] value.! !
!Behavior method!
signalCustomerAlreadyExists
	#_coverageTracker92549157_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker92549157_
		coverAll:
			{32 to: 35}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker92549157_
		coverAll:
			{37 to: 42}
		evaluating: [
			receiver3 error:
				[ | receiver2 |
				receiver2 _ [ | receiver1 |
				receiver1 _ #_coverageTracker92549157_
					coverAll:
						{44 to: 47}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker92549157_
					coverAll:
						{49 to: 53}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value.
				#_coverageTracker92549157_
					coverAll:
						{55 to: 87}
					evaluating: [ receiver2 customerAlreadyExistsErrorMessage ]
					thatSends: #customerAlreadyExistsErrorMessage
					to: receiver2 ] value ]
		thatSends: #error:
		to: receiver3 ] value.! !
!Behavior method!
numberOfActiveCustomers
	#_coverageTracker92549159_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker92549159_
		cover: (29 to: 34)
		declaredAt: (29 to: 34)
		by: active.
	#_coverageTracker92549159_
		coverAll:
			{36 to: 39}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.! !
!Behavior method!
initialize
	#_coverageTracker92549171_ markAsExecuted.
	#_coverageTracker92549171_
		cover: (14 to: 19)
		declaredAt: (14 to: 19)
		by:
			(active _ [ | receiver1 |
			receiver1 _ #_coverageTracker92549171_
				coverAll:
					{24 to: 40}
				by: OrderedCollection.
			#_coverageTracker92549171_
				coverAll:
					{42 to: 44}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker92549171_
		cover: (48 to: 56)
		declaredAt: (48 to: 56)
		by:
			(suspended _ [ | receiver2 |
			receiver2 _ #_coverageTracker92549171_
				coverAll:
					{60 to: 76}
				by: OrderedCollection.
			#_coverageTracker92549171_
				coverAll:
					{78 to: 80}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'WAL 4/11/2023 21:54:55'!
PASSED!

!classRemoval: #CustomerBook stamp: 'WAL 4/11/2023 22:48:25'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'WAL 4/11/2023 22:48:25'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'WAL 4/11/2023 22:48:25'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'WAL 4/11/2023 22:48:25'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of /home/a/s/e/c/is1/tp/01/CodigoRepetido-Ejercicio.st----!

!classRemoval: #CustomerBook stamp: 'WAL 4/11/2023 22:49:16'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'WAL 4/11/2023 22:49:16'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'WAL 4/11/2023 22:49:17'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'WAL 4/11/2023 22:49:17'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of /home/a/s/e/c/is1/tp/01/CodigoRepetido-Ejercicio.st----!
!CustomerBookTest methodsFor: 'testing' stamp: 'WAL 4/11/2023 22:54:19'!
timeTakenToExecuteBlock: aBlock

	| millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	^millisecondsAfterRunning-millisecondsBeforeRunning! !
!CustomerBookTest methodsFor: 'testing' stamp: 'WAL 4/11/2023 22:55:09' prior: 50611495!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !

Time!

Time millisecondClockValue!
!CustomerBookTest methodsFor: 'auxilliary methods for testing' stamp: 'WAL 4/11/2023 22:57:31'!
measureTimeAndExecuteBlock: aBlock

	| millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	^millisecondsAfterRunning-millisecondsBeforeRunning! !
!CustomerBookTest methodsFor: 'auxilliary methods for testing' stamp: 'WAL 4/11/2023 22:58:26'!
measureTimeToExecuteBlock: aBlock

	| millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	^millisecondsAfterRunning-millisecondsBeforeRunning! !
!CustomerBookTest methodsFor: 'auxilliary methods for testing' stamp: 'WAL 4/11/2023 22:59:33' prior: 50611784!
measureTimeToExecuteBlock: aBlock

	| millisecondClockValueBeforeRunning millisecondClockValueAfterRunning |
	
	millisecondClockValueBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondClockValueAfterRunning := Time millisecondClockValue * millisecond.
	
	^millisecondClockValueAfterRunning-millisecondClockValueBeforeRunning! !

!methodRemoval: CustomerBookTest #measureTimeAndExecuteBlock: stamp: 'WAL 4/11/2023 22:59:52'!
measureTimeAndExecuteBlock: aBlock

	| millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	^millisecondsAfterRunning-millisecondsBeforeRunning!

!methodRemoval: CustomerBookTest #timeTakenToExecuteBlock: stamp: 'WAL 4/11/2023 22:59:58'!
timeTakenToExecuteBlock: aBlock

	| millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	^millisecondsAfterRunning-millisecondsBeforeRunning!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'WAL 4/11/2023 23:00:19'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'WAL 4/11/2023 23:00:37'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'WAL 4/11/2023 23:00:37'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'WAL 4/11/2023 23:00:37'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'WAL 4/11/2023 23:00:37'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'WAL 4/11/2023 23:00:37'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'WAL 4/11/2023 23:00:37'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'WAL 4/11/2023 23:00:37'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'WAL 4/11/2023 23:00:37'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'WAL 4/11/2023 23:05:18' prior: 50611752!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning timeToExecuteBlock |
	
	customerBook := CustomerBook new.
	
	"timeToExecuteBlock := self measureTimeToExecuteBlock: [customerBook addCustomerNamed: 'John Lennon']
	
	self assert: timeToExecuteBlock < (50 * millisecond)"
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'WAL 4/11/2023 23:08:54' prior: 50611872!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook timeToExecuteBlock |
	
	customerBook := CustomerBook new.
	
	timeToExecuteBlock := self measureTimeToExecuteBlock: [customerBook addCustomerNamed: 'John Lennon'].
	
	self assert: timeToExecuteBlock < (50 * millisecond)
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'WAL 4/11/2023 23:09:05'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'WAL 4/11/2023 23:09:05'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'WAL 4/11/2023 23:09:05'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'WAL 4/11/2023 23:09:05'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'WAL 4/11/2023 23:09:05'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'WAL 4/11/2023 23:09:05'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'WAL 4/11/2023 23:09:05'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'WAL 4/11/2023 23:09:05'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'WAL 4/11/2023 23:11:07' prior: 50611512!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook timeToExecuteBlock paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	timeToExecuteBlock := self measureTimeToExecuteBlock: [customerBook removeCustomerNamed: paulMcCartney].
	
	self assert: timeToExecuteBlock < (100 * millisecond)
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'WAL 4/11/2023 23:11:20'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'WAL 4/11/2023 23:11:20'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'WAL 4/11/2023 23:11:20'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'WAL 4/11/2023 23:11:20'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'WAL 4/11/2023 23:11:20'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'WAL 4/11/2023 23:11:20'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'WAL 4/11/2023 23:11:20'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'WAL 4/11/2023 23:11:20'!
PASSED!

self fail!

| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]!
!CustomerBook methodsFor: 'customer management' stamp: 'WAL 4/11/2023 23:41:27' prior: 50611662!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'WAL 4/11/2023 23:49:33' prior: 50611685!
removeCustomerNamed: aName 
 
	active := active reject: [:element | element = aName] .

	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	]."

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'WAL 4/11/2023 23:49:50'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'WAL 4/11/2023 23:49:50'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'WAL 4/11/2023 23:49:50'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'WAL 4/11/2023 23:49:50'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'WAL 4/11/2023 23:49:50'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'WAL 4/11/2023 23:49:50'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'WAL 4/11/2023 23:49:50'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'WAL 4/11/2023 23:49:50'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'WAL 4/11/2023 23:49:50'!
ERROR!

NotFound signal!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'WAL 4/11/2023 23:57:12'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'WAL 4/11/2023 23:57:16'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'WAL 4/11/2023 23:57:16'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'WAL 4/12/2023 00:00:41'!
ERROR!

NotFound signal!

| aNameFound |
	
	aNameFound := ''.!
!CustomerBook methodsFor: 'customer management' stamp: 'WAL 4/12/2023 00:55:57' prior: 50611989!
removeCustomerNamed: aName 
 
	| nameFoundInActive nameFoundInSuspended absentInActive absentInSuspended |
	
	absentInActive:= False. 
	nameFoundInActive := ''.
	nameFoundInActive := active remove: aName ifAbsent: [ absentInActive := True ] .

	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	]."

	absentInActive:= False. 
	nameFoundInSuspended := ''.
	nameFoundInSuspended := suspended remove: aName ifAbsent: [ absentInSuspended := True ] .
	
	"1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	]."
	
	absentInActive ifTrue: [ 
		absentInSuspended ifTrue: [ 
			^ NotFound signal
		] ifFalse: [
			^ nameFoundInSuspended
		]
	] ifFalse: [
		^ nameFoundInActive
	]
	
	.
! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'WAL 4/12/2023 00:56:09'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'WAL 4/12/2023 00:56:09'!
ERROR!

----SNAPSHOT----(12 April 2023 09:23:23) CuisUniversity-5706.image priorSource: 8916060!

----STARTUP---- (12 April 2023 18:08:17) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!

!CustomerBookTest methodsFor: 'testing' stamp: 'WAL 4/12/2023 18:41:25' prior: 50611532!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.


	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'WAL 4/12/2023 18:41:30' prior: 50612100!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.



	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !

self error: self class customerCanNotBeEmptyErrorMessage !

----STARTUP---- (15 April 2023 12:59:35) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!classRemoval: #CustomerBook stamp: 'WAL 4/15/2023 13:00:07'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'WAL 4/15/2023 13:00:08'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'WAL 4/15/2023 13:00:08'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'WAL 4/15/2023 13:00:08'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of /home/a/s/e/c/is1/tp/01/CodigoRepetido-SolucionSinSetup.st----!
!CustomerBookTest methodsFor: 'testing' stamp: 'WAL 4/15/2023 13:07:00' prior: 50612249!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.



	self 
		should: [customerBook addCustomerNamed: '']
		raise: Error
		assert: [:anError |  
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'WAL 4/15/2023 13:07:29' prior: 50612311!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	
	self
		should: [customerBook suspendCustomerNamed: 'George Harrison']
		raise: CantSuspend 
		assert: [:anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon)]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'WAL 4/15/2023 13:07:33' prior: 50612464!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.




	self 
		should: [customerBook addCustomerNamed: '']
		raise: Error
		assert: [:anError |  
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'WAL 4/15/2023 13:07:36' prior: 50612262!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	
	self 
		should: [customerBook removeCustomerNamed: 'Paul McCartney']
		raise: NotFound 
		assert: [:anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon)]! !

----STARTUP---- (15 April 2023 13:27:18) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!

!CustomerBookTest methodsFor: 'testing' stamp: 'WAL 4/15/2023 13:28:14' prior: 50611599!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'WAL 4/15/2023 13:28:26' prior: 50611544!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'WAL 4/15/2023 13:28:29' prior: 50611532!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.




	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !

----STARTUP---- (15 April 2023 13:34:15) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!classRemoval: #CustomerBook stamp: 'WAL 4/15/2023 13:34:29'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'WAL 4/15/2023 13:34:29'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'WAL 4/15/2023 13:34:29'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'WAL 4/15/2023 13:34:29'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

----End fileIn of /home/a/s/e/c/is1/tp/01/CodigoRepetido-SolucionConSetup.st----!

----SNAPSHOT----(15 April 2023 13:36:35) CuisUniversity-5706.image priorSource: 8974184!

----End fileIn of /home/a/s/sw/smalltalk/Pre-Numeros-Ejercicio.st----!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 14:02:27'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 14:02:34'!
PASSED!
!NumeroTest methodsFor: 'setup' stamp: 'WAL 4/15/2023 14:10:54' prior: 50613001 overrides: 16961394!
setUp

	zero   := Numero with: 0.
	one    := Numero with: 1.
	two    := Numero with: 2.
	three  := Numero with: 3.
	four    := Numero with: 4.
	five     := Numero with: 5.
	eight   := Numero with: 8.
	negativeOne := Numero with: -1.
	negativeTwo := Numero with: -2.
	
	oneHalf := Numero with: one over: two.
	oneFifth := Numero with: one over: five.
	twoFifth := Numero with: two over: five.
	twoTwentyfifth := Numero with: two over: (Numero with: 25).
	fiveHalfs := Numero with: five over: two.
	negativeOneHalf := Numero with: negativeOne over: two
	! !

----SNAPSHOT----(15 April 2023 15:14:13) CuisUniversity-5706.image priorSource: 8999354!

----STARTUP---- (15 April 2023 19:04:19) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'WAL 4/15/2023 19:07:50'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'no messages' stamp: 'WAL 4/15/2023 19:09:53' overrides: 50613033!
* anIntegerToMultiply

	 ^self class with: value * anIntegerToMultiply integerValue .! !

Numero subclass: #Fracion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fracion category: 'Numero-Exercise' stamp: 'WAL 4/15/2023 19:10:16'!
Numero subclass: #Fracion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fracion methodsFor: 'nil' stamp: 'WAL 4/15/2023 19:11:02' overrides: 50613033!
* aFractionToMultiply

	^self class with: (numerator * aFractionToMultiply numerator) over: (denominator * aFractionToMultiply denominator)! !

Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'WAL 4/15/2023 19:11:32'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fraccion methodsFor: 'nil' stamp: 'WAL 4/15/2023 19:11:55' overrides: 50613033!
* aFractionToMultiply

	^self class with: (numerator * aFractionToMultiply numerator) over: (denominator * aFractionToMultiply denominator)! !

!classRemoval: #Fracion stamp: 'WAL 4/15/2023 19:12:07'!
Numero subclass: #Fracion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Numero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:12:59' prior: 50613033!
* aMultiplier 

	^self subclassResponsibility 
		
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:13:13' prior: 50613361!
* aMultiplier 

	^self subclassResponsibility
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:14:00' overrides: 50613047!
+ anAdder 
	
	(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	(type = #Fraccion and: [anAdder type = #Fraccion]) ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	
	self error: 'Tipo de número no soportado'
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:14:00' overrides: 50613047!
+ anAdder 
	
	(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	(type = #Fraccion and: [anAdder type = #Fraccion]) ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	
	self error: 'Tipo de número no soportado'
	! !

!methodRemoval: Numero #+ stamp: 'WAL 4/15/2023 19:14:00'!
+ anAdder 
	
	(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	(type = #Fraccion and: [anAdder type = #Fraccion]) ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	
	self error: 'Tipo de número no soportado'
	!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:14:29' overrides: 50613065!
// aDivisor 
	
	type = #Entero ifTrue:
		[ ^self class with: value // aDivisor integerValue ].
		
	self error: 'Tipo de número no soportado'! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:14:29' overrides: 50613065!
// aDivisor 
	
	type = #Entero ifTrue:
		[ ^self class with: value // aDivisor integerValue ].
		
	self error: 'Tipo de número no soportado'! !

!methodRemoval: Numero #// stamp: 'WAL 4/15/2023 19:14:29'!
// aDivisor 
	
	type = #Entero ifTrue:
		[ ^self class with: value // aDivisor integerValue ].
		
	self error: 'Tipo de número no soportado'!
!Entero methodsFor: 'comparing' stamp: 'WAL 4/15/2023 19:14:38' overrides: 50613151!
= anObject

	^(anObject isKindOf: self class) and: [ type = anObject type and: 
		[ type = #Entero ifTrue: [ value = anObject integerValue] 
		ifFalse: [ type = #Fraccion ifTrue:
			[ (numerator * anObject denominator) = (denominator * anObject numerator) ]]]]! !
!Fraccion methodsFor: 'comparing' stamp: 'WAL 4/15/2023 19:14:38' overrides: 50613151!
= anObject

	^(anObject isKindOf: self class) and: [ type = anObject type and: 
		[ type = #Entero ifTrue: [ value = anObject integerValue] 
		ifFalse: [ type = #Fraccion ifTrue:
			[ (numerator * anObject denominator) = (denominator * anObject numerator) ]]]]! !

!methodRemoval: Numero #= stamp: 'WAL 4/15/2023 19:14:38'!
= anObject

	^(anObject isKindOf: self class) and: [ type = anObject type and: 
		[ type = #Entero ifTrue: [ value = anObject integerValue] 
		ifFalse: [ type = #Fraccion ifTrue:
			[ (numerator * anObject denominator) = (denominator * anObject numerator) ]]]]!
!Entero methodsFor: 'accessing' stamp: 'WAL 4/15/2023 19:15:44' overrides: 50613137!
denominator

	^denominator! !
!Fraccion methodsFor: 'accessing' stamp: 'WAL 4/15/2023 19:15:44' overrides: 50613137!
denominator

	^denominator! !

!methodRemoval: Numero #denominator stamp: 'WAL 4/15/2023 19:15:44'!
denominator

	^denominator!
!NumeroTest methodsFor: 'setup' stamp: 'WAL 4/15/2023 19:18:12' prior: 50613275 overrides: 16961394!
setUp

	zero   := Entero with: 0.
	one    := Entero with: 1.
	two    := Entero with: 2.
	three  := Entero with: 3.
	four    := Entero with: 4.
	five     := Entero with: 5.
	eight   := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := Fraccion with: one over: two.
	oneFifth := Fraccion with: one over: five.
	twoFifth := Fraccion with: two over: five.
	twoTwentyfifth := Fraccion with: two over: (Entero with: 25).
	fiveHalfs := Fraccion with: five over: two.
	negativeOneHalf := Fraccion with: negativeOne over: two
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 19:18:16'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 19:18:16'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 19:18:16'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 19:18:16'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:18:16'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:18:16'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:18:16'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:18:16'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 19:18:16'!
FAILURE!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:18:16'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:18:16'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 19:18:16'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 19:18:16'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 19:18:16'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 19:18:16'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 19:18:16'!
FAILURE!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 19:18:16'!
FAILURE!
!NumeroTest methodsFor: 'tests' stamp: 'WAL 4/15/2023 19:18:44' prior: 50612953!
test09AparentFraccionesAreEqual

	self assert: oneHalf equals: (Fraccion with: two over: four)! !
!NumeroTest methodsFor: 'tests' stamp: 'WAL 4/15/2023 19:18:56' prior: 50612987!
test16SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (Fraccion with: negativeOne over: negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'WAL 4/15/2023 19:19:02' prior: 50612994!
test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (Fraccion with: one over: negativeTwo)! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:19:06'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 19:19:06'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:19:06'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:19:16'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 19:19:16'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:19:16'!
ERROR!
!Numero methodsFor: 'testing' stamp: 'WAL 4/15/2023 19:21:56'!
// aMultiplier 

	^self subclassResponsibility
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:25:23' prior: 50613372!
+ anAdder 
	
	(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ ^self class with: value + anAdder integerValue ].

	
	self error: 'Tipo de número no soportado'
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:26:11' prior: 50613712!
+ anAdder 
	
	^self class with: value + anAdder integerValue .

	
	"self error: 'Tipo de número no soportado'"
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:28:53'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 19:28:53'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:28:53'!
ERROR!
!NumeroTest methodsFor: 'tests' stamp: 'WAL 4/15/2023 19:29:36' prior: 50612931!
test07FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := Fraction with: (Entero with: 7) over: (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 19:29:46'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 19:29:46'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 19:29:46'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 19:29:46'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:29:46'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:29:46'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:29:46'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:29:46'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 19:29:47'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:29:47'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:29:47'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 19:29:47'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 19:29:47'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 19:29:47'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 19:29:47'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 19:29:47'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 19:29:47'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:29:47'!
ERROR!
!NumeroTest methodsFor: 'tests' stamp: 'WAL 4/15/2023 19:30:51' prior: 50613787!
test07FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := Fraccion with: (Entero with: 7) over: (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 19:30:55'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:31:28' prior: 50613426 overrides: 50613707!
// aDivisor 
	

	^self class with: value // aDivisor integerValue.
		
	"self error: 'Tipo de número no soportado'"! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:31:45' prior: 50613434 overrides: 50613707!
// aDivisor 
	
	self error: 'Tipo de número no soportado'! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 19:31:51'!
PASSED!
!Numero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:32:45'!
+ aMultiplier 

	^self subclassResponsibility
	! !
!Numero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:32:58' prior: 50613707!
// aMultiplier 

	^self subclassResponsibility
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:35:19' overrides: 50613072!
greatestCommonDivisorWith: anEntero 
	
	type = #Entero ifTrue:
		[^self class with: (value gcd: anEntero integerValue)].
		
	self error: 'Tipo de número no soportado'! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:35:19' overrides: 50613072!
greatestCommonDivisorWith: anEntero 
	
	type = #Entero ifTrue:
		[^self class with: (value gcd: anEntero integerValue)].
		
	self error: 'Tipo de número no soportado'! !

!methodRemoval: Numero #greatestCommonDivisorWith: stamp: 'WAL 4/15/2023 19:35:19'!
greatestCommonDivisorWith: anEntero 
	
	type = #Entero ifTrue:
		[^self class with: (value gcd: anEntero integerValue)].
		
	self error: 'Tipo de número no soportado'!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:35:34' overrides: 50613080!
negated
	
	type = #Entero ifTrue:
		[ ^self * (self class with: -1) ].
	type = #Fraccion ifTrue:
		[ ^self class with: numerator * (self class with: -1) over: denominator ].! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:35:35' overrides: 50613080!
negated
	
	type = #Entero ifTrue:
		[ ^self * (self class with: -1) ].
	type = #Fraccion ifTrue:
		[ ^self class with: numerator * (self class with: -1) over: denominator ].! !

!methodRemoval: Numero #negated stamp: 'WAL 4/15/2023 19:35:35'!
negated
	
	type = #Entero ifTrue:
		[ ^self * (self class with: -1) ].
	type = #Fraccion ifTrue:
		[ ^self class with: numerator * (self class with: -1) over: denominator ].!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:35:45' overrides: 50613089!
printOn: aStream
	
	type = #Entero ifTrue:
		[ aStream print: value ].
	
	type = #Fraccion ifTrue:
		[ aStream 
			print: numerator;
			nextPut: $/;
			print: denominator ].! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:35:45' overrides: 50613089!
printOn: aStream
	
	type = #Entero ifTrue:
		[ aStream print: value ].
	
	type = #Fraccion ifTrue:
		[ aStream 
			print: numerator;
			nextPut: $/;
			print: denominator ].! !

!methodRemoval: Numero #printOn: stamp: 'WAL 4/15/2023 19:35:45'!
printOn: aStream
	
	type = #Entero ifTrue:
		[ aStream print: value ].
	
	type = #Fraccion ifTrue:
		[ aStream 
			print: numerator;
			nextPut: $/;
			print: denominator ].!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:35:48' overrides: 50613097!
type
	
	^type! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:35:48' overrides: 50613097!
type
	
	^type! !

!methodRemoval: Numero #type stamp: 'WAL 4/15/2023 19:35:48'!
type
	
	^type!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:36:38' prior: 50614037!
negated
	
	^self * (self class with: -1) .! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:37:11' prior: 50614063 overrides: 16902975!
printOn: aStream
	
	 aStream print: value.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:37:57' prior: 50614011!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (value gcd: anEntero integerValue).
		
	"self error: 'Tipo de número no soportado'"! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 19:38:06'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:39:12' prior: 50613391 overrides: 50614001!
+ anAdder 
	
	 | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator.
	
	"self error: 'Tipo de número no soportado'"
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:39:58' prior: 50614020!
greatestCommonDivisorWith: anEntero 
	
	self error: 'Tipo de número no soportado'! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:40:09' prior: 50614046!
negated
	
	^self class with: numerator * (self class with: -1) over: denominator.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:40:35' prior: 50614072 overrides: 16902975!
printOn: aStream
	
	aStream 
			print: numerator;
			nextPut: $/;
			print: denominator.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 19:40:51'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:52:24' prior: 50614173 overrides: 50614001!
+ anAdder 
	
	 | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 19:52:35' prior: 50613932 overrides: 50614006!
// aDivisor 
	

	^self class with: value // aDivisor integerValue.
		! !

!classRemoval: #Fraccion stamp: 'WAL 4/15/2023 19:55:07'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 4/15/2023 19:55:07'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 4/15/2023 19:55:07'!
Object subclass: #Numero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 4/15/2023 19:55:07'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/a/s/sw/smalltalk/Numeros-Ejercicio.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 20:09:12'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:09:12'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 20:09:12'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 20:09:12'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 20:09:12'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 20:09:12'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:12:42' prior: 50614693 overrides: 50614622!
+ anAdder 
	
	"^self class with: value + anAdder integerValue."
	
	^anAdder addInteger: self.
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:13:46'!
addInteger: anInteger 
	
	^self class with: value + anInteger integerValue.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:13:54' prior: 50615064 overrides: 50614622!
+ anAdder 
	
	^anAdder addInteger: self.
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:18:15'!
addInteger: anInteger 
	
	^self + self class .
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:19:16' prior: 50615081!
addInteger: anInteger 
	
	^self + self class with: anInteger over: (Entero with: 1).
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 20:19:29'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:19:29'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 20:19:29'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 20:19:29'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 20:19:29'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 20:19:29'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:20:45'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:23:42'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:27:00'!
addFraction: aFraction 
	
	^self + aFraction.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:28:57'!
addFraction: aFraction
	
	^aFraction addInteger: self.
! !
!Numero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:30:48'!
addFraction: aFraction 
	
	^self subclassResponsibility.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:31:03'!
addInteger: anInteger
	
	^self subclassResponsibility.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 20:34:53'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:34:53'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 20:34:53'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 20:34:53'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 20:34:53'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 20:34:53'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 20:35:19'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:35:19'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 20:35:19'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 20:35:19'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 20:35:19'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 20:35:19'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:35:21'!
ERROR!

anAdder numerator!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:43:11' prior: 50615086 overrides: 50615249!
addInteger: anInteger 
	
	^self + self class with: anInteger integerValue over: 1.
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 20:43:27'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:43:27'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 20:43:27'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 20:43:27'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 20:43:27'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 20:43:27'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:43:35'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:44:19' prior: 50615533 overrides: 50615249!
addInteger: anInteger 
	
	^self + self class with: (anInteger integerValue) over: 1.
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 20:44:36'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:44:36'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 20:44:36'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 20:44:36'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 20:44:36'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 20:44:36'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:44:41'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:46:33' prior: 50615680 overrides: 50615249!
addInteger: anInteger 
	
	^self + (self class with: (anInteger integerValue) over: 1).
	! !

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:46:44'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:46:51'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:46:56'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:48:26'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:49:14' prior: 50615827 overrides: 50615249!
addInteger: anInteger 
	
	^self + self class with: anInteger over: (Entero with: 1).
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 20:49:26'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:49:26'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 20:49:26'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 20:49:26'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 20:49:26'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 20:49:26'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:49:31'!
ERROR!

1 class!

anInteger class!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:51:45'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:51:56'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:52:05'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:54:06'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:54:23' prior: 50615846 overrides: 50615249!
addInteger: anInteger 
	
	^self + anInteger / (Entero with: 1).
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 20:54:33' prior: 50616006 overrides: 50615249!
addInteger: anInteger 
	
	^self + (anInteger / (Entero with: 1)).
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 20:54:40'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 20:54:40'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 20:54:40'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 20:54:40'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 20:54:40'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 20:54:40'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 20:54:46'!
ERROR!

(anInteger / (Entero with: 1))!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:02:21' prior: 50616012 overrides: 50615249!
addInteger: anInteger 
	
	^self + self class with: anInteger over: (Entero with: 1).! !

denominador := Entero with: 1.!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:08:01' prior: 50616159 overrides: 50615249!
addInteger: anInteger 
	
	| nuevoNumerador |
	
	nuevoNumerador := (anInteger * self denominator) + self numerator .
	
	^self class with: nuevoNumerador over: self denominator.
	
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 21:08:39'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 21:08:39'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 21:08:39'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 21:08:39'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 21:08:39'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 21:08:39'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 21:09:04'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 21:10:07'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:13:01' prior: 50614815 overrides: 50614622!
+ anAdder 
	
	^anAdder addFraction: self.
	
	"| newNumerator newDenominator |
	
	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	
	^newNumerator / newDenominator "! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 21:13:21'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 21:13:21'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 21:13:21'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 21:13:21'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 21:13:21'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 21:13:21'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 21:13:21'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:14:46' prior: 50615235 overrides: 50615244!
addFraction: aFraction 

	| newNumerator newDenominator |
	
	newNumerator := (numerator * aFraction denominator) + (denominator * aFraction numerator).
	newDenominator := denominator * aFraction denominator.
	
	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:14:48' prior: 50616320 overrides: 50614622!
+ anAdder 
	
	^anAdder addFraction: self.
	! !

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 21:14:58'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 21:15:19'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 21:16:48'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:18:20'!
multiplyWithInteger: anInteger
	
	^self class with: value * anInteger integerValue
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:19:48' prior: 50614687 overrides: 50614617!
* aMultiplier 
	
	^aMultiplier multiplyWithInteger: self.
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:23:38'!
multiplyWithInteger: anInteger
	
	"^(self numerator * anInteger numerator) / ( self denominator )"
	
	^self class with: self numerator * anInteger over: self denominator ! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 21:25:42'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 21:25:42'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 21:25:42'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 21:25:42'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 21:25:42'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 21:25:42'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 21:25:54'!
ERROR!
!Numero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:26:57'!
multiplyWithInteger: aNumber

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:27:22' prior: 50616542!
multiplyWithInteger: aNumber

	^self subclassResponsibility! !

self subclassResponsibility!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:30:18'!
multiplyWithFraction: aFraction
	
	^(numerator * aFraction numerator) / (denominator * aFraction denominator)
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:31:51' prior: 50614808 overrides: 50614617!
* aMultiplier 
	
	^aMultiplier multiplyWithFraction: self.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:33:18'!
multiplyWithFraction: aFraction 
	
	^aFraction multiplyWithInteger: self.
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:33:46' prior: 50616393 overrides: 50616547!
multiplyWithInteger: anInteger
	
	^self class with: self numerator * anInteger over: self denominator 
	
	"Alternativa:
	^(self numerator * anInteger numerator) / ( self denominator )"
	! !
!Numero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:34:12'!
multiplyWithFraction: aFraction 
	
	^self subclassResponsibility.! !

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 21:34:19'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 21:47:48'!
ERROR!

----STARTUP---- (15 April 2023 19:27:22) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


----SNAPSHOT----(15 April 2023 21:52:22) CuisUniversity-5706.image priorSource: 9012619!

----SNAPSHOT----(15 April 2023 21:52:42) CuisUniversity-5706.image priorSource: 9012619!

1/5!

1/5+2!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 21:58:21'!
divideByAFraction: aFraction
	
	^(numerator * aFraction denominator) / (denominator * aFraction numerator)! !

----SNAPSHOT----(15 April 2023 22:03:25) CuisUniversity-5706.image priorSource: 9118348!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 22:51:25'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 22:51:25'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 22:51:25'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 22:51:25'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 22:51:26'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 22:51:39'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 22:57:08' prior: 50614705 overrides: 50614631!
/ aDivisor 
	
	(aDivisor isKindOf: Entero) ifTrue: [
		^Fraccion with: self over: aDivisor
	].

	(aDivisor isKindOf: Fraction) ifTrue: [
		^Fraccion with: self * aDivisor denominator over: aDivisor numerator
	].

	! !

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 22:57:16'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 22:58:41'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 22:58:41'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 22:58:41'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 22:58:41'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 22:58:44'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 22:58:56'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 23:00:33'!
FAILURE!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 23:02:45' prior: 50616751 overrides: 50614631!
/ aDivisor 
	
	(aDivisor isKindOf: Entero) ifTrue: [
		^Fraccion with: self over: aDivisor
	].

	(aDivisor isKindOf: Fraction) ifTrue: [
		^aDivisor divideByInteger: self
	].

	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 23:07:16'!
divideByInteger: anInteger
	
	^numerator / (denominator * anInteger integerValue)! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 23:07:37'!
divideByFraction: aFraction
	
	^(numerator * aFraction denominator) / (denominator * aFraction numerator)! !

!methodRemoval: Fraccion #divideByAFraction: stamp: 'WAL 4/15/2023 23:07:37'!
divideByAFraction: aFraction
	
	^(numerator * aFraction denominator) / (denominator * aFraction numerator)!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 23:07:57'!
FAILURE!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 23:12:31' prior: 50616912 overrides: 50614631!
/ aDivisor 
	
	(aDivisor isKindOf: Entero) ifTrue: [
		^Fraccion with: self over: aDivisor
	].

	(aDivisor isKindOf: Fraction) ifTrue: [
		^aDivisor divideByInteger: self
	].

	self error: 'Tipo de número no soportado'! !

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 23:12:38'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 23:18:50' prior: 50616943 overrides: 50614631!
/ aDivisor 
	
	[aDivisor isKindOf: Entero] ifTrue: [
		^Fraccion with: self over: aDivisor
	].

	[aDivisor isKindOf: Fraction] ifTrue: [
		^aDivisor divideByInteger: self
	].

	self error: 'Tipo de número no soportado'! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 23:20:27' prior: 50616957 overrides: 50614631!
/ aDivisor 
	
	[aDivisor isKindOf: Entero] value ifTrue: [
		^Fraccion with: self over: aDivisor
	].

	[aDivisor isKindOf: Fraction] value ifTrue: [
		^aDivisor divideByInteger: self
	].

	self error: 'Tipo de número no soportado'! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 23:20:35'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 23:20:35'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 23:20:35'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 23:20:35'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 23:21:00'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 23:21:32'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 23:22:03'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 23:22:03'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 23:22:03'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 23:22:04'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 23:22:04'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 23:22:04'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 23:22:04'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 23:22:04'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 23:22:08'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 23:30:54' prior: 50616968 overrides: 50614631!
/ aDivisor 
	
	[aDivisor isKindOf: Entero] value ifTrue: [
		^Fraccion with: self over: aDivisor
	].

	[aDivisor isKindOf: Fraction] value ifTrue: [
		^Fraccion with: self * aDivisor denominator over: aDivisor numerator
	].

	self error: 'Tipo de número no soportado'! !

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 23:31:09'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/15/2023 23:37:21'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/15/2023 23:37:21'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/15/2023 23:37:21'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/15/2023 23:37:21'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/15/2023 23:37:27'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/15/2023 23:59:59' prior: 50617263 overrides: 50614631!
/ aDivisor 
	
	[aDivisor isKindOf: Entero] value ifTrue: [
		"aDivisor divideTo: self."
		^Fraccion with: self over: aDivisor
	].

	[aDivisor isKindOf: Fraction] value ifTrue: [
		^Fraccion with: self * aDivisor denominator over: aDivisor numerator
	].

	self error: 'Tipo de número no soportado'! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:05:14' prior: 50617419 overrides: 50614631!
/ aDivisor 
	
	[aDivisor isKindOf: Entero] value ifTrue: [
		"aDivisor divideToInteger: self."
		^Fraccion with: self over: aDivisor
	].

	[aDivisor isKindOf: Fraction] value ifTrue: [
		^Fraccion with: self * aDivisor denominator over: aDivisor numerator
	].

	self error: 'Tipo de número no soportado'! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:07:04' prior: 50617432 overrides: 50614631!
/ aDivisor 
	^aDivisor divideAnInteger: self.
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:08:23'!
divideAnInteger: anInteger

		^Fraccion with: self over: anInteger.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:08:59'!
divideAnInteger: anInteger
	
	^Fraccion with: self * anInteger denominator over: anInteger numerator

! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:09:33' prior: 50617451!
divideAnInteger: anInteger

		^Fraccion with: anInteger over: self.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:10:19' prior: 50617456!
divideAnInteger: anInteger
	
	^Fraccion with: anInteger * self denominator over: self numerator

! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 00:10:27'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:10:27'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 00:10:27'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 00:10:27'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:12:42'!
divideAFraction: aFraction
	
	^Fraccion with: aFraction numerator * self denominator over: aFraction denominator * self numerator

! !
!Entero methodsFor: 'initialization' stamp: 'WAL 4/16/2023 00:14:53'!
divideAFraction: aFraction
	
	^Fraccion with: aFraction numerator over: aFraction denominator * self integerValue! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 00:15:05'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:15:05'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 00:15:05'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 00:15:05'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:15:10'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:17:07' prior: 50614837 overrides: 50614631!
/ aDivisor 
	^aDivisor divideAFraction: self.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 00:17:17'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:17:17'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 00:17:17'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 00:17:17'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:17:25'!
ERROR!
!Entero methodsFor: 'initialization' stamp: 'WAL 4/16/2023 00:19:51' prior: 50617619!
divideAFraction: aFraction
	
	^Fraccion with: aFraction numerator over: aFraction denominator * self! !

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:20:06'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 00:20:39'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:22:12'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 00:22:12'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 00:22:12'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:22:56'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:23:46'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 00:23:46'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 00:23:46'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:23:51'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:26:28' prior: 50614699 overrides: 50614626!
- aSubtrahend 
	^ aSubtrahend substractToInteger: self.
	"^ self class with: value - aSubtrahend integerValue."! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:28:57'!
substractToInteger: anInteger

	^ self class with: anInteger - self integerValue.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:34:24'!
substractToInteger: anInteger

	^ self class with: anInteger * self denominator - self numerator over: self denominator.

! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
ERROR!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:34:36'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:34:36'!
ERROR!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 00:34:36'!
ERROR!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 00:34:36'!
ERROR!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 00:34:36'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 00:34:36'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 00:34:36'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
ERROR!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:35:04'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:35:04'!
ERROR!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 00:35:04'!
ERROR!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 00:35:04'!
ERROR!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 00:35:04'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 00:35:04'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 00:35:04'!
PASSED!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:37:22' prior: 50618218!
substractToInteger: anInteger

	^ self class with: (anInteger * self denominator - self numerator) over: (self denominator).

! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:40:42' prior: 50618500!
substractToInteger: anInteger

	^ self class with: (anInteger * self denominator - self numerator) over: (self denominator).
	
	
	

! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:41:11' prior: 50618508!
substractToInteger: anInteger

	^ self class
			with: anInteger * self denominator - self numerator
			over: self denominator
	
	
	

! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
ERROR!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:15'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:41:15'!
ERROR!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 00:41:15'!
ERROR!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 00:41:15'!
ERROR!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 00:41:15'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 00:41:15'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 00:41:15'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 00:41:37'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 00:41:37'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 00:41:37'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 00:41:37'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:37'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:37'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:37'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:37'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:37'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:37'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:38'!
ERROR!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:38'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:41:38'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:38'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:41:38'!
ERROR!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 00:41:38'!
ERROR!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 00:41:38'!
ERROR!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 00:41:38'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 00:41:38'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 00:41:38'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:41:42'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:45:36' prior: 50618212!
substractToInteger: anInteger

	^ self class with: anInteger integerValue - self integerValue.! !

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:45:51'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:46:07'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:46:14'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:46:14'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:46:15'!
ERROR!

----SNAPSHOT----(16 April 2023 00:46:26) CuisUniversity-5706.image priorSource: 9118573!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:46:34'!
ERROR!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:46:57'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:46:58'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 00:47:59'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:47:59'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 00:48:04'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:48:04'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:49:07' prior: 50618206 overrides: 50614626!
- aSubtrahend 
	^ aSubtrahend substractToInteger: self.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:50:58' prior: 50614826 overrides: 50614626!
- aSubtrahend 

	^ aSubtrahend substractToFraction: self.


	"| newNumerator newDenominator |
	
	newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator "
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:55:04'!
substractToFraction: aFraction

	^ self class
			with: aFraction numerator * self denominator - self numerator * aFraction denominator
			over: aFraction denominator * self denominator
	
	
	

! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 00:58:37'!
substractToFraction: aFraction

	^ Fraction
			with: aFraction numerator - self integerValue * aFraction denominator
			over: aFraction denominator! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 00:59:01'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 00:59:01'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 00:59:01'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 00:59:01'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 00:59:10'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:00:50'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:01:34'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 01:02:18' prior: 50619145!
substractToFraction: aFraction

	^ Fraction
			with: aFraction numerator - self * aFraction denominator
			over: aFraction denominator! !

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:02:22'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:02:24'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:02:28'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:02:36'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:02:40'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:03:54'!
ERROR!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:05:46'!
FAILURE!

twoFifth - oneFifth!

----STARTUP---- (16 April 2023 01:08:59) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


----End fileIn of /home/a/s/sw/smalltalk/Numero-Exercise-2023-04-16-a.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:09:23'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:09:23'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 01:09:23'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 01:09:23'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:10:43'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:10:43'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 01:10:43'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 01:10:43'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:12:47'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:12:47'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 01:12:47'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 01:12:47'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:12:50'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:13:53'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:13:53'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 01:13:53'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 01:13:53'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:13:58'!
FAILURE!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 01:14:38' prior: 50619537!
substractToFraction: aFraction

	^ self class
			with: aFraction numerator * self denominator - (self numerator * aFraction denominator)
			over: aFraction denominator * self denominator
	
	
	

! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 01:14:42'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:14:42'!
ERROR!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:14:50'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:14:53'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 01:15:13' prior: 50619335!
substractToFraction: aFraction

	^ Fraction
			with: aFraction numerator - (self * aFraction denominator)
			over: aFraction denominator! !

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:15:20'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 01:16:00' prior: 50620356!
substractToFraction: aFraction

	^ Fraccion
			with: aFraction numerator - (self * aFraction denominator)
			over: aFraction denominator! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 01:16:04'!
PASSED!

----SNAPSHOT----(16 April 2023 01:17:29) CuisUniversity-5706.image priorSource: 9189515!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 01:17:33'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 01:17:34'!
PASSED!

----STARTUP---- (16 April 2023 15:15:02) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!

!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 15:20:35' prior: 50619304!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative       ifTrue:      [self error: Entero negativeFibonacciErrorDescription ].	
	
	(self isZero or: [self isOne])    ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci
		! !

Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroNegativo category: 'Numero-Exercise' stamp: 'WAL 4/16/2023 15:23:00'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'WAL 4/16/2023 15:23:35'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'WAL 4/16/2023 15:23:52'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #EnteroPositivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroPositivo category: 'Numero-Exercise' stamp: 'WAL 4/16/2023 15:24:01'!
Entero subclass: #EnteroPositivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!EnteroNegativo methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 15:24:13' overrides: 50620518!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative       ifTrue:      [self error: Entero negativeFibonacciErrorDescription ].	
	
	(self isZero or: [self isOne])    ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci
		! !
!Cero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 15:24:13' overrides: 50620518!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative       ifTrue:      [self error: Entero negativeFibonacciErrorDescription ].	
	
	(self isZero or: [self isOne])    ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci
		! !
!Uno methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 15:24:13' overrides: 50620518!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative       ifTrue:      [self error: Entero negativeFibonacciErrorDescription ].	
	
	(self isZero or: [self isOne])    ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci
		! !
!EnteroPositivo methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 15:24:13' overrides: 50620518!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative       ifTrue:      [self error: Entero negativeFibonacciErrorDescription ].	
	
	(self isZero or: [self isOne])    ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci
		! !

!methodRemoval: Entero #fibonacci stamp: 'WAL 4/16/2023 15:24:13'!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative       ifTrue:      [self error: Entero negativeFibonacciErrorDescription ].	
	
	(self isZero or: [self isOne])    ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci
		!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 15:24:40'!
fibonacci

	^self subclassResponsibility ! !
!Cero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 15:26:25' prior: 50620587 overrides: 50620635!
fibonacci

	| one |
	
	one := Entero with: 1.
	^one
		! !
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/16/2023 15:27:25' prior: 50619415!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initalizeWith: aValue! !
!Uno class methodsFor: 'no messages' stamp: 'WAL 4/16/2023 15:28:29' overrides: 16785646!
new
	
	^super new with: 1.! !
!Cero methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 15:29:08' prior: 50620640 overrides: 50620635!
fibonacci

	^Uno new.
		! !

	Cero fibonacci!

	Cero fibonacci!
!Cero class methodsFor: 'no messages' stamp: 'WAL 4/16/2023 15:31:23' overrides: 16785646!
new
	
	^super new with: 0.! !

	Cero fibonacci!

	cero := Cero new!
!Cero class methodsFor: 'as yet unclassified' stamp: 'WAL 4/16/2023 15:32:44' prior: 50620666 overrides: 16785646!
new
	
	^super new initalizeWith: 0.! !
!Uno class methodsFor: 'as yet unclassified' stamp: 'WAL 4/16/2023 15:32:48' prior: 50620656 overrides: 16785646!
new
	
	^super new initalizeWith: 1.! !

	cero := Cero new!

	cero fibonacci.!

	cinco := EnteroPositivo with: 5.!

	cinco class.!

	menoscinco := EnteroNegativo with: -5.!
!EnteroNegativo class methodsFor: 'no messages' stamp: 'WAL 4/16/2023 15:41:18' overrides: 50620645!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue < 0) ifFalse: [  self error: 'aValue debe ser negativo' ].
	
	^super new initalizeWith: aValue! !
!EnteroPositivo class methodsFor: 'no messages' stamp: 'WAL 4/16/2023 15:41:40' overrides: 50620645!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue > 0) ifFalse: [  self error: 'aValue debe ser positivo' ].
	
	^super new initalizeWith: aValue! !
!EnteroNegativo class methodsFor: 'as yet unclassified' stamp: 'WAL 4/16/2023 15:43:04' prior: 50620686 overrides: 50620645!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	
	"aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ]."
	
	(aValue < 0) ifFalse: [  self error: 'aValue debe ser negativo' ].
	
	^super new initalizeWith: aValue! !
!EnteroPositivo class methodsFor: 'as yet unclassified' stamp: 'WAL 4/16/2023 15:43:13' prior: 50620700 overrides: 50620645!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	
	"aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ]."
	
	(aValue > 0) ifFalse: [  self error: 'aValue debe ser positivo' ].
	
	^super new initalizeWith: aValue! !

	menos0ComaCinco := EnteroNegativo with: -0.5.!
!EnteroPositivo class methodsFor: 'as yet unclassified' stamp: 'WAL 4/16/2023 15:46:43' prior: 50620728 overrides: 50620645!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue > 0) ifFalse: [  self error: 'aValue debe ser positivo' ].
	
	^super new initalizeWith: aValue! !
!EnteroNegativo class methodsFor: 'as yet unclassified' stamp: 'WAL 4/16/2023 15:46:49' prior: 50620714 overrides: 50620645!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue < 0) ifFalse: [  self error: 'aValue debe ser negativo' ].
	
	^super new initalizeWith: aValue! !

	menos0ComaCinco := EnteroNegativo with: -0.5.!

----SNAPSHOT----(16 April 2023 15:48:23) CuisUniversity-5706.image priorSource: 9243544!
!Uno methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 15:49:12' prior: 50620599 overrides: 50620635!
fibonacci

	^Entero with: 1.
	
	
		! !
!Uno methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 15:49:33' prior: 50620776 overrides: 50620635!
fibonacci

	^Uno new.
	
	
		! !
!EnteroNegativo methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 15:50:04' prior: 50620575 overrides: 50620635!
fibonacci

	self error: Entero negativeFibonacciErrorDescription.
		! !
!EnteroPositivo methodsFor: 'arithmetic operations' stamp: 'WAL 4/16/2023 15:51:42' prior: 50620612 overrides: 50620635!
fibonacci

	| one two |
	
	one := Uno new.
	two := EnteroPositivo with: 2.

	^ (self - one) fibonacci + (self - two) fibonacci
		! !

----SNAPSHOT----(16 April 2023 15:53:35) CuisUniversity-5706.image priorSource: 9251889!

	cinco fibonacci.!

	cinco fibonacci.!

	cinco fibonacci.!

	tres := EnteroPositivo with: 3.!

	dos := EnteroPositivo with: 2.!

	uno := tres - dos.!

	uno = Uno new.!

	uno := tres - dos.!

	uno class.!

EnteroPositivo subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'WAL 4/16/2023 16:03:39'!
EnteroPositivo subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

	uno = Uno new.!

	cinco := EnteroPositivo with: 5.!

	cinco fibonacci.!

	tres - tres.!

EnteroPositivo subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'WAL 4/16/2023 16:11:39'!
EnteroPositivo subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

	cinco fibonacci.!

!classRenamed: #EnteroPositivo as: #NaturalesConCero stamp: 'WAL 4/16/2023 16:12:39'!
Smalltalk renameClassNamed: #EnteroPositivo as: #NaturalesConCero!
!NaturalesConCero methodsFor: 'as yet unclassified' stamp: 'WAL 4/16/2023 16:12:39' prior: 50620793 overrides: 50620635!
fibonacci

	| one two |
	
	one := Uno new.
	two := NaturalesConCero with: 2.

	^ (self - one) fibonacci + (self - two) fibonacci
		! !
!NaturalesConCero class methodsFor: 'instance creation' stamp: 'WAL 4/16/2023 16:13:17' prior: 50620744 overrides: 50620645!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue >= 0) ifFalse: [  self error: 'aValue debe ser positivo' ].
	
	^super new initalizeWith: aValue! !

	cinco fibonacci.!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 16:18:25'!
ERROR!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 16:18:25'!
ERROR!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 16:18:25'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 16:18:25'!
FAILURE!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 16:18:25'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 16:19:01'!
ERROR!
!NumeroTest methodsFor: 'setup' stamp: 'WAL 4/16/2023 16:21:21' prior: 50619136 overrides: 16961394!
setUp

	zero := Cero new. "Entero with: 0."
	one := Uno new. "Entero with: 1."
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 16:21:32'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 16:21:32'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 16:21:32'!
FAILURE!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 16:21:32'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 16:21:43'!
FAILURE!

expected class.!

	uno2 = Uno new. !

Numero subclass: #Dos
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Dos category: 'Numero-Exercise' stamp: 'WAL 4/16/2023 16:32:29'!
Numero subclass: #Dos
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Dos
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Dos category: 'Numero-Exercise' stamp: 'WAL 4/16/2023 16:32:41'!
Entero subclass: #Dos
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Dos methodsFor: 'no messages' stamp: 'WAL 4/16/2023 16:34:08' overrides: 50619396!
isZero
	
	^true! !

	dos:= Entero with: 2.!

	dos isZero.!

	dos := Dos new.!

----SNAPSHOT----(16 April 2023 16:43:01) CuisUniversity-5706.image priorSource: 9252772!

----SNAPSHOT----(16 April 2023 20:52:24) CuisUniversity-5706.image priorSource: 9265197!

!classRemoval: #Fraccion stamp: 'WAL 4/16/2023 20:53:10'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'WAL 4/16/2023 20:53:10'!
NaturalesConCero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'WAL 4/16/2023 20:53:10'!
NaturalesConCero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NaturalesConCero stamp: 'WAL 4/16/2023 20:53:10'!
Entero subclass: #NaturalesConCero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroNegativo stamp: 'WAL 4/16/2023 20:53:10'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Dos stamp: 'WAL 4/16/2023 20:53:10'!
Entero subclass: #Dos
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 4/16/2023 20:53:11'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 4/16/2023 20:53:11'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 4/16/2023 20:53:11'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/a/s/sw/smalltalk/Numero-Exercise-2023-04-16-c.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/16/2023 20:54:11'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/16/2023 20:58:50'!
PASSED!

----SNAPSHOT----(16 April 2023 21:45:14) CuisUniversity-5706.image priorSource: 9265287!

----SNAPSHOT----(16 April 2023 21:45:45) CuisUniversity-5706.image priorSource: 9300110!

----STARTUP---- (17 April 2023 20:07:11) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!classRemoval: #Fraccion stamp: 'WAL 4/17/2023 20:07:34'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'WAL 4/17/2023 20:07:34'!
Natural subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'WAL 4/17/2023 20:07:35'!
Natural subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Natural stamp: 'WAL 4/17/2023 20:07:35'!
Entero subclass: #Natural
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroNegativo stamp: 'WAL 4/17/2023 20:07:35'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 4/17/2023 20:07:35'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 4/17/2023 20:07:35'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 4/17/2023 20:07:36'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/a/s/sw/smalltalk/Pre-Numeros-Ejercicio.st----!

----STARTUP---- (17 April 2023 21:05:51) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!classRemoval: #Fraccion stamp: 'WAL 4/17/2023 21:06:05'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'WAL 4/17/2023 21:06:06'!
Natural subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'WAL 4/17/2023 21:06:06'!
Natural subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Natural stamp: 'WAL 4/17/2023 21:06:06'!
Entero subclass: #Natural
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroNegativo stamp: 'WAL 4/17/2023 21:06:06'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 4/17/2023 21:06:06'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 4/17/2023 21:06:06'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 4/17/2023 21:06:07'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/a/s/sw/smalltalk/Numero-Exercise-2023-04-16-b.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/17/2023 21:06:55'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/17/2023 21:06:55'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/17/2023 21:06:55'!
FAILURE!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/17/2023 21:06:55'!
PASSED!

!classRemoval: #Fraccion stamp: 'WAL 4/17/2023 21:07:14'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'WAL 4/17/2023 21:07:14'!
NaturalesConCero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'WAL 4/17/2023 21:07:15'!
NaturalesConCero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NaturalesConCero stamp: 'WAL 4/17/2023 21:07:15'!
Entero subclass: #NaturalesConCero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroNegativo stamp: 'WAL 4/17/2023 21:07:15'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Dos stamp: 'WAL 4/17/2023 21:07:15'!
Entero subclass: #Dos
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 4/17/2023 21:07:15'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 4/17/2023 21:07:15'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 4/17/2023 21:07:16'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/a/s/sw/smalltalk/Numero-Exercise-2023-04-16-a.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/17/2023 21:07:36'!
PASSED!

Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'WAL 4/17/2023 21:08:19'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'WAL 4/17/2023 21:08:33'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 4/17/2023 21:09:52'!
Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

EnteroSalvoCeroNiUno subclass: #EnteroPositivoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroPositivoSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 4/17/2023 21:10:27'!
EnteroSalvoCeroNiUno subclass: #EnteroPositivoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

EnteroSalvoCeroNiUno subclass: #EnteroNegativoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroNegativoSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 4/17/2023 21:10:44'!
EnteroSalvoCeroNiUno subclass: #EnteroNegativoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

EnteroNegativoSalvoCeroNiUno class
	instanceVariableNames: ''!

!classDefinition: 'EnteroNegativoSalvoCeroNiUno class' category: 'Numero-Exercise' stamp: 'WAL 4/17/2023 21:10:44'!
EnteroNegativoSalvoCeroNiUno class
	instanceVariableNames: ''!
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/17/2023 21:15:38' prior: 50623973!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: Cero new.
	(aValue = 1) ifTrue: Uno new.
	(aValue > 1) ifTrue: (EnteroPositivoSalvoCeroNiUno with: aValue).
	(aValue < 0) ifTrue: (EnteroNegativoSalvoCeroNiUno with: aValue).
	! !
!Cero methodsFor: 'no messages' stamp: 'WAL 4/17/2023 21:17:24' overrides: 50623935!
integerValue

	^0! !
!Uno methodsFor: 'no messages' stamp: 'WAL 4/17/2023 21:17:32' overrides: 50623935!
integerValue

	^1! !

Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'WAL 4/17/2023 21:17:45'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 4/17/2023 21:17:53'!
Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/17/2023 21:19:01' prior: 50624393!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: Cero new.
	(aValue = 1) ifTrue: Uno new.
	(aValue > 1) ifTrue: (Entero with: aValue). "EnteroPositivoSalvoCeroNiUno"
	(aValue < 0) ifTrue: (Entero with: aValue). "EnteroNegativoSalvoCeroNiUno"
	! !
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/17/2023 21:24:57' prior: 50624440!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: Cero new.
	(aValue = 1) ifTrue: Uno new.
	(aValue > 1) ifTrue: (Entero new initalizeWith: aValue). "EnteroPositivoSalvoCeroNiUno"
	(aValue < 0) ifTrue: (Entero new initalizeWith: aValue). "EnteroNegativoSalvoCeroNiUno"
	! !
!Cero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:26:48' overrides: 50623955!
isZero
	
	^value = 0! !
!Uno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:26:48' overrides: 50623955!
isZero
	
	^value = 0! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:26:48' overrides: 50623955!
isZero
	
	^value = 0! !

!methodRemoval: Entero #isZero stamp: 'WAL 4/17/2023 21:26:48'!
isZero
	
	^value = 0!
!Entero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:27:29' overrides: 50623798!
isZero
	
	^self subclassResponsibility ! !
!Cero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:27:35' prior: 50624474 overrides: 50624489!
isZero
	
	^true! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:27:42' prior: 50624482 overrides: 50624489!
isZero
	
	^false! !
!Uno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:27:48' prior: 50624478 overrides: 50624489!
isZero
	
	^false! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/17/2023 21:29:11' prior: 50623868!
divideAnInteger: anInteger

	^Fraccion with: anInteger over: self.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/17/2023 21:32:24' prior: 50623852!
// aDivisor 
	
	^self class with: self integerValue // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/17/2023 21:32:37' prior: 50623863 overrides: 50623766!
addInteger: anInteger 
	
	^self class with: self integerValue + anInteger integerValue.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/17/2023 21:32:44' prior: 50623884!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (self integerValue gcd: anEntero integerValue)! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/17/2023 21:32:50' prior: 50623897 overrides: 50623781!
multiplyWithInteger: anInteger
	
	^self class with: self integerValue * anInteger integerValue
	! !

	oneHalf := one / two.!

	one := Entero with: 1. one class.!
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/17/2023 21:41:10' prior: 50624457!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [^Cero new].
	(aValue = 1) ifTrue: [^Uno new].
	(aValue > 1) ifTrue:  [^(Entero new initalizeWith: aValue)]. "EnteroPositivoSalvoCeroNiUno"
	(aValue < 0) ifTrue:  [^(Entero new initalizeWith: aValue)]. "EnteroNegativoSalvoCeroNiUno"
	! !

	zero := Cero new.!

	zero := Entero with: 0.!

----STARTUP---- (17 April 2023 21:44:27) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!classRemoval: #Fraccion stamp: 'WAL 4/17/2023 21:44:32'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'WAL 4/17/2023 21:44:33'!
Natural subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'WAL 4/17/2023 21:44:33'!
Natural subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Natural stamp: 'WAL 4/17/2023 21:44:33'!
Entero subclass: #Natural
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroNegativo stamp: 'WAL 4/17/2023 21:44:33'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 4/17/2023 21:44:33'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 4/17/2023 21:44:34'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 4/17/2023 21:44:34'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/a/s/sw/smalltalk/Numero-Exercise-2023-04-17-a.st----!

 menosDos := Entero with: -2.!

 menosUno := Entero with: -1. !

 menosDos isZero.!
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/17/2023 21:51:17' prior: 50622879!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [^Cero new].
	(aValue = 1) ifTrue: [^Uno new].
	(aValue > 1) ifTrue:  [^(EnteroPositivoSalvoCeroNiUno new initalizeWith: aValue)].
	(aValue < 0) ifTrue:  [^(EnteroNegativoSalvoCeroNiUno new initalizeWith: aValue)].
	! !
!Cero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:53:50' overrides: 50622857!
isOne
	
	^value = 1! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:53:50' overrides: 50622857!
isOne
	
	^value = 1! !
!Uno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:53:50' overrides: 50622857!
isOne
	
	^value = 1! !

!methodRemoval: Entero #isOne stamp: 'WAL 4/17/2023 21:53:50'!
isOne
	
	^value = 1!
!Entero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:54:08' overrides: 50622699!
isOne
	
	^self subclassResponsibility ! !
!Cero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:54:15' prior: 50623201 overrides: 50623215!
isOne
	
	^false! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:54:27' prior: 50623205 overrides: 50623215!
isOne
	
	^false! !
!Uno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:54:34' prior: 50623209 overrides: 50623215!
isOne
	
	^true! !
!Cero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:54:44' overrides: 50622853!
isNegative
	
	^value < 0! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:54:44' overrides: 50622853!
isNegative
	
	^value < 0! !
!Uno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:54:44' overrides: 50622853!
isNegative
	
	^value < 0! !

!methodRemoval: Entero #isNegative stamp: 'WAL 4/17/2023 21:54:44'!
isNegative
	
	^value < 0!
!Entero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:54:55' overrides: 50622695!
isNegative
	
	^self subclassResponsibility ! !
!Cero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:55:04' prior: 50623233 overrides: 50623248!
isNegative
	
	^false! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:55:12' prior: 50623237 overrides: 50623248!
isNegative
	
	^false! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:55:28' prior: 50623258 overrides: 50623248!
isNegative
	
	^self subclassResponsibility ! !
!EnteroNegativoSalvoCeroNiUno methodsFor: 'no messages' stamp: 'WAL 4/17/2023 21:56:00' overrides: 50623263!
isNegative
	
	^true! !
!EnteroPositivoSalvoCeroNiUno methodsFor: 'no messages' stamp: 'WAL 4/17/2023 21:56:33' overrides: 50623263!
isNegative
	
	^false! !
!Uno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:56:43' prior: 50623241 overrides: 50623248!
isNegative
	
	^false! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/17/2023 21:56:47'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/17/2023 21:56:47'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/17/2023 21:56:47'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/17/2023 21:56:47'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/17/2023 21:56:47'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/17/2023 21:56:47'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/17/2023 21:56:47'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/17/2023 21:56:47'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/17/2023 21:56:47'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/17/2023 21:56:47'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/17/2023 21:56:47'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/17/2023 21:57:24'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/17/2023 21:59:45'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/17/2023 21:59:45'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/17/2023 21:59:45'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/17/2023 21:59:45'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/17/2023 21:59:45'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/17/2023 21:59:45'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/17/2023 21:59:45'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/17/2023 21:59:45'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/17/2023 21:59:45'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/17/2023 21:59:45'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/17/2023 21:59:45'!
FAILURE!

----SNAPSHOT----(17 April 2023 21:59:53) CuisUniversity-5706.image priorSource: 9300200!

----STARTUP---- (17 April 2023 22:02:22) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/17/2023 22:02:36'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/17/2023 22:02:36'!
FAILURE!

	one := Entero with: 1.
	two := Entero with: 2.
	
	oneHalf := one / two.!

oneHalf := one / two.!

oneHalf := one / two.!

oneHalf := one / two.!

zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.!

	zero := Entero with: 0.!

	one := Entero with: 1.!

	two := Entero with: 2.!

	three:= Entero with: 3.!

	four := Entero with: 4.!

	five := Entero with: 5.!

	eight := Entero with: 8.!

----SNAPSHOT----(17 April 2023 22:08:07) CuisUniversity-5706.image priorSource: 9341104!

----STARTUP---- (18 April 2023 17:34:20) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 17:34:27'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 17:34:27'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 17:34:27'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 17:34:27'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 17:34:27'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 17:34:27'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 17:34:27'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 17:34:27'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 17:34:27'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 17:34:27'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 17:34:27'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 17:34:36'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 17:34:56'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 17:35:13'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 17:36:34'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 17:36:34'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 17:36:34'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 17:36:34'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 17:36:34'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 17:36:34'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 17:36:34'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 17:36:34'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 17:36:34'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 17:36:34'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 17:36:34'!
FAILURE!

	zero := Entero with: 0.!

	one := Entero with: 1.!

	two := Entero with: 2.!
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/18/2023 17:38:34' prior: 50623184!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue:  [^Cero new].
	(aValue = 1) ifTrue:  [^Uno new].
	(aValue > 1) ifTrue:  [^(EnteroPositivoSalvoCeroNiUno new initalizeWith: aValue)].
	(aValue < 0) ifTrue:  [^(EnteroNegativoSalvoCeroNiUno new initalizeWith: aValue)].
	! !

cero := Cero new.!
!Entero methodsFor: 'printing' stamp: 'WAL 4/18/2023 17:43:11' prior: 50622849 overrides: 16902975!
printOn: aStream

	aStream print: self integerValue! !

cero := Cero new.!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 17:43:29'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 17:43:29'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 17:43:29'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 17:43:29'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 17:43:29'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 17:43:29'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 17:43:29'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 17:43:29'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 17:43:29'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 17:43:29'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 17:43:29'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 17:43:33'!
FAILURE!

expected class!

actual class!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 17:45:54'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 17:46:07'!
FAILURE!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/18/2023 17:47:32' prior: 50623040!
divideAFraction: aFraction
	
	^Fraccion
		with: aFraction numerator * self denominator
		over: aFraction denominator * self numerator

! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/18/2023 17:48:20' prior: 50624059!
divideAFraction: aFractionToDivide
	
	^Fraccion
		with: aFractionToDivide numerator * self denominator
		over: aFractionToDivide denominator * self numerator

! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'WAL 4/18/2023 17:48:51' prior: 50623047!
divideAnInteger: anIntegerToDivide
	
	^Fraccion
		with: anIntegerToDivide * self denominator
		over: self numerator

! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 17:49:37'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 17:49:37'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 17:49:37'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 17:49:37'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 17:49:37'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 17:49:37'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 17:49:37'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 17:49:37'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 17:49:37'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 17:49:37'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 17:49:37'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 17:49:45'!
FAILURE!

!classRemoval: #Fraccion stamp: 'WAL 4/18/2023 17:50:46'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'WAL 4/18/2023 17:50:47'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroPositivoSalvoCeroNiUno stamp: 'WAL 4/18/2023 17:50:47'!
EnteroSalvoCeroNiUno subclass: #EnteroPositivoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroNegativoSalvoCeroNiUno stamp: 'WAL 4/18/2023 17:50:47'!
EnteroSalvoCeroNiUno subclass: #EnteroNegativoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUno stamp: 'WAL 4/18/2023 17:50:47'!
Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'WAL 4/18/2023 17:50:47'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 4/18/2023 17:50:47'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 4/18/2023 17:50:48'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 4/18/2023 17:50:48'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/a/s/sw/smalltalk/Numero-Exercise-2023-04-16-c.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 18:00:41'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 18:00:42'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 18:00:42'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 18:00:42'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 18:00:42'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 18:00:42'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 18:00:42'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 18:00:42'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 18:00:42'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 18:00:42'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 18:00:42'!
PASSED!

----STARTUP---- (18 April 2023 18:01:11) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 18:01:21'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 18:01:21'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 18:01:21'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 18:01:21'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 18:01:21'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 18:01:21'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 18:01:21'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 18:01:21'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 18:01:21'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 18:01:21'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 18:01:21'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:01:25'!
FAILURE!
!Entero methodsFor: 'printing' stamp: 'WAL 4/18/2023 18:01:59' prior: 50622849 overrides: 16902975!
printOn: aStream

	aStream print: self integerValue ! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 18:03:57'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 18:03:57'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 18:03:57'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 18:03:57'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 18:03:57'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 18:03:57'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 18:03:57'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 18:03:57'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 18:03:57'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 18:03:57'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 18:03:57'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:04:01'!
FAILURE!
!Numero methodsFor: 'arithmetic operations' stamp: 'WAL 4/18/2023 18:06:14' prior: 50624627!
multiplyWithFraction: aFraction 
	
	^self subclassResponsibility! !
!Numero methodsFor: 'arithmetic operations' stamp: 'WAL 4/18/2023 18:10:23'!
divideAFraction: aFraction
	
	^self subclassResponsibility! !
!Numero methodsFor: 'arithmetic operations' stamp: 'WAL 4/18/2023 18:10:32'!
divideAnInteger: aFraction
	
	^self subclassResponsibility! !
!Numero methodsFor: 'arithmetic operations' stamp: 'WAL 4/18/2023 18:11:16'!
substractToFraction: aFraction
	
	^self subclassResponsibility.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'WAL 4/18/2023 18:11:31'!
substractToInteger: anInteger
	
	^self subclassResponsibility.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 18:18:41'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 18:18:41'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 18:18:41'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 18:18:41'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 18:18:41'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 18:18:41'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 18:18:41'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 18:18:41'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 18:18:41'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 18:18:41'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 18:18:41'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:18:46'!
FAILURE!

	one := Entero with: 1.!

	two := Entero with: 2.!

 2 !

	dosDivididoDos := two / two.!

	(two / two) class!

	one class.!

	one = two/ two.!

	one = (two/ two).!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 18:22:06'!
PASSED!

	one := Entero with: 1.!

	two := Entero with: 2.!

	dosDivididoDos := two / two.!

	(two / two) class.!

	one class.!

	one = (two/ two). !

two / two!

one!

----STARTUP---- (18 April 2023 18:24:42) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!classRemoval: #Fraccion stamp: 'WAL 4/18/2023 18:24:51'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'WAL 4/18/2023 18:24:51'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroPositivoSalvoCeroNiUno stamp: 'WAL 4/18/2023 18:24:51'!
EnteroSalvoCeroNiUno subclass: #EnteroPositivoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroNegativoSalvoCeroNiUno stamp: 'WAL 4/18/2023 18:24:51'!
EnteroSalvoCeroNiUno subclass: #EnteroNegativoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUno stamp: 'WAL 4/18/2023 18:24:52'!
Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'WAL 4/18/2023 18:24:52'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 4/18/2023 18:24:52'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 4/18/2023 18:24:52'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 4/18/2023 18:24:53'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/a/s/sw/smalltalk/Numero-Exercise-2023-04-18-problemas.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 18:25:05'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 18:25:05'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 18:25:05'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 18:25:05'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 18:25:05'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 18:25:05'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 18:25:05'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 18:25:05'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 18:25:05'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 18:25:05'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 18:25:05'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:25:08'!
FAILURE!
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/18/2023 18:29:04' overrides: 50625897!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !
!Entero methodsFor: 'value' stamp: 'WAL 4/18/2023 18:29:51' prior: 50625897!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^self subclassResponsibility ! !

m  n!

n  m !

n  m \\ (m  n)!

one := Entero with: 1.!

	two := Entero with: 2.!

two!
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/18/2023 18:40:32' prior: 50625937!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [^Cero new].
	(aValue = 1) ifTrue: [^Uno new].
	(aValue > 1) ifTrue: [^(EnteroPositivoSalvoCeroNiUno new initalizeWith: aValue)].
	(aValue < 0) ifTrue: [^(EnteroNegativoSalvoCeroNiUno new initalizeWith: aValue)].
	! !
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/18/2023 18:40:48' prior: 50626436!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [^Cero new].
	(aValue = 1) ifTrue: [^Uno new].
	(aValue > 1) ifTrue: [^(EnteroPositivoSalvoCeroNiUno new initalizeWith: aValue)].
	(aValue < 0) ifTrue: [^(EnteroNegativoSalvoCeroNiUno new initalizeWith: aValue)].
	
	self error: 'blablabla'.
	! !

one := Entero with: 1. !

two := Entero with: 2.!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 18:46:25'!
PASSED!

!classRenamed: #Natural as: #EnteroPositivoOCero stamp: 'WAL 4/18/2023 18:46:57'!
Smalltalk renameClassNamed: #Natural as: #EnteroPositivoOCero!
!Entero methodsFor: 'as yet unclassified' stamp: 'WAL 4/18/2023 18:46:57' prior: 50624777!
initalizeWith: aValue 
			
	(aValue = 0) ifTrue: [^Cero new].
	(aValue = 1) ifTrue: [^Uno new].
	(aValue > 1) ifTrue: [^EnteroPositivoOCero new initializeWith: aValue].
	(aValue < 0) ifTrue: [^EnteroNegativo new initializeWith: aValue].
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 18:48:47'!
PASSED!

----STARTUP---- (18 April 2023 18:53:31) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


----End fileIn of /home/a/s/sw/smalltalk/Numero-Exercise-2023-04-18-problemas.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 18:53:56'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 18:53:56'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 18:53:56'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 18:53:56'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 18:53:56'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 18:53:56'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 18:53:56'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 18:53:56'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 18:53:56'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 18:53:56'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 18:53:56'!
FAILURE!
!Entero methodsFor: 'initialization' stamp: 'WAL 4/18/2023 18:55:07' prior: 50624160!
initalizeWith: aValue 
	
	^self subclassResponsibility! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/18/2023 18:55:19' overrides: 50624701!
initalizeWith: aValue 
	
	^value := aValue! !

	zero := Entero with: 0.!

	one := Entero with: 1.!

	two := Entero with: 2.!

	three:= Entero with: 3.!

	four := Entero with: 4.!

2 class!

aDivisor class!

	zero := Entero with: 0.!

	one := Entero with: 1.!

	two := Entero with: 2.!

	three:= Entero with: 3.!

	four := Entero with: 4.!

	five := Entero with: 5.!

	eight := Entero with: 8.!

	negativeOne := Entero with: -1.!

	negativeTwo := Entero with: -2.!

	oneHalf := one / two.!

	oneHalf := one / two.!
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/18/2023 19:09:14' overrides: 50624165!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !
!Entero methodsFor: 'value' stamp: 'WAL 4/18/2023 19:09:47' prior: 50624165!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^self subclassResponsibility ! !

	zero := Entero with: 0.!

	one := Entero with: 1.!

	two := Entero with: 2.!

	three:= Entero with: 3.!

	four := Entero with: 4.!

	five := Entero with: 5.!

	eight := Entero with: 8.!

	negativeOne := Entero with: -1.!

	negativeTwo := Entero with: -2.!

one!

two!

one / two!

	oneFifth := one / five.!

----STARTUP---- (18 April 2023 19:16:59) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 19:17:06'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 19:17:06'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 19:17:06'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 19:17:06'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 19:17:06'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 19:17:06'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 19:17:06'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 19:17:06'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 19:17:06'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 19:17:06'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 19:17:06'!
FAILURE!

	oneHalf := one / two.!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 19:29:59'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 19:29:59'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 19:29:59'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 19:29:59'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 19:29:59'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 19:29:59'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 19:29:59'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 19:29:59'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 19:29:59'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 19:29:59'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 19:29:59'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 19:30:59'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 19:30:59'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 19:30:59'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 19:30:59'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 19:30:59'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 19:30:59'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 19:30:59'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 19:30:59'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 19:30:59'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 19:30:59'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 19:30:59'!
FAILURE!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 19:32:15'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 19:32:15'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 19:32:15'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 19:32:15'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 19:32:15'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 19:32:15'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 19:32:15'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 19:32:15'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 19:32:15'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 19:32:15'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 19:32:15'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 19:32:28'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 19:32:28'!
FAILURE!

	one := Entero with: 1.!

	one class.!

	one / one.!

	(one / one) class!

	two := Entero with: 2.!

	two class.!

	two := Entero with: 2.!

	two class.!

	two := EnteroPositivoSalvoCeroNiUno new initalizeWith: 2.!

	two class.!

	two := EnteroPositivoSalvoCeroNiUno with: 2.!

	two class.!
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/18/2023 19:58:13' prior: 50624207!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [^Cero new].
	(aValue = 1) ifTrue: [^Uno new].
	(aValue > 1) ifTrue:  [^(EnteroPositivoSalvoCeroNiUno with: aValue)]. "new initalizeWith"
	(aValue < 0) ifTrue:  [^(EnteroNegativoSalvoCeroNiUno with: aValue)]. "new initalizeWith"
	! !

	two := EnteroPositivoSalvoCeroNiUno with: 2.!
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/18/2023 19:58:52' prior: 50624761!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [^Cero new].
	(aValue = 1) ifTrue: [^Uno new].
	(aValue > 1) ifTrue:  [^(EnteroPositivoSalvoCeroNiUno new initalizeWith: aValue)]. "new initalizeWith"
	(aValue < 0) ifTrue:  [^(EnteroNegativoSalvoCeroNiUno new initalizeWith: aValue)]. "new initalizeWith"
	! !

	two := EnteroPositivoSalvoCeroNiUno new.!

	two class.!
!EnteroSalvoCeroNiUno methodsFor: 'initialization' stamp: 'WAL 4/18/2023 20:03:03'!
initializeWith: aValue 
	
	^value := aValue! !

	two := EnteroPositivoSalvoCeroNiUno new initializeWith: 2.!

	two class.!

!methodRemoval: EnteroSalvoCeroNiUno #initalizeWith: stamp: 'WAL 4/18/2023 20:04:38'!
initalizeWith: aValue 
	
	^value := aValue!
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/18/2023 20:04:49' prior: 50624781!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [^Cero new].
	(aValue = 1) ifTrue: [^Uno new].
	(aValue > 1) ifTrue:  [^(EnteroPositivoSalvoCeroNiUno new initializeWith: aValue)]. "new initalizeWith"
	(aValue < 0) ifTrue:  [^(EnteroNegativoSalvoCeroNiUno new initializeWith: aValue)]. "new initalizeWith"
	! !

	two := (EnteroPositivoSalvoCeroNiUno new) initializeWith: 2.!

	two class.!

 SmallInteger !

	two := (EnteroPositivoSalvoCeroNiUno new) initializeWith: 2.!

	two := (EnteroPositivoSalvoCeroNiUno new) initializeWith: 2.!

	two class.!

Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 4/18/2023 20:11:29'!
Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'WAL 4/18/2023 20:11:35'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'initialization' stamp: 'WAL 4/18/2023 20:11:46' prior: 50624701!
initalizeWith: aValue 
	
	^value := aValue! !
!Entero methodsFor: 'initialization' stamp: 'WAL 4/18/2023 20:12:40'!
initializeWith: aValue 
	
	^value := aValue! !

!methodRemoval: Entero #initalizeWith: stamp: 'WAL 4/18/2023 20:12:45'!
initalizeWith: aValue 
	
	^value := aValue!

	zero := Entero with: 0.!

	one := Entero with: 1.!

	two := Entero with: 2.!

	three:= Entero with: 3.!

	zero class.!

	one class. !

	two class.!
!Entero methodsFor: 'initialization' stamp: 'WAL 4/18/2023 20:16:07' prior: 50624869!
initializeWith: aValue 
	
	value := aValue! !
!Entero methodsFor: 'initialization' stamp: 'WAL 4/18/2023 20:16:28' prior: 50624882!
initializeWith: aValue 
	
	^self subclassResponsibility ! !
!EnteroSalvoCeroNiUno methodsFor: 'initialization' stamp: 'WAL 4/18/2023 20:16:39' prior: 50624801 overrides: 50624887!
initializeWith: aValue 
	
	value := aValue! !

	zero := Entero with: 0.!

	one := Entero with: 1.!

	two := Entero with: 2.!

	two class. !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 20:17:04'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 20:17:04'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 20:17:04'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 20:17:04'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 20:17:04'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 20:17:04'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 20:17:04'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 20:17:04'!
FAILURE!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 20:17:04'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 20:17:29'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 20:18:17'!
FAILURE!

----SNAPSHOT----(18 April 2023 20:18:39) CuisUniversity-5706.image priorSource: 9342093!

	zero := Entero with: 0.!

	one := Entero with: 1.!

	two := Entero with: 2.!

	oneHalf := one / two.!

	oneFifth := one / five.!

	oneFifth := one / five.!

aDivisor class!

five class!

one class !

	five := Entero with: 5.!

	oneFifth := one / five.!

	twoFifth := two / five.!

	twoTwentyfifth := two / (Entero with: 25).!

	fiveHalfs := five / two.!

	oneAsTwoOverTwo := two / two.!

	(two / two) class.!

	(two / two) integerValue.!

	one integerValue.!

	one class.!

	(two / two) class.!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 20:22:53'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 20:30:02'!
FAILURE!

expected!
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/18/2023 20:33:48' prior: 50624812!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue = 0) ifTrue: [^Cero new initialize].
	(aValue = 1) ifTrue: [^Uno new initialize].
	(aValue > 1) ifTrue:  [^(EnteroPositivoSalvoCeroNiUno new initializeWith: aValue)]. "new initalizeWith"
	(aValue < 0) ifTrue:  [^(EnteroNegativoSalvoCeroNiUno new initializeWith: aValue)]. "new initalizeWith"
	! !
!Cero methodsFor: 'testing' stamp: 'WAL 4/18/2023 20:34:41' overrides: 16920235!
initialize
	
	value := 0! !
!Uno methodsFor: 'initialization' stamp: 'WAL 4/18/2023 20:35:44' overrides: 16920235!
initialize
	
	value := 1! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 20:35:47'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 21:43:07'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 21:43:21'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 21:43:21'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 21:43:22'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 21:43:22'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 21:43:22'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 21:43:22'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 21:43:22'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 21:43:22'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 21:43:23'!
PASSED!
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/18/2023 21:52:54' prior: 50625070!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	"^( self subclasses detect: [:aEnteroClass | aEnteroClass managesIntegerValue: aValue]) new initializeWith: aValue."
	
	(aValue = 0) ifTrue: [^Cero new initialize].
	(aValue = 1) ifTrue: [^Uno new initialize].
	(aValue > 1) ifTrue: [^(EnteroPositivoSalvoCeroNiUno new initializeWith: aValue)]. "new initalizeWith"
	(aValue < 0) ifTrue: [^(EnteroNegativoSalvoCeroNiUno new initializeWith: aValue)]. "new initalizeWith"
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/18/2023 21:52:56'!
PASSED!
!Cero methodsFor: 'testing' stamp: 'WAL 4/18/2023 21:53:53'!
managesIntegerValue: anIntegerValue

	^(anIntegerValue = 0)! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/18/2023 21:54:56'!
managesIntegerValue: anIntegerValue

	^(anIntegerValue = 0)! !
!EnteroSalvoCeroNiUno methodsFor: 'value' stamp: 'WAL 4/18/2023 21:56:07' prior: 50625566!
managesIntegerValue: anIntegerValue

	^anIntegerValue ~= 0 and: anIntegerValue ~= 1! !
!Cero methodsFor: 'value' stamp: 'WAL 4/18/2023 21:56:12' prior: 50625561!
managesIntegerValue: anIntegerValue

	^anIntegerValue = 0! !
!Uno methodsFor: 'value' stamp: 'WAL 4/18/2023 21:56:51'!
managesIntegerValue: anIntegerValue

	^anIntegerValue = 1! !
!EnteroSalvoCeroNiUno methodsFor: 'value' stamp: 'WAL 4/18/2023 21:57:22' prior: 50625571!
managesIntegerValue: anIntegerValue

	^false "anIntegerValue ~= 0 and: anIntegerValue ~= 1"! !
!EnteroNegativoSalvoCeroNiUno methodsFor: 'value' stamp: 'WAL 4/18/2023 21:58:43' overrides: 50625586!
managesIntegerValue: anIntegerValue

	^anIntegerValue < 0! !
!EnteroPositivoSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/18/2023 21:59:12' overrides: 50625586!
managesIntegerValue: anIntegerValue

	^anIntegerValue > 1! !
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/18/2023 22:01:43' prior: 50625401!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^( self subclasses detect: [:aEnteroClass | aEnteroClass managesIntegerValue: aValue]) new initializeWith: aValue.
	
	"(aValue = 0) ifTrue: [^Cero new initialize].
	(aValue = 1) ifTrue: [^Uno new initialize].
	(aValue > 1) ifTrue: [^(EnteroPositivoSalvoCeroNiUno new initializeWith: aValue)].
	(aValue < 0) ifTrue: [^(EnteroNegativoSalvoCeroNiUno new initializeWith: aValue)]. "
	! !

self subclasses!
!EnteroSalvoCeroNiUno methodsFor: 'value' stamp: 'WAL 4/18/2023 22:04:03' prior: 50625586!
managesIntegerValue: anIntegerValue

	^anIntegerValue ~= 0 and: anIntegerValue ~= 1! !
!Cero class methodsFor: 'no messages' stamp: 'WAL 4/18/2023 22:07:16'!
managesIntegerValue: anIntegerValue

	^anIntegerValue = 0! !
!EnteroSalvoCeroNiUno class methodsFor: 'no messages' stamp: 'WAL 4/18/2023 22:07:33'!
managesIntegerValue: anIntegerValue

	^anIntegerValue ~= 0 and: anIntegerValue ~= 1! !
!EnteroNegativoSalvoCeroNiUno class methodsFor: 'no messages' stamp: 'WAL 4/18/2023 22:07:51' overrides: 50625637!
managesIntegerValue: anIntegerValue

	^anIntegerValue < 0! !
!EnteroPositivoSalvoCeroNiUno class methodsFor: 'no messages' stamp: 'WAL 4/18/2023 22:08:08' overrides: 50625637!
managesIntegerValue: anIntegerValue

	^anIntegerValue > 1! !
!Uno class methodsFor: 'no messages' stamp: 'WAL 4/18/2023 22:08:20'!
managesIntegerValue: anIntegerValue

	^anIntegerValue = 1! !

!methodRemoval: EnteroSalvoCeroNiUno #managesIntegerValue: stamp: 'WAL 4/18/2023 22:09:01'!
managesIntegerValue: anIntegerValue

	^anIntegerValue ~= 0 and: anIntegerValue ~= 1!

!methodRemoval: Cero #managesIntegerValue: stamp: 'WAL 4/18/2023 22:09:11'!
managesIntegerValue: anIntegerValue

	^anIntegerValue = 0!

!methodRemoval: Uno #managesIntegerValue: stamp: 'WAL 4/18/2023 22:09:17'!
managesIntegerValue: anIntegerValue

	^anIntegerValue = 1!

!methodRemoval: EnteroPositivoSalvoCeroNiUno #managesIntegerValue: stamp: 'WAL 4/18/2023 22:09:23'!
managesIntegerValue: anIntegerValue

	^anIntegerValue > 1!

!methodRemoval: EnteroNegativoSalvoCeroNiUno #managesIntegerValue: stamp: 'WAL 4/18/2023 22:09:28'!
managesIntegerValue: anIntegerValue

	^anIntegerValue < 0!

----SNAPSHOT----(18 April 2023 22:09:38) CuisUniversity-5706.image priorSource: 9388587!
!Cero methodsFor: 'initialization' stamp: 'WAL 4/18/2023 22:11:30' overrides: 50624887!
initializeWith: aValue
	
	value := aValue! !

!methodRemoval: Cero #initialize stamp: 'WAL 4/18/2023 22:11:40'!
initialize
	
	value := 0!
!Entero methodsFor: 'initialization' stamp: 'WAL 4/18/2023 22:12:14' prior: 50624887!
initializeWith: aValue
	
	value := aValue! !

!methodRemoval: Cero #initializeWith: stamp: 'WAL 4/18/2023 22:12:41'!
initializeWith: aValue
	
	value := aValue!

!methodRemoval: EnteroSalvoCeroNiUno #initializeWith: stamp: 'WAL 4/18/2023 22:12:48'!
initializeWith: aValue 
	
	value := aValue!
!Cero methodsFor: 'initialization' stamp: 'WAL 4/18/2023 22:13:40' overrides: 16920235!
initialize
	
	value := 0! !

	unNumero := EnteroSalvoCeroNiUno with: 7.!

	unNumero class.!

	unNumero := Entero with: 0.!

	unNumero class.!

	zero := Entero with: 0.!

	one := Entero with: 1.!

	two := Entero with: 2.!

	three:= Entero with: 3.!

	four := Entero with: 4.!

	five := Entero with: 5.!

	eight := Entero with: 8.!

	negativeOne := Entero with: -1.!

	negativeTwo := Entero with: -2.!

	oneHalf := one / two.!

	one class.!

	two class.!
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/18/2023 22:24:27' prior: 50625604!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^( self subclasses detect: [:aEnteroClass | aEnteroClass managesIntegerValue: aValue]) with: aValue. "new initializeWith"
	
	"(aValue = 0) ifTrue: [^Cero new initialize].
	(aValue = 1) ifTrue: [^Uno new initialize].
	(aValue > 1) ifTrue: [^(EnteroPositivoSalvoCeroNiUno new initializeWith: aValue)].
	(aValue < 0) ifTrue: [^(EnteroNegativoSalvoCeroNiUno new initializeWith: aValue)]. "
	! !
!Cero class methodsFor: 'as yet unclassified' stamp: 'WAL 4/18/2023 22:26:29' overrides: 50625724!
with: aValue 
	
	^self new! !
!Uno class methodsFor: 'as yet unclassified' stamp: 'WAL 4/18/2023 22:26:48' overrides: 50625724!
with: aValue 
	
	^self new! !
!EnteroSalvoCeroNiUno class methodsFor: 'as yet unclassified' stamp: 'WAL 4/18/2023 22:28:46' prior: 50625637!
managesIntegerValue: anIntegerValue

	^(anIntegerValue ~= 0) and: (anIntegerValue ~= 1)! !
!EnteroNegativoSalvoCeroNiUno class methodsFor: 'as yet unclassified' stamp: 'WAL 4/18/2023 22:31:46' overrides: 50625724!
with: aValue 
	
	^self new initializeWith: aValue! !
!EnteroPositivoSalvoCeroNiUno class methodsFor: 'as yet unclassified' stamp: 'WAL 4/18/2023 22:31:56' overrides: 50625724!
with: aValue 
	
	^self new initializeWith: aValue! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 22:32:01'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 22:32:01'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 22:32:43'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 22:32:43'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 22:32:44'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 22:32:44'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 22:32:44'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 22:32:44'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 22:32:44'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 22:32:44'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 22:32:44'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 22:32:44'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 22:32:44'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 22:32:44'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 22:32:54'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 22:32:56'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 22:32:58'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 22:32:59'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 22:33:01'!
FAILURE!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 22:33:01'!
FAILURE!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 22:33:06'!
FAILURE!

	one + one.!

	one / one.!

	two / one.!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 22:37:14'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 22:37:14'!
PASSED!

self isNegative!

	one := Entero with: 1.!

	one class.!

	zero:= Entero with: 0.!

	zero class.!

	two:= Entero with: 2.!

	two class.!

	minusTwo := Entero with: -2.!

	minusTwo     class.!

	two class.!

!classRenamed: #EnteroNegativoSalvoCeroNiUno as: #EnteroSalvoCeroNiUnoNegativo stamp: 'WAL 4/18/2023 22:40:38'!
Smalltalk renameClassNamed: #EnteroNegativoSalvoCeroNiUno as: #EnteroSalvoCeroNiUnoNegativo!

!classRenamed: #EnteroPositivoSalvoCeroNiUno as: #EnteroSalvoCeroNiUnoPositivo stamp: 'WAL 4/18/2023 22:40:47'!
Smalltalk renameClassNamed: #EnteroPositivoSalvoCeroNiUno as: #EnteroSalvoCeroNiUnoPositivo!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 22:42:26'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 22:42:28'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 22:42:30'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 22:42:31'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 22:42:33'!
FAILURE!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 22:42:33'!
FAILURE!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 22:43:12'!
PASSED!

	two + two.!

	two + one. !

	one + two.  !

	two + one. !
!Uno class methodsFor: 'as yet unclassified' stamp: 'WAL 4/18/2023 22:46:24' prior: 50625750 overrides: 50625724!
with: aValue 
	
	^self new initializeWith: aValue! !
!Cero class methodsFor: 'as yet unclassified' stamp: 'WAL 4/18/2023 22:46:37' prior: 50625746 overrides: 50625724!
with: aValue 
	
	^self new initializeWith: aValue! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 22:46:39'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 22:46:39'!
PASSED!

----SNAPSHOT----(18 April 2023 22:46:55) CuisUniversity-5706.image priorSource: 9409053!

!methodRemoval: Uno #initialize stamp: 'WAL 4/18/2023 22:50:02'!
initialize
	
	value := 1!

!methodRemoval: Cero #initialize stamp: 'WAL 4/18/2023 22:50:10'!
initialize
	
	value := 0!

	two + one.!

	two + minusTwo.!

	(two + minusTwo) class.!

	one fibonacci.!

	zero fibonacci.!

	two fibonacci.!

	two := Entero with: 2.!

	two class.!

	two fibonacci.!

	two.!

	two fibonacci.!

	two fibonacci.!

	two := Entero with: 2.!

	two fibonacci.!
!Entero methodsFor: 'comparing' stamp: 'WAL 4/18/2023 23:00:36' prior: 50624142 overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ self integerValue = anObject integerValue ]! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 23:00:39'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 23:00:39'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/18/2023 23:05:40' prior: 50624095!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	self halt.
	^ (self - one) fibonacci + (self - two) fibonacci
		! !

	one:= Entero with:1.!

	one fibonacci.!

	two:= Entero with: 2.!

	two fibonacci.!

(self - one)!
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/18/2023 23:10:05' prior: 50624135 overrides: 50623998!
substractToInteger: anInteger

	^ super class with: anInteger integerValue - self integerValue.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 23:10:12'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 23:10:12'!
FAILURE!

one:=Entero with:1.!

two:=Entero with:2.!

two fibonacci.!

(self - one)!

one!

self!

(self - one)!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 23:18:06'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 23:18:06'!
FAILURE!
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/18/2023 23:18:51' prior: 50625724!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	"^( self subclasses detect: [:aEnteroClass | aEnteroClass managesIntegerValue: aValue]) with: aValue." "new initializeWith"
	
	(aValue = 0) ifTrue: [^Cero new initialize].
	(aValue = 1) ifTrue: [^Uno new initialize].
	(aValue > 1) ifTrue: [^(EnteroSalvoCeroNiUnoPositivo new initializeWith: aValue)].
	(aValue < 0) ifTrue: [^(EnteroSalvoCeroNiUnoNegativo new initializeWith: aValue)]. 
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/18/2023 23:19:12'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/18/2023 23:19:12'!
FAILURE!

----SNAPSHOT----(18 April 2023 23:19:35) CuisUniversity-5706.image priorSource: 9429392!

----STARTUP---- (19 April 2023 00:41:59) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!classRemoval: #Fraccion stamp: 'WAL 4/19/2023 00:43:00'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'WAL 4/19/2023 00:43:01'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUnoPositivo stamp: 'WAL 4/19/2023 00:43:01'!
EnteroSalvoCeroNiUno subclass: #EnteroSalvoCeroNiUnoPositivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUnoNegativo stamp: 'WAL 4/19/2023 00:43:01'!
EnteroSalvoCeroNiUno subclass: #EnteroSalvoCeroNiUnoNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUno stamp: 'WAL 4/19/2023 00:43:01'!
Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'WAL 4/19/2023 00:43:01'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 4/19/2023 00:43:01'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 4/19/2023 00:43:02'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 4/19/2023 00:43:02'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/a/s/sw/smalltalk/Numero-Exercise-2023-04-18-d.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/19/2023 00:43:28'!
PASSED!

----STARTUP---- (19 April 2023 18:25:42) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/19/2023 18:25:48'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/19/2023 18:25:48'!
FAILURE!
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/19/2023 18:36:28' prior: 50626739!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^( self subclasses detect: [:aEnteroClass | aEnteroClass managesIntegerValue: aValue]) with: aValue.
	
	"(aValue = 0) ifTrue: [^Cero new initialize].
	(aValue = 1) ifTrue: [^Uno new initialize].
	(aValue > 1) ifTrue: [^(EnteroSalvoCeroNiUnoPositivo new initializeWith: aValue)].
	(aValue < 0) ifTrue: [^(EnteroSalvoCeroNiUnoNegativo new initializeWith: aValue)]. "
	! !
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/19/2023 18:36:36' prior: 50627020!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^( Entero subclasses detect: [:aEnteroClass | aEnteroClass managesIntegerValue: aValue]) with: aValue.
	
	"(aValue = 0) ifTrue: [^Cero new initialize].
	(aValue = 1) ifTrue: [^Uno new initialize].
	(aValue > 1) ifTrue: [^(EnteroSalvoCeroNiUnoPositivo new initializeWith: aValue)].
	(aValue < 0) ifTrue: [^(EnteroSalvoCeroNiUnoNegativo new initializeWith: aValue)]. "
	! !
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/19/2023 18:37:59' prior: 50627042!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^( Entero subclasses detect: [:aEnteroClass | aEnteroClass managesIntegerValue: aValue]) new initializeWith: aValue.
	
	"(aValue = 0) ifTrue: [^Cero new initialize].
	(aValue = 1) ifTrue: [^Uno new initialize].
	(aValue > 1) ifTrue: [^(EnteroSalvoCeroNiUnoPositivo new initializeWith: aValue)].
	(aValue < 0) ifTrue: [^(EnteroSalvoCeroNiUnoNegativo new initializeWith: aValue)]. "
	! !

!classRemoval: #Fraccion stamp: 'WAL 4/19/2023 20:09:51'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'WAL 4/19/2023 20:09:51'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUnoPositivo stamp: 'WAL 4/19/2023 20:09:51'!
EnteroSalvoCeroNiUno subclass: #EnteroSalvoCeroNiUnoPositivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUnoNegativo stamp: 'WAL 4/19/2023 20:09:51'!
EnteroSalvoCeroNiUno subclass: #EnteroSalvoCeroNiUnoNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUno stamp: 'WAL 4/19/2023 20:09:51'!
Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'WAL 4/19/2023 20:09:52'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 4/19/2023 20:09:52'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 4/19/2023 20:09:52'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 4/19/2023 20:09:52'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/a/s/sw/smalltalk/Numero-Exercise-final.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/19/2023 20:15:00'!
PASSED!

----STARTUP---- (19 April 2023 20:17:25) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!


!classRemoval: #Fraccion stamp: 'WAL 4/19/2023 20:17:54'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'WAL 4/19/2023 20:17:54'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUnoPositivo stamp: 'WAL 4/19/2023 20:17:55'!
EnteroSalvoCeroNiUno subclass: #EnteroSalvoCeroNiUnoPositivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUnoNegativo stamp: 'WAL 4/19/2023 20:17:55'!
EnteroSalvoCeroNiUno subclass: #EnteroSalvoCeroNiUnoNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUno stamp: 'WAL 4/19/2023 20:17:55'!
Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'WAL 4/19/2023 20:17:55'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 4/19/2023 20:17:55'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 4/19/2023 20:17:56'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 4/19/2023 20:17:56'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/a/s/sw/smalltalk/Numeros-Ejercicio.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'WAL 4/19/2023 20:18:15'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'WAL 4/19/2023 20:18:15'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'WAL 4/19/2023 20:18:15'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'WAL 4/19/2023 20:18:15'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'WAL 4/19/2023 20:18:15'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'WAL 4/19/2023 20:18:15'!
ERROR!

----STARTUP---- (22 April 2023 10:55:26) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!

!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/19/2023 18:36:28' prior: 50626739!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^( self subclasses detect: [:aEnteroClass | aEnteroClass managesIntegerValue: aValue]) with: aValue.
	
	"(aValue = 0) ifTrue: [^Cero new initialize].
	(aValue = 1) ifTrue: [^Uno new initialize].
	(aValue > 1) ifTrue: [^(EnteroSalvoCeroNiUnoPositivo new initializeWith: aValue)].
	(aValue < 0) ifTrue: [^(EnteroSalvoCeroNiUnoNegativo new initializeWith: aValue)]. "
	! !
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/19/2023 18:36:36' prior: 50629167!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^( Entero subclasses detect: [:aEnteroClass | aEnteroClass managesIntegerValue: aValue]) with: aValue.
	
	"(aValue = 0) ifTrue: [^Cero new initialize].
	(aValue = 1) ifTrue: [^Uno new initialize].
	(aValue > 1) ifTrue: [^(EnteroSalvoCeroNiUnoPositivo new initializeWith: aValue)].
	(aValue < 0) ifTrue: [^(EnteroSalvoCeroNiUnoNegativo new initializeWith: aValue)]. "
	! !
!Entero class methodsFor: 'instance creation' stamp: 'WAL 4/19/2023 18:37:59' prior: 50629189!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^( Entero subclasses detect: [:aEnteroClass | aEnteroClass managesIntegerValue: aValue]) new initializeWith: aValue.
	
	"(aValue = 0) ifTrue: [^Cero new initialize].
	(aValue = 1) ifTrue: [^Uno new initialize].
	(aValue > 1) ifTrue: [^(EnteroSalvoCeroNiUnoPositivo new initializeWith: aValue)].
	(aValue < 0) ifTrue: [^(EnteroSalvoCeroNiUnoNegativo new initializeWith: aValue)]. "
	! !

!classRemoval: #Fraccion stamp: 'WAL 4/22/2023 10:55:34'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'WAL 4/22/2023 10:55:34'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUnoPositivo stamp: 'WAL 4/22/2023 10:55:35'!
EnteroSalvoCeroNiUno subclass: #EnteroSalvoCeroNiUnoPositivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUnoNegativo stamp: 'WAL 4/22/2023 10:55:35'!
EnteroSalvoCeroNiUno subclass: #EnteroSalvoCeroNiUnoNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUno stamp: 'WAL 4/22/2023 10:55:35'!
Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'WAL 4/22/2023 10:55:35'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 4/22/2023 10:55:35'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 4/22/2023 10:55:36'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 4/22/2023 10:55:36'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:11'!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:12'!
test02isCeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:14'!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:18'!
test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:20'!
test07EnteroDividesEnteroCorrectly

	self assert: two / two equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:38'!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:52'!
test09FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:56'!
test10FraccionDividesFraccionCorrectly
"
    La division de fracciones es:
	 
	(a/b) / (c/d) = (a.d) / (b.c)
"

	self assert: oneHalf / oneFifth equals: fiveHalfs! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:50'!
test13EnteroMultipliesFraccionCorrectly

	self assert: two * oneFifth equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:52'!
test14FraccionMultipliesEnteroCorrectly

	self assert: oneFifth * two equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:57'!
test15EnteroDividesFraccionCorrectly

	self assert: one / twoFifth equals: fiveHalfs  ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:59'!
test16FraccionDividesEnteroCorrectly

	self assert: twoFifth / five equals: twoTwentyfifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:38'!
test17AFraccionCanBeEqualToAnEntero

	self assert: two equals: four / two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:39'!
test18AparentFraccionesAreEqual

	self assert: oneHalf equals: two / four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:40'!
test19AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test20MultiplyingFraccionesCanReturnAnEntero

	self assert: (two/five) * (five/two) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test21DividingFraccionesCanReturnAnEntero

	self assert: oneHalf / oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:43'!
test22DividingEnterosCanReturnAFraccion

	self assert: two / four equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test23CanNotDivideEnteroByZero

	self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test24CanNotDivideFraccionByZero

	self 
		should: [ oneHalf / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test25AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test26AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 4/15/2021 16:45:35'!
test27EnteroSubstractsEnteroCorrectly

	self assert: four - one equals: three! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:47:41'!
test28FraccionSubstractsFraccionCorrectly
	
	self assert: twoFifth - oneFifth equals: oneFifth.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:00'!
test29EnteroSubstractsFraccionCorrectly

	self assert: one - oneHalf equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:05'!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:08'!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:48'!
test32SubstractingSameEnterosReturnsZero

	self assert: one - one equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:01'!
test33SubstractingSameFraccionesReturnsZero

	self assert: oneHalf - oneHalf equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:14'!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:23'!
test35FibonacciZeroIsOne

	self assert: zero fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:32'!
test36FibonacciOneIsOne

	self assert: one fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:39'!
test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros

	self assert: four fibonacci equals: five.
	self assert: three fibonacci equals: three. 
	self assert: five fibonacci equals: four fibonacci + three fibonacci.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:47'!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:55'!
test39NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:03'!
test40NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: negativeOne / two.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:11'!
test41SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (negativeOne / negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:17'!
test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (one / negativeTwo)! !
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/23/2018 23:46:28' overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
* aMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
+ anAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 22:21:28'!
- aSubtrahend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
/ aDivisor

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:19:28'!
addEntero: unEntero
	
	self subclassResponsibility.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:19:01'!
addFraccion: unaFraccion 
	
	self subclassResponsibility.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:27:32'!
divideAFraccion: unaFraccion
	
	self subclassResponsibility! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:27:40'!
divideAnEntero: unaFraccion
	
	self subclassResponsibility! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
invalidNumberType

	self error: self class invalidNumberTypeErrorDescription! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:28:05'!
multiplyWithEntero: unNumero

	self subclassResponsibility! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:28:14'!
multiplyWithFraccion: unaFraccion 
	
	self subclassResponsibility.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:37:13'!
negated
	
	^self * (Entero with: -1)! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:28:25'!
substractToEntero: unEntero
	
	self subclassResponsibility.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:28:33'!
substractToFraccion: unaFraccion
	
	self subclassResponsibility.! !
!Numero methodsFor: 'testing' stamp: 'NR 9/23/2018 23:36:49'!
isNegative

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isOne

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isZero

	self subclassResponsibility ! !

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:02'!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero!!!!!!'! !
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:09'!
invalidNumberTypeErrorDescription
	
	^ 'Tipo de número inválido!!!!!!'! !

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:24:34' overrides: 50629608!
* aMultiplier 
	
	^aMultiplier multiplyWithEntero: self.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:19:21' overrides: 50629613!
+ anAdder 
	
	^anAdder addEntero: self.
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:25:26' overrides: 50629617!
- aSubtrahend

	^ aSubtrahend substractToEntero: self.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:21:09' overrides: 50629622!
/ aDivisor 

	^aDivisor divideAnEntero: self.
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/17/2023 21:32:24'!
// aDivisor 
	
	^self class with: self integerValue // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:26:11' overrides: 50629626!
addEntero: unEntero 
	
	^self class with: self integerValue + unEntero integerValue.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:25:56' overrides: 50629631!
addFraccion: unaFraccion
	
	^unaFraccion addEntero: self.
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:23:05'!
divideANumerator: aNumerator
	
	^Fraccion new initializeWith: aNumerator over: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:21:14' overrides: 50629641!
divideAnEntero: unEntero

	 self subclassResponsibility ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:07:51'!
fibonacci

	self subclassResponsibility 
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/17/2023 21:32:44'!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (self integerValue gcd: anEntero integerValue)! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:24:43' overrides: 50629651!
multiplyWithEntero: unEntero
	
	^self class with: self integerValue * unEntero integerValue
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:24:34' overrides: 50629656!
multiplyWithFraccion: unaFraccion 
	
	^unaFraccion multiplyWithEntero: self.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:25:35' overrides: 50629665!
substractToEntero: unEntero

	^ self class with: unEntero integerValue - self integerValue.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:25:11' overrides: 50629670!
substractToFraccion: unaFraccion

	^ Fraccion
			with: unaFraccion numerator - (self * unaFraccion denominator)
			over: unaFraccion denominator! !
!Entero methodsFor: 'comparing' stamp: 'AS 4/18/2023 22:30:32' overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ self integerValue = anObject integerValue ]! !
!Entero methodsFor: 'comparing' stamp: 'AS 4/19/2023 19:10:01' overrides: 16901788!
hash

	^ self integerValue hash! !
!Entero methodsFor: 'initialization' stamp: 'AS 4/19/2023 19:20:30' overrides: 50629636!
divideAFraccion: unaFraccion
	
	^Fraccion with: unaFraccion numerator over: unaFraccion denominator * self! !
!Entero methodsFor: 'initialization' stamp: 'AS 4/19/2023 19:10:45'!
initializeWith: aValue 
	
	self subclassResponsibility ! !
!Entero methodsFor: 'value' stamp: 'AS 4/19/2023 19:11:03'!
integerValue

	self subclassResponsibility ! !
!Entero methodsFor: 'printing' stamp: 'WAL 4/18/2023 18:01:59' overrides: 16902975!
printOn: aStream

	aStream print: self integerValue ! !
!Entero methodsFor: 'testing' stamp: 'AS 4/19/2023 19:11:15' overrides: 50629675!
isNegative
	
	self subclassResponsibility ! !
!Entero methodsFor: 'testing' stamp: 'AS 4/19/2023 19:11:21' overrides: 50629679!
isOne
	
	self subclassResponsibility ! !
!Entero methodsFor: 'testing' stamp: 'AS 4/19/2023 19:11:26' overrides: 50629683!
isZero
	
	self subclassResponsibility ! !

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Entero class
	instanceVariableNames: ''!

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Entero class
	instanceVariableNames: ''!
!Entero class methodsFor: 'error descriptions' stamp: 'AS 4/19/2023 19:12:20'!
negativeFibonacciErrorDescription

	^ ' Fibonacci no está definido aquí para Enteros Negativos!!!!!!'! !
!Entero class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 19:11:55'!
isConstructedWith: aValue 
	
	self subclassResponsibility 
! !
!Entero class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 19:13:00'!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^(Entero subclasses detect: [:enteroSubclass | enteroSubclass isConstructedWith: aValue]) initializeWith: aValue

! !

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Cero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:55:04' overrides: 50629836!
isNegative
	
	^false! !
!Cero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:54:15' overrides: 50629840!
isOne
	
	^false! !
!Cero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:27:35' overrides: 50629844!
isZero
	
	^true! !
!Cero methodsFor: 'value' stamp: 'WAL 4/17/2023 21:17:24' overrides: 50629826!
integerValue

	^0! !
!Cero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:28:47' overrides: 50629763!
divideAnEntero: unEntero

	self error: Numero canNotDivideByZeroErrorDescription! !
!Cero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:07:13' overrides: 50629768!
fibonacci
	
	^ Uno new! !

!classDefinition: 'Cero class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Cero class
	instanceVariableNames: ''!

!classDefinition: 'Cero class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Cero class
	instanceVariableNames: ''!
!Cero class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 13:42:01'!
initializeWith: aValue
	
	^Cero new! !
!Cero class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 18:55:34' overrides: 50629863!
isConstructedWith: aValue
	
	^ aValue = 0! !

!classDefinition: #EnteroSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!EnteroSalvoCeroNiUno methodsFor: 'initialization' stamp: 'WAL 4/18/2023 20:16:39' overrides: 50629822!
initializeWith: aValue 
	
	value := aValue! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/18/2023 19:09:14' overrides: 50629826!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'AS 4/19/2023 19:13:54' overrides: 50629836!
isNegative
	
	self subclassResponsibility ! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:54:27' overrides: 50629840!
isOne
	
	^false! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:27:42' overrides: 50629844!
isZero
	
	^false! !
!EnteroSalvoCeroNiUno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:28:58' overrides: 50629763!
divideAnEntero: unEntero
	
	self subclassResponsibility ! !
!EnteroSalvoCeroNiUno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:06:52' overrides: 50629768!
fibonacci
	
	self subclassResponsibility ! !

!classDefinition: 'EnteroSalvoCeroNiUno class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
EnteroSalvoCeroNiUno class
	instanceVariableNames: ''!

!classDefinition: 'EnteroSalvoCeroNiUno class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
EnteroSalvoCeroNiUno class
	instanceVariableNames: ''!
!EnteroSalvoCeroNiUno class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 18:55:34'!
initializeWith: aValue
	
	"Estamos asumiendo que ninguna subclase tiene subclases y por eso usamos el new.
	 Podríamos ser mas genéricos si quitamos el new y cada subclase se crea en initializeWith,
	 pero en este caso ambas subclases tendrian el mismo código."
	
	^(self subclasses detect: [:subclass | subclass isConstructedWith: aValue]) new initializeWith: aValue
! !
!EnteroSalvoCeroNiUno class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 18:55:34' overrides: 50629863!
isConstructedWith: aValue

	^ self subclasses anySatisfy: [:subclass | subclass isConstructedWith: aValue]! !

!classDefinition: #EnteroNegativoSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
EnteroSalvoCeroNiUno subclass: #EnteroNegativoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroNegativoSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
EnteroSalvoCeroNiUno subclass: #EnteroNegativoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!EnteroNegativoSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:56:00' overrides: 50629968!
isNegative
	
	^true! !
!EnteroNegativoSalvoCeroNiUno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:29:29' overrides: 50629982!
divideAnEntero: unEntero

	^unEntero negated / self negated! !
!EnteroNegativoSalvoCeroNiUno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:06:33' overrides: 50629988!
fibonacci
	
	self error: Entero negativeFibonacciErrorDescription! !

!classDefinition: 'EnteroNegativoSalvoCeroNiUno class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
EnteroNegativoSalvoCeroNiUno class
	instanceVariableNames: ''!

!classDefinition: 'EnteroNegativoSalvoCeroNiUno class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
EnteroNegativoSalvoCeroNiUno class
	instanceVariableNames: ''!
!EnteroNegativoSalvoCeroNiUno class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 18:55:34' overrides: 50630019!
isConstructedWith: aValue
	
	^ aValue < 0! !

!classDefinition: #EnteroPositivoSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
EnteroSalvoCeroNiUno subclass: #EnteroPositivoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroPositivoSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
EnteroSalvoCeroNiUno subclass: #EnteroPositivoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!EnteroPositivoSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:56:33' overrides: 50629968!
isNegative
	
	^false! !
!EnteroPositivoSalvoCeroNiUno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:57:36' overrides: 50629982!
divideAnEntero: unEntero

	| greatestCommonDivisor numerator denominator |
	
	greatestCommonDivisor := unEntero greatestCommonDivisorWith: self. 
	numerator := unEntero // greatestCommonDivisor.
	denominator := self // greatestCommonDivisor.

	^denominator divideANumerator: numerator
	
	"Si el denominador es 1, debe devolver un Entero, en caso contrario debe devolver una fracción
	Para quitar el if, hicimos un nuevo mensaje (divideANumerator) que diferencie entre el 1 y los demás enteros."
	
"	(denominator isOne)	 ifTrue: [^numerator].
	^Fraccion new initializeWith: numerator over: denominator"

	
	
! !
!EnteroPositivoSalvoCeroNiUno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:05:40' overrides: 50629988!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci! !

!classDefinition: 'EnteroPositivoSalvoCeroNiUno class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
EnteroPositivoSalvoCeroNiUno class
	instanceVariableNames: ''!

!classDefinition: 'EnteroPositivoSalvoCeroNiUno class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
EnteroPositivoSalvoCeroNiUno class
	instanceVariableNames: ''!
!EnteroPositivoSalvoCeroNiUno class methodsFor: 'as yet unclassified' stamp: 'AS 4/19/2023 18:55:34' overrides: 50630019!
isConstructedWith: aValue
	
	^ aValue > 1! !

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:36'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Uno methodsFor: 'value' stamp: 'WAL 4/17/2023 21:17:32' overrides: 50629826!
integerValue

	^1! !
!Uno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:56:43' overrides: 50629836!
isNegative
	
	^false! !
!Uno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:54:34' overrides: 50629840!
isOne
	
	^true! !
!Uno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:27:48' overrides: 50629844!
isZero
	
	^false! !
!Uno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:23:05' overrides: 50629757!
divideANumerator: aNumerator
	
	^aNumerator! !
!Uno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:30:16' overrides: 50629763!
divideAnEntero: unEntero

	^ unEntero! !
!Uno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:07:32' overrides: 50629768!
fibonacci
	
	^ Uno new! !

!classDefinition: 'Uno class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:37'!
Uno class
	instanceVariableNames: ''!

!classDefinition: 'Uno class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:37'!
Uno class
	instanceVariableNames: ''!
!Uno class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 13:42:33'!
initializeWith: aValue
	
	^ Uno new! !
!Uno class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 18:55:34' overrides: 50629863!
isConstructedWith: aValue
	
	^ aValue = 1! !

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:37'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:37'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:24:05' overrides: 50629608!
* aMultiplier 
	
	^aMultiplier multiplyWithFraccion: self.
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:18:20' overrides: 50629613!
+ anAdder 
	
	^anAdder addFraccion: self.
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:24:59' overrides: 50629617!
- aSubtrahend 

	^ aSubtrahend substractToFraccion: self.
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:19:58' overrides: 50629622!
/ aDivisor 

	^aDivisor divideAFraccion: self.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:30:43' overrides: 50629626!
addEntero: unEntero 
	
	| nuevoNumerador |
	
	nuevoNumerador := (unEntero * self denominator) + self numerator .
	
	^self class with: nuevoNumerador over: self denominator.
	
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:31:00' overrides: 50629631!
addFraccion: unaFraccion 

	| newNumerator newDenominator |
	
	newNumerator := (numerator * unaFraccion denominator) + (denominator * unaFraccion numerator).
	newDenominator := denominator * unaFraccion denominator.
	
	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:31:19' overrides: 50629636!
divideAFraccion: unaFraccion
	
	^Fraccion with: unaFraccion numerator * self denominator over: unaFraccion denominator * self numerator

! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:31:32' overrides: 50629641!
divideAnEntero: unEntero
	
	^Fraccion with: unEntero * self denominator over: self numerator

! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:32:32'!
divideByEntero: unEntero
	
	^numerator / (denominator * unEntero integerValue)! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:32:09'!
divideByFraccion: unaFraccion
	
	^(numerator * unaFraccion denominator) / (denominator * unaFraccion numerator)! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:32:43' overrides: 50629651!
multiplyWithEntero: unEntero
	
	^self class with: self numerator * unEntero over: self denominator 
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:33:25' overrides: 50629656!
multiplyWithFraccion: unaFraccion
	
	^(self numerator * unaFraccion numerator) / (self denominator * unaFraccion denominator)
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:33:51' overrides: 50629665!
substractToEntero: unEntero

	^ self class
			with: unEntero * self denominator - self numerator
			over: self denominator
	
	
	

! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:34:06' overrides: 50629670!
substractToFraccion: unaFraccion

	^ self class
			with: unaFraccion numerator * self denominator - (self numerator * unaFraccion denominator)
			over: unaFraccion denominator * self denominator
	
	
	

! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:42' overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ (numerator * anObject denominator) = (denominator * anObject numerator) ]! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:50' overrides: 16901788!
hash

	^(numerator hash / denominator hash) hash! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56'!
denominator

	^ denominator! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56'!
numerator

	^ numerator! !
!Fraccion methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 22:54'!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	numerator := aNumerator.
	denominator := aDenominator ! !
!Fraccion methodsFor: 'testing' stamp: 'NR 9/23/2018 23:41:38' overrides: 50629675!
isNegative
	
	^numerator < 0! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' overrides: 50629679!
isOne
	
	^false! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' overrides: 50629683!
isZero
	
	^false! !
!Fraccion methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:54:46' overrides: 16902975!
printOn: aStream

	aStream 
		print: numerator;
		nextPut: $/;
		print: denominator ! !

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:37'!
Fraccion class
	instanceVariableNames: ''!

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:37'!
Fraccion class
	instanceVariableNames: ''!
!Fraccion class methodsFor: 'intance creation' stamp: 'AS 4/19/2023 19:21:09'!
with: aDividend over: aDivisor

	^ aDivisor divideAnEntero: aDividend
! !

!classRemoval: #Fraccion stamp: 'WAL 4/22/2023 10:55:37'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'WAL 4/22/2023 10:55:37'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroSalvoCeroNiUno stamp: 'WAL 4/22/2023 10:55:37'!
Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'WAL 4/22/2023 10:55:37'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 4/22/2023 10:55:38'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 4/22/2023 10:55:38'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 4/22/2023 10:55:38'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:38'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:38'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:11'!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:12'!
test02isCeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:14'!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:18'!
test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:20'!
test07EnteroDividesEnteroCorrectly

	self assert: two / two equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:38'!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:52'!
test09FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:56'!
test10FraccionDividesFraccionCorrectly
"
    La division de fracciones es:
	 
	(a/b) / (c/d) = (a.d) / (b.c)
"

	self assert: oneHalf / oneFifth equals: fiveHalfs! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:50'!
test13EnteroMultipliesFraccionCorrectly

	self assert: two * oneFifth equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:52'!
test14FraccionMultipliesEnteroCorrectly

	self assert: oneFifth * two equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:57'!
test15EnteroDividesFraccionCorrectly

	self assert: one / twoFifth equals: fiveHalfs  ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:59'!
test16FraccionDividesEnteroCorrectly

	self assert: twoFifth / five equals: twoTwentyfifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:38'!
test17AFraccionCanBeEqualToAnEntero

	self assert: two equals: four / two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:39'!
test18AparentFraccionesAreEqual

	self assert: oneHalf equals: two / four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:40'!
test19AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test20MultiplyingFraccionesCanReturnAnEntero

	self assert: (two/five) * (five/two) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test21DividingFraccionesCanReturnAnEntero

	self assert: oneHalf / oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:43'!
test22DividingEnterosCanReturnAFraccion

	self assert: two / four equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test23CanNotDivideEnteroByZero

	self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test24CanNotDivideFraccionByZero

	self 
		should: [ oneHalf / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test25AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test26AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 4/15/2021 16:45:35'!
test27EnteroSubstractsEnteroCorrectly

	self assert: four - one equals: three! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:47:41'!
test28FraccionSubstractsFraccionCorrectly
	
	self assert: twoFifth - oneFifth equals: oneFifth.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:00'!
test29EnteroSubstractsFraccionCorrectly

	self assert: one - oneHalf equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:05'!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:08'!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:48'!
test32SubstractingSameEnterosReturnsZero

	self assert: one - one equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:01'!
test33SubstractingSameFraccionesReturnsZero

	self assert: oneHalf - oneHalf equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:14'!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:23'!
test35FibonacciZeroIsOne

	self assert: zero fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:32'!
test36FibonacciOneIsOne

	self assert: one fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:39'!
test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros

	self assert: four fibonacci equals: five.
	self assert: three fibonacci equals: three. 
	self assert: five fibonacci equals: four fibonacci + three fibonacci.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:47'!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:55'!
test39NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:03'!
test40NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: negativeOne / two.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:11'!
test41SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (negativeOne / negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:17'!
test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (one / negativeTwo)! !
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/23/2018 23:46:28' overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:38'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:38'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
* aMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
+ anAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 22:21:28'!
- aSubtrahend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
/ aDivisor

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
invalidNumberType

	self error: self class invalidNumberTypeErrorDescription! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:37:13'!
negated
	
	^self * (Entero with: -1)! !
!Numero methodsFor: 'testing' stamp: 'NR 9/23/2018 23:36:49'!
isNegative

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isOne

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isZero

	self subclassResponsibility ! !

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:38'!
Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:38'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:02'!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero!!!!!!'! !
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:09'!
invalidNumberTypeErrorDescription
	
	^ 'Tipo de número inválido!!!!!!'! !

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:38'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:38'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:13' overrides: 50630749!
* aMultiplier 
	
	^self class with: value * aMultiplier integerValue
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:13' overrides: 50630754!
+ anAdder 
	
	^self class with: value + anAdder integerValue
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:40:37' overrides: 50630758!
- aSubtrahend 
	
	^ self class with: value - aSubtrahend integerValue.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:14' overrides: 50630763!
/ aDivisor 
	
	^Fraccion with: self over: aDivisor! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:55'!
// aDivisor 
	
	^self class with: value // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HAW 9/24/2018 08:47:50'!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:00'!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (value gcd: anEntero integerValue)! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 21:01' overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ value = anObject integerValue ]! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:17' overrides: 16901788!
hash

	^value hash! !
!Entero methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 20:09'!
initalizeWith: aValue 
	
	value := aValue! !
!Entero methodsFor: 'value' stamp: 'HernanWilkinson 5/7/2016 21:02'!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !
!Entero methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:53:19' overrides: 16902975!
printOn: aStream

	aStream print: value ! !
!Entero methodsFor: 'testing' stamp: 'NR 9/23/2018 22:17:55' overrides: 50630777!
isNegative
	
	^value < 0! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:14' overrides: 50630781!
isOne
	
	^value = 1! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:12' overrides: 50630785!
isZero
	
	^value = 0! !

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:39'!
Entero class
	instanceVariableNames: ''!

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:39'!
Entero class
	instanceVariableNames: ''!
!Entero class methodsFor: 'instance creation' stamp: 'NR 4/15/2021 16:42:24'!
negativeFibonacciErrorDescription
	^ ' Fibonacci no está definido aquí para Enteros Negativos!!!!!!'! !
!Entero class methodsFor: 'instance creation' stamp: 'HernanWilkinson 5/7/2016 22:53'!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initalizeWith: aValue! !

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:39'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:39'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:14' overrides: 50630749!
* aMultiplier 
	
	^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator)
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:14' overrides: 50630754!
+ anAdder 
	
	| newNumerator newDenominator |
	
	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	
	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:43:50' overrides: 50630758!
- aSubtrahend 
	
	| newNumerator newDenominator |
	
	newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator 
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:14' overrides: 50630763!
/ aDivisor 
	
	^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:42' overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ (numerator * anObject denominator) = (denominator * anObject numerator) ]! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:50' overrides: 16901788!
hash

	^(numerator hash / denominator hash) hash! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56'!
denominator

	^ denominator! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56'!
numerator

	^ numerator! !
!Fraccion methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 22:54'!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	numerator := aNumerator.
	denominator := aDenominator ! !
!Fraccion methodsFor: 'testing' stamp: 'NR 9/23/2018 23:41:38' overrides: 50630777!
isNegative
	
	^numerator < 0! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' overrides: 50630781!
isOne
	
	^false! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' overrides: 50630785!
isZero
	
	^false! !
!Fraccion methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:54:46' overrides: 16902975!
printOn: aStream

	aStream 
		print: numerator;
		nextPut: $/;
		print: denominator ! !

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:39'!
Fraccion class
	instanceVariableNames: ''!

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'WAL 4/22/2023 10:55:39'!
Fraccion class
	instanceVariableNames: ''!
!Fraccion class methodsFor: 'intance creation' stamp: 'NR 9/23/2018 23:45:19'!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator
	! !

----End fileIn of /home/a/s/sw/smalltalk/Stack-Exercise.st----!

Object subclass: #OOStackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackElement category: 'Stack-Exercise' stamp: 'WAL 4/22/2023 11:04:30'!
Object subclass: #OOStackElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackElement subclass: #OOStackEmptyElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackEmptyElement category: 'Stack-Exercise' stamp: 'WAL 4/22/2023 11:04:46'!
OOStackElement subclass: #OOStackEmptyElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackElement subclass: #OOStackNonEmptyElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNonEmptyElement category: 'Stack-Exercise' stamp: 'WAL 4/22/2023 11:04:56'!
OOStackElement subclass: #OOStackNonEmptyElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'no messages' stamp: 'WAL 4/22/2023 11:06:14'!
top! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 11:06:19'!
pop! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 11:06:35'!
push: anElementToAdd! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'WAL 4/22/2023 11:06:47'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'WAL 4/22/2023 11:06:47'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'WAL 4/22/2023 11:06:47'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'WAL 4/22/2023 11:06:47'!
FAILURE!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'WAL 4/22/2023 11:06:47'!
FAILURE!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'WAL 4/22/2023 11:06:47'!
FAILURE!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'WAL 4/22/2023 11:06:47'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'WAL 4/22/2023 11:06:47'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'WAL 4/22/2023 11:06:47'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'WAL 4/22/2023 11:06:47'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 11:07:15'!
isEmpty! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 11:07:20' overrides: 16901663!
size! !
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:08:14' prior: 50631262!
push: anElementToStack! !

Object subclass: #OOStack
	instanceVariableNames: 'topElement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'WAL 4/22/2023 11:09:57'!
Object subclass: #OOStack
	instanceVariableNames: 'topElement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialize' stamp: 'WAL 4/22/2023 11:11:53' overrides: 16920235!
initialize

	! !
!OOStack methodsFor: 'initialize' stamp: 'WAL 4/22/2023 11:12:35' prior: 50631322 overrides: 16920235!
initialize

	topElement := OOStackEmptyElement new! !

OOStackElement subclass: #OOStackNonEmptyElement
	instanceVariableNames: 'previous'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNonEmptyElement category: 'Stack-Exercise' stamp: 'WAL 4/22/2023 11:14:29'!
OOStackElement subclass: #OOStackNonEmptyElement
	instanceVariableNames: 'previous'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:15:25' prior: 50631307!
push: anElementToStack

	! !

OOStackElement subclass: #OOStackNonEmptyElement
	instanceVariableNames: 'previous value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNonEmptyElement category: 'Stack-Exercise' stamp: 'WAL 4/22/2023 11:15:57'!
OOStackElement subclass: #OOStackNonEmptyElement
	instanceVariableNames: 'previous value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStackElement subclass: #OOStackNonEmptyElement
	instanceVariableNames: 'value previous'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStackNonEmptyElement category: 'Stack-Exercise' stamp: 'WAL 4/22/2023 11:16:12'!
OOStackElement subclass: #OOStackNonEmptyElement
	instanceVariableNames: 'value previous'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:16:27' prior: 50631344!
push: aValueToStack

	! !
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:19:08' prior: 50631375!
push: aValueToStack

	| newElement |
	
	newElement := OOStackNonEmptyElement with: aValueToStack.
	
 ! !
!OOStackNonEmptyElement class methodsFor: 'no messages' stamp: 'WAL 4/22/2023 11:22:31'!
with: aValueInitialize

	^self new ! !
!OOStackNonEmptyElement class methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 11:24:00' prior: 50631386!
with: aValue

	^self new initalizeWith: aValue! !
!OOStackNonEmptyElement methodsFor: 'initialization' stamp: 'WAL 4/22/2023 11:26:39'!
initializeWith: aValue

	 value := aValue! !
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:29:17' prior: 50631379!
push: aValueToStack

	| newElement |
	
	newElement := OOStackNonEmptyElement with: aValueToStack.
	
 	! !
!OOStackNonEmptyElement class methodsFor: 'instance creation' stamp: 'WAL 4/22/2023 11:35:51'!
withValue: aValue stackOn: anOOStackElement

	^self new initalizeWith: aValue stackOn: anOOStackElement! !

!methodRemoval: OOStackNonEmptyElement class #with: stamp: 'WAL 4/22/2023 11:36:06'!
with: aValue

	^self new initalizeWith: aValue!
!OOStackNonEmptyElement methodsFor: 'initialization' stamp: 'WAL 4/22/2023 11:36:47'!
initializeWith: aValue stackOn: anOOStackElement

	value := aValue.
	previous := anOOStackElement.! !

!methodRemoval: OOStackNonEmptyElement #initializeWith: stamp: 'WAL 4/22/2023 11:37:10'!
initializeWith: aValue

	 value := aValue!
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:39:22' prior: 50631401!
push: aValueToStack

	topElement := OOStackNonEmptyElement initializeWith: aValueToStack stackOn: topElement.
 	! !
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:41:56' prior: 50631259!
pop

	| returnTop |

	returnTop := topElement value .

	topElement := topElement previous .
	
	^returnTop! !

Object subclass: #OOStack
	instanceVariableNames: 'topElement size'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'WAL 4/22/2023 11:44:27'!
Object subclass: #OOStack
	instanceVariableNames: 'topElement size'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:44:38' prior: 50631303 overrides: 16901663!
size

	^size! !
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:44:55' prior: 50631430!
push: aValueToStack

	topElement := OOStackNonEmptyElement initializeWith: aValueToStack stackOn: topElement.
	
	size := size +1
 	! !
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:45:18' prior: 50631437!
pop

	| returnTop |

	returnTop := topElement value .
	topElement := topElement previous .
	
	size := size -1.
	
	^returnTop! !
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:46:03' prior: 50631256!
top

	^topElement value .! !
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:46:07' prior: 50631474!
top

	^topElement value! !
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:48:47' prior: 50631299!
isEmpty

	^size = 0

	"Evitamos implementar ^topElement isEmpty"! !
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:51:23' prior: 50631482!
isEmpty

	^size = 0

	"Evitamos ^topElement isEmpty, es decir, evitamos implementar isEmpty en los elementos"! !
!OOStack methodsFor: 'initialize' stamp: 'WAL 4/22/2023 11:52:03' prior: 50631326 overrides: 16920235!
initialize

	topElement := OOStackEmptyElement new.
	
	size := 0! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'WAL 4/22/2023 11:52:19'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'WAL 4/22/2023 11:52:19'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'WAL 4/22/2023 11:52:19'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'WAL 4/22/2023 11:52:19'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'WAL 4/22/2023 11:52:19'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'WAL 4/22/2023 11:52:19'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'WAL 4/22/2023 11:52:19'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'WAL 4/22/2023 11:52:19'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'WAL 4/22/2023 11:52:19'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'WAL 4/22/2023 11:52:19'!
FAILURE!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'WAL 4/22/2023 11:52:37'!
ERROR!
!OOStack methodsFor: 'stack operations' stamp: 'WAL 4/22/2023 11:54:40' prior: 50631460!
push: aValueToStack

	topElement := OOStackNonEmptyElement withValue: aValueToStack stackOn: topElement.
	
	size := size +1
 	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'WAL 4/22/2023 11:56:00'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'WAL 4/22/2023 11:56:00'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'WAL 4/22/2023 11:56:00'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'WAL 4/22/2023 11:56:00'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'WAL 4/22/2023 11:56:00'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'WAL 4/22/2023 11:56:00'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'WAL 4/22/2023 11:56:00'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'WAL 4/22/2023 11:56:00'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'WAL 4/22/2023 11:56:00'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'WAL 4/22/2023 11:56:00'!
FAILURE!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'WAL 4/22/2023 11:56:04'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'WAL 4/22/2023 11:56:33'!
ERROR!
!OOStackNonEmptyElement class methodsFor: 'instance creation' stamp: 'WAL 4/22/2023 11:58:39' prior: 50631408!
withValue: aValue stackOn: anOOStackElement

	^self new initializeWith: aValue stackOn: anOOStackElement
	! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'WAL 4/22/2023 11:58:43'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'WAL 4/22/2023 11:58:44'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'WAL 4/22/2023 11:59:00'!
ERROR!
!OOStackNonEmptyElement methodsFor: 'initialization' stamp: 'WAL 4/22/2023 12:00:06'!
previous

	^previous ! !

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'WAL 4/22/2023 12:00:52'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'WAL 4/22/2023 12:00:55'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'WAL 4/22/2023 12:00:59'!
FAILURE!
!OOStackNonEmptyElement methodsFor: 'element operations' stamp: 'WAL 4/22/2023 12:03:01' overrides: 16902254!
value

	^value ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'WAL 4/22/2023 12:03:10'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'WAL 4/22/2023 12:03:10'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'WAL 4/22/2023 12:03:10'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'WAL 4/22/2023 12:03:10'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'WAL 4/22/2023 12:03:10'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'WAL 4/22/2023 12:03:10'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'WAL 4/22/2023 12:03:10'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'WAL 4/22/2023 12:03:10'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'WAL 4/22/2023 12:03:10'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'WAL 4/22/2023 12:03:10'!
FAILURE!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'WAL 4/22/2023 12:03:42'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'WAL 4/22/2023 12:03:42'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'WAL 4/22/2023 12:03:42'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'WAL 4/22/2023 12:03:42'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'WAL 4/22/2023 12:03:42'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'WAL 4/22/2023 12:03:42'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'WAL 4/22/2023 12:03:42'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'WAL 4/22/2023 12:03:42'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'WAL 4/22/2023 12:03:42'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'WAL 4/22/2023 12:03:42'!
FAILURE!
!OOStackEmptyElement methodsFor: 'no messages' stamp: 'WAL 4/22/2023 12:05:28' overrides: 16902254!
value

	self error: OOStack stackEmptyErrorDescription! !
!OOStackElement methodsFor: 'no messages' stamp: 'WAL 4/22/2023 12:05:53' overrides: 16902254!
value

	self subclassResponsibility ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'WAL 4/22/2023 12:06:16'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'WAL 4/22/2023 12:06:16'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'WAL 4/22/2023 12:06:16'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'WAL 4/22/2023 12:06:16'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'WAL 4/22/2023 12:06:16'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'WAL 4/22/2023 12:06:16'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'WAL 4/22/2023 12:06:16'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'WAL 4/22/2023 12:06:16'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'WAL 4/22/2023 12:06:16'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'WAL 4/22/2023 12:06:16'!
PASSED!
!OOStackEmptyElement methodsFor: 'element operations' stamp: 'WAL 4/22/2023 12:07:21'!
previous

	self error: OOStack stackEmptyErrorDescription! !
!OOStackElement methodsFor: 'element operations' stamp: 'WAL 4/22/2023 12:07:59'!
previous

	self subclassResponsibility ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'WAL 4/22/2023 12:08:02'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'WAL 4/22/2023 12:08:02'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'WAL 4/22/2023 12:08:02'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'WAL 4/22/2023 12:08:02'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'WAL 4/22/2023 12:08:02'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'WAL 4/22/2023 12:08:02'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'WAL 4/22/2023 12:08:02'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'WAL 4/22/2023 12:08:02'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'WAL 4/22/2023 12:08:02'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'WAL 4/22/2023 12:08:02'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'no messages' stamp: 'WAL 4/22/2023 12:15:28'!
selectFromStack: anOOStack sentencesPrefixedWith: aPrefix

	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 12:23:00' prior: 50631766!
selectFromStack: anOOStack sentencesPrefixedWith: aPrefix

	self checkNotEmptyString: aPrefix.
	
	self checkNoBlankSpaces: aPrefix.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 12:28:35'!
checkNotEmptyPrefix: aString

	aString isEmpty ifTrue: [ self error: 'Prefix can not be empty' ]! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 12:28:58' prior: 50631772!
selectFromStack: anOOStack sentencesPrefixedWith: aPrefix

	self checkNotEmptyPrefix: aPrefix.
	
	self checkNoBlankSpaces: aPrefix.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 12:33:27'!
checkNoBlankSpaces: aPrefix

	aPrefix detect: ' ' ifNone: [ ^aPrefix ].
	
	self error: ' '
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 12:34:08' prior: 50631795!
checkNoBlankSpaces: aPrefix

	aPrefix detect: ' ' ifNone: [ ^aPrefix ].
	
	self error: 'Prefix can not contain blank spaces'
	
	! !

sentenceFinder := SentenceFinderByPrefix new.!

sentenceFinder checkNoBlankSpaces: 'dcec'.!

sentenceFinder checkNoBlankSpaces: 'dcec '.!

'dcec '!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 12:43:26' prior: 50631802!
checkNoBlankSpaces: aPrefix

	aPrefix detect: [ : character | character = ' '] ifNone: [ ^aPrefix ].
	
	self error: 'Prefix can not contain blank spaces'
	
	! !

sentenceFinder checkNoBlankSpaces: 'dcec '.!

sentenceFinder checkNoBlankSpaces: 'dcec'.!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 12:45:10' prior: 50631815!
checkNoBlankSpaces: aPrefix

	aPrefix detect: [ : character | character = Character space] ifNone: [ ^aPrefix ].
	
	self error: 'Prefix can not contain blank spaces'
	
	! !

sentenceFinder checkNoBlankSpaces: 'dcec'.!

sentenceFinder checkNoBlankSpaces: 'dcec '.!
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 12:55:02' prior: 50631827!
checkNoBlankSpaces: aPrefix

	(aPrefix includes: Character space ) ifTrue: [ self error: 'Prefix can not contain blank spaces' ].
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 12:55:10' prior: 50631839!
checkNoBlankSpaces: aPrefix

	( aPrefix includes: Character space ) ifTrue: [ self error: 'Prefix can not contain blank spaces' ].
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 12:56:05' prior: 50631787!
selectFromStack: anOOStack sentencesPrefixedWith: aPrefix

	self checkNotEmptyPrefix: aPrefix.
	self checkNoBlankSpaces: aPrefix.! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 12:58:28' prior: 50631855!
selectFromStack: anOOStack sentencesPrefixedWith: aPrefix

	self checkNotEmptyPrefix: aPrefix.
	self checkNoBlankSpaces: aPrefix.
	
	
	
	
	(anOOStack isEmpty) whileFalse: [
		
		anOOStack pop 
		
		
	]! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 13:03:43' prior: 50631863!
selectFromStack: anOOStack sentencesPrefixedWith: aPrefix

	| returnedCollection sentence |

	self checkNotEmptyPrefix: aPrefix.
	self checkNoBlankSpaces: aPrefix.
	
	returnedCollection := OrderedCollection new.
	
	(anOOStack isEmpty) whileFalse: [
		sentence := anOOStack pop.
		( sentence beginsWith: aPrefix ) ifTrue: [
			returnedCollection add: sentence
		]
		
		
	]

	^returnedCollection! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'WAL 4/22/2023 13:22:01' prior: 50631873!
selectFromStack: anOOStack sentencesPrefixedWith: aPrefix

	| returnedCollection sentence |

	self checkNotEmptyPrefix: aPrefix.
	self checkNoBlankSpaces: aPrefix.
	
	returnedCollection := OrderedCollection new.
	
	(anOOStack isEmpty) whileFalse: [
		sentence := anOOStack pop.
		( sentence beginsWith: aPrefix ) ifTrue: [
			returnedCollection add: sentence
		]
	]

	^returnedCollection! !
!SentenceFinderByPrefix methodsFor: 'select' stamp: 'WAL 4/22/2023 13:29:23' prior: 50631889!
selectFromStack: anOOStack sentencesPrefixedWith: aPrefix

	| returnedCollection |

	self checkNotEmptyPrefix: aPrefix.
	self checkNoBlankSpaces: aPrefix.
	
	returnedCollection := OrderedCollection new.
	
	self  addTo: returnedCollection
		sentencesPrefixedWith: aPrefix 
		fromOOStack: returnedCollection .
	
	"(anOOStack isEmpty) whileFalse: [
		sentence := anOOStack pop.
		( sentence beginsWith: aPrefix ) ifTrue: [
			returnedCollection add: sentence
		]
	]"

	^returnedCollection! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'WAL 4/22/2023 13:30:57'!
addTo: collection sentencesPrefixedWith: aPrefix fromOOStack: anOOStack

! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'WAL 4/22/2023 13:33:00' prior: 50631923!
addTo: collectionToReturn sentencesPrefixedWith: aPrefix fromOOStack: anOOStack

	| sentence |
	
	(anOOStack isEmpty) whileFalse: [
		sentence := anOOStack pop.
		( sentence beginsWith: aPrefix ) ifTrue: [
			collectionToReturn add: sentence
		].
		anOOStack push: sentence
	]! !
!SentenceFinderByPrefix methodsFor: 'select' stamp: 'WAL 4/22/2023 13:34:01' prior: 50631905!
selectFromStack: anOOStack sentencesPrefixedWith: aPrefix

	| returnedCollection |

	self checkNotEmptyPrefix: aPrefix.
	self checkNoBlankSpaces: aPrefix.
	
	returnedCollection := OrderedCollection new.
	
	self  addTo: returnedCollection
		sentencesPrefixedWith: aPrefix 
		fromOOStack: returnedCollection .

	^returnedCollection! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'WAL 4/22/2023 13:36:12' prior: 50631929!
addTo: collectionToReturn sentencesPrefixedWith: aPrefix fromOOStack: anOOStack

	| sentence |
	
	(anOOStack isEmpty) whileFalse: [
		sentence := anOOStack pop.
		( sentence beginsWith: aPrefix ) ifTrue: [
			collectionToReturn add: sentence
		].
	
		self addTo: collectionToReturn
		       sentencesPrefixedWith: aPrefix
		       fromOOStack: anOOStack.
	
		anOOStack push: sentence
	]! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'WAL 4/22/2023 15:44:35' prior: 50631955!
addTo: collectionToReturn sentencesPrefixedWith: aPrefix fromOOStack: anOOStack

	| sentence |
	
	(anOOStack isEmpty) whileFalse: [
		
		
		sentence := anOOStack pop.
		
		self ifSentence: sentence
		       beginsWith: aPrefix
		       addTo: collectionToReturn.
	
		self addTo: collectionToReturn
		       sentencesPrefixedWith: aPrefix
		       fromOOStack: anOOStack.
	
		anOOStack push: sentence
	]! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'WAL 4/22/2023 15:46:47'!
ifSentence: aSentence beginsWith: aPrefix thenAddTo: collection

	( aSentence beginsWith: aPrefix ) ifTrue: [
		collection add: aSentence
	].! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 15:50:38'!
test01InvalidPrexixShouldRaiseInvalidPrexixError

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	"self assert: r."
	
	self assert: stack isEmpty! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 15:51:08'!
test01InvalidPrefixShouldRaiseInvalidPrefixError

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	"self assert: r."
	
	self assert: stack isEmpty! !

!methodRemoval: SentenceFinderByPrefixTest #test01InvalidPrexixShouldRaiseInvalidPrexixError stamp: 'WAL 4/22/2023 15:51:08'!
test01InvalidPrexixShouldRaiseInvalidPrexixError

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	"self assert: r."
	
	self assert: stack isEmpty!

!classRemoval: #Fraccion stamp: 'WAL 4/22/2023 15:52:12'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 4/22/2023 15:52:12'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 4/22/2023 15:52:13'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 4/22/2023 15:52:13'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Error!

----SNAPSHOT----(22 April 2023 15:56:01) CuisUniversity-5706.image priorSource: 9447561!

----STARTUP---- (22 April 2023 15:56:19) as /home/a/s/sw/smalltalk/CuisUniversity-5706.image!

!OOStackTest methodsFor: 'test' stamp: 'WAL 4/22/2023 15:59:58' prior: 50631159!
test10CanNotTopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	
	
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:00:01' prior: 50632058!
test10CanNotTopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	
	
	
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:00:08' prior: 50631135!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	
	
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:00:12' prior: 50632082!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	
	
	
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !

Error - MessageNotUnderstood!

MessageNotUnderstood!

Error!
!OOStackTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:02:06' prior: 50632094!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack new.
	
	
	
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack stackEmptyErrorDescription ]
		
! !
!SentenceFinderByPrefixTest class methodsFor: 'error descriptions' stamp: 'WAL 4/22/2023 16:03:47'!
invalidPrefixErrorDescription
	
	^''! !
!SentenceFinderByPrefix class methodsFor: 'error descriptions' stamp: 'WAL 4/22/2023 16:04:45'!
invalidPrefixErrorDescription
	
	^''! !

!methodRemoval: SentenceFinderByPrefixTest class #invalidPrefixErrorDescription stamp: 'WAL 4/22/2023 16:04:50'!
invalidPrefixErrorDescription
	
	^''!
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'WAL 4/22/2023 16:11:07' prior: 50631971!
addTo: collectionToReturn sentencesPrefixedWith: aPrefix fromOOStack: anOOStack

	| sentence |
	
	(anOOStack isEmpty) whileFalse: [
		
		
		sentence := anOOStack pop.
		
		self ifSentence: sentence
		       beginsWith: aPrefix
		       thenAddTo: collectionToReturn.
	
		self addTo: collectionToReturn
		       sentencesPrefixedWith: aPrefix
		       fromOOStack: anOOStack.
	
		anOOStack push: sentence
	]! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:20:30'!
test01PrefixWIthSpacesShouldRaisePrefixWIthSpaces

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	"self assert: r."
	
	self assert: stack isEmpty! !

!methodRemoval: SentenceFinderByPrefixTest #test01InvalidPrefixShouldRaiseInvalidPrefixError stamp: 'WAL 4/22/2023 16:20:42'!
test01InvalidPrefixShouldRaiseInvalidPrefixError

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	"self assert: r."
	
	self assert: stack isEmpty!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:23:09'!
test01PrefixWIthSpacesShouldRaisePrefixWithSpacesError

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixWithSpacesError ]
		
! !
!SentenceFinderByPrefix class methodsFor: 'error descriptions' stamp: 'WAL 4/22/2023 16:23:56'!
prefixWithSpacesErrorDescription
	
	^''! !

!methodRemoval: SentenceFinderByPrefix class #invalidPrefixErrorDescription stamp: 'WAL 4/22/2023 16:23:56'!
invalidPrefixErrorDescription
	
	^''!
!SentenceFinderByPrefix class methodsFor: 'error descriptions' stamp: 'WAL 4/22/2023 16:24:13'!
prefixEmptyErrorDescription
	
	^''! !
!SentenceFinderByPrefix class methodsFor: 'error descriptions' stamp: 'WAL 4/22/2023 16:24:25' prior: 50632193!
prefixEmptyErrorDescription
	
	^'Prefix can not be empty'! !
!SentenceFinderByPrefix class methodsFor: 'error descriptions' stamp: 'WAL 4/22/2023 16:25:26' prior: 50632184!
prefixWithSpacesErrorDescription
	
	^'Prefix can not contain space characters.'! !
!SentenceFinderByPrefix class methodsFor: 'error descriptions' stamp: 'WAL 4/22/2023 16:25:40'!
prefixWithSpaceCharacterErrorDescription
	
	^'Prefix can not contain space characters.'! !

!methodRemoval: SentenceFinderByPrefix class #prefixWithSpacesErrorDescription stamp: 'WAL 4/22/2023 16:25:52'!
prefixWithSpacesErrorDescription
	
	^'Prefix can not contain space characters.'!

!methodRemoval: SentenceFinderByPrefixTest #test01PrefixWIthSpacesShouldRaisePrefixWIthSpaces stamp: 'WAL 4/22/2023 16:28:06'!
test01PrefixWIthSpacesShouldRaisePrefixWIthSpaces

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	"self assert: r."
	
	self assert: stack isEmpty!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:28:25'!
test01CanNotUsePrefixWIthSpacesCharacters

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixWithSpacesError ]
		
! !

!methodRemoval: SentenceFinderByPrefixTest #test01PrefixWIthSpacesShouldRaisePrefixWithSpacesError stamp: 'WAL 4/22/2023 16:28:32'!
test01PrefixWIthSpacesShouldRaisePrefixWithSpacesError

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixWithSpacesError ]
		
!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:29:00'!
test01CanNotUsePrefixWIthSpaceCharacters

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixWithSpacesError ]
		
! !

!methodRemoval: SentenceFinderByPrefixTest #test01CanNotUsePrefixWIthSpacesCharacters stamp: 'WAL 4/22/2023 16:29:00'!
test01CanNotUsePrefixWIthSpacesCharacters

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixWithSpacesError ]
		
!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:29:48' prior: 50632261!
test01CanNotUsePrefixWIthSpaceCharacters

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ sentenceFinder  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixWithSpaceCharacterErrorDescription ]
		
! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:31:14' prior: 50632289!
test01CanNotUsePrefixWIthSpaceCharacters

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ sentenceFinder  selectFromStack: stack sentencesPrefixedWith: 'prefix with spaces' ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixWithSpaceCharacterErrorDescription ]
		
! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:31:29' prior: 50632304!
test01CanNotUsePrefixWIthSpaceCharacters

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ sentenceFinder  selectFromStack: stack sentencesPrefixedWith: 'prefix with spaces' ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixWithSpaceCharacterErrorDescription ]
		
! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWIthSpaceCharacters stamp: 'WAL 4/22/2023 16:31:44'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWIthSpaceCharacters stamp: 'WAL 4/22/2023 16:31:44'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'validations' stamp: 'WAL 4/22/2023 16:32:38' prior: 50631847!
checkNoBlankSpaces: aPrefix

	( aPrefix includes: Character space ) ifTrue: [ self error: SentenceFinderByPrefix prefixWithSpaceCharacterErrorDescription ].
	
	! !
!SentenceFinderByPrefix methodsFor: 'validations' stamp: 'WAL 4/22/2023 16:33:25' prior: 50631780!
checkNotEmptyPrefix: aString

	aString isEmpty ifTrue: [ self error: SentenceFinderByPrefix prefixEmptyErrorDescription ]! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWIthSpaceCharacters stamp: 'WAL 4/22/2023 16:33:43'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:34:24'!
test01CanNotUsePrefixWithSpaceCharacters

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ sentenceFinder  selectFromStack: stack sentencesPrefixedWith: 'prefix with spaces' ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixWithSpaceCharacterErrorDescription ]
		
! !

!methodRemoval: SentenceFinderByPrefixTest #test01CanNotUsePrefixWIthSpaceCharacters stamp: 'WAL 4/22/2023 16:34:24'!
test01CanNotUsePrefixWIthSpaceCharacters

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ sentenceFinder  selectFromStack: stack sentencesPrefixedWith: 'prefix with spaces' ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixWithSpaceCharacterErrorDescription ]
		
!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:34:50'!
test02CanNotUseEmptyPrefix

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ sentenceFinder  selectFromStack: stack sentencesPrefixedWith: '' ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixWithSpaceCharacterErrorDescription ]
		
! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:35:02' prior: 50632397!
test02CanNotUseEmptyPrefix

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ sentenceFinder  selectFromStack: stack sentencesPrefixedWith: '' ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription ]
		
! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 16:35:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 16:35:06'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:45:32'!
test03CanNotUsePrefixWithSpaceCharacters

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ sentenceFinder  selectFromStack: stack sentencesPrefixedWith: 'prefix with spaces' ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixWithSpaceCharacterErrorDescription.
			self assert: stack isEmpty ]
		
! !

!methodRemoval: SentenceFinderByPrefixTest #test03CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 16:45:56'!
test03CanNotUsePrefixWithSpaceCharacters

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ sentenceFinder  selectFromStack: stack sentencesPrefixedWith: 'prefix with spaces' ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixWithSpaceCharacterErrorDescription.
			self assert: stack isEmpty ]
		
!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:46:01' prior: 50632365!
test01CanNotUsePrefixWithSpaceCharacters

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ sentenceFinder  selectFromStack: stack sentencesPrefixedWith: 'prefix with spaces' ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixWithSpaceCharacterErrorDescription.
			self assert: stack isEmpty ]
		
! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 16:46:05' prior: 50632412!
test02CanNotUseEmptyPrefix

	| stack sentenceFinder |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	self
		should: [ sentenceFinder  selectFromStack: stack sentencesPrefixedWith: '' ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = SentenceFinderByPrefix prefixEmptyErrorDescription.
			self assert: stack isEmpty ]
		
! !

stack := OOStack new.!

stack2 := stack.!

stack push: 1.!

stack2 size.!
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 16:56:14'!
cloneOOStack: anOOStack

	| stackClone |

	stackClone

	^''! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 16:59:20' prior: 50632502!
cloneOOStack: anOOStack

	| stackClone |

	stackClone := OOStack new.

	self  copyElementsFrom: anOOStack
		to: stackClone.


	^stackClone! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 17:03:04'!
copyElementsFrom: sourceOOStack to: destinationOOStack
	
	| value |
	
	(sourceOOStack isEmpty ) ifFalse: [
		
		value := sourceOOStack pop.
		
		destinationOOStack push: value.
		
		self copyElementsFrom: sourceOOStack to: destinationOOStack.
		
		sourceOOStack push: value.
		
		
	]! !

----SNAPSHOT----(22 April 2023 17:03:12) CuisUniversity-5706.image priorSource: 9612821!

stack push: 2.!

stack push: 3.!

sentenceFinder := SentenceFinderByPrefixTest new!

stack3 := sentenceFinder cloneOOStack: stack.!

stack3 size.!

stack3 top.!

stack3 pop.!

stack3 pop.!

stack3 pop.!

stack3 pop.!
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 17:07:18' prior: 50632516!
copyElementsFrom: sourceOOStack to: destinationOOStack
	
	| value |
	
	(sourceOOStack isEmpty ) ifFalse: [
		
		value := sourceOOStack pop.
		
		self copyElementsFrom: sourceOOStack to: destinationOOStack.
		
		destinationOOStack push: value.
		sourceOOStack push: value.
		
		
	]! !

stack3 := sentenceFinder cloneOOStack: stack.!

stack3 size.!

stack3 top.!

stack3 pop.!

stack3 pop.!

stack3 pop.!

stack3 pop.!
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 17:08:10' prior: 50632538!
copyElementsFrom: sourceOOStack to: destinationOOStack
	
	| value |
	
	(sourceOOStack isEmpty ) ifFalse: [
		
		value := sourceOOStack pop.
		
		self copyElementsFrom: sourceOOStack to: destinationOOStack.
		
		destinationOOStack push: value.
		sourceOOStack push: value.
		
	]! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:28:29'!
test03EmptyStackShouldReturnEmptyCollection

	| stack sentenceFinder returnedCollection |
	
	stack := OOStack new.
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	returnedCollection := sentenceFinder selectFromStack: stack sentencesPrefixedWith: 'abc'.
	
	self assert: returnedCollection isEmpty.! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 17:28:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 17:28:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:28:33'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:28:33'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 17:29:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 17:29:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:29:30'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:29:30'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'select' stamp: 'WAL 4/22/2023 17:30:18' prior: 50631941!
selectFromStack: anOOStack sentencesPrefixedWith: aPrefix

	| returnedCollection |

	self checkNotEmptyPrefix: aPrefix.
	self checkNoBlankSpaces: aPrefix.
	
	returnedCollection := OrderedCollection new.
	
	self  addTo: returnedCollection
		sentencesPrefixedWith: aPrefix 
		fromOOStack: anOOStack .

	^returnedCollection! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 17:30:24'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 17:30:24'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:30:24'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:30:24'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'WAL 4/22/2023 17:32:04' prior: 50632134!
addTo: collectionToReturn sentencesPrefixedWith: aPrefix fromOOStack: anOOStack


	
	(anOOStack isEmpty) whileFalse: [
		
		| sentence |
		
		sentence := anOOStack pop.
		
		self ifSentence: sentence
		       beginsWith: aPrefix
		       thenAddTo: collectionToReturn.
	
		self addTo: collectionToReturn
		       sentencesPrefixedWith: aPrefix
		       fromOOStack: anOOStack.
	
		anOOStack push: sentence
	]! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 17:32:10'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 17:32:10'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:32:10'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:32:10'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'WAL 4/22/2023 17:33:01' prior: 50632639!
addTo: collectionToReturn sentencesPrefixedWith: aPrefix fromOOStack: anOOStack


	
	(anOOStack isEmpty) ifFalse: [
		
		| sentence |
		
		sentence := anOOStack pop.
		
		self ifSentence: sentence
		       beginsWith: aPrefix
		       thenAddTo: collectionToReturn.
	
		self addTo: collectionToReturn
		       sentencesPrefixedWith: aPrefix
		       fromOOStack: anOOStack.
	
		anOOStack push: sentence
	]! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 17:33:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 17:33:05'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:33:05'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:36:06'!
test04IfNotFoundReturnedCollectionShouldBeEmpty

	| stack sentenceFinder returnedCollection |
	
	stack := OOStack new.
	
	stack push: 'Iceberg'.
	
	stack push: 'Ice breaker'.	
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	returnedCollection := sentenceFinder selectFromStack: stack sentencesPrefixedWith: 'Fire'.
	
	self assert: returnedCollection isEmpty.! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 17:36:09'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 17:36:09'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:36:09'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 17:36:09'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:36:30' prior: 50632697!
test04IfNotFoundReturnedCollectionShouldBeEmpty

	| stack sentenceFinder returnedCollection |
	
	stack := OOStack new.
	
	stack push: 'Iceberg'.
	stack push: 'Ice breaker'.	
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	returnedCollection := sentenceFinder selectFromStack: stack sentencesPrefixedWith: 'Fire'.
	
	self assert: returnedCollection isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:37:50' prior: 50632727!
test04IfNotFoundReturnedCollectionShouldBeEmpty

	| stack sentenceFinder returnedCollection |
	
	stack := OOStack new.
	
	stack push: 'Iceberg'.
	stack push: 'Ice breaker'.	
	stack push: 'Stormy winter'.	
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	returnedCollection := sentenceFinder selectFromStack: stack sentencesPrefixedWith: 'Fire'.
	
	self assert: returnedCollection isEmpty.! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:39:26'!
test05IfMoreThanOneFoundReturnAllFound

	| stack sentenceFinder returnedCollection |
	
	stack := OOStack new.
	
	stack push: 'Iceberg'.
	stack push: 'Ice breaker'.	
	stack push: 'Stormy winter'.	
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	returnedCollection := sentenceFinder selectFromStack: stack sentencesPrefixedWith: 'Ice'.
	
	self assert: returnedCollection = {'Iceberg', 'Ice breaker'}.! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 17:39:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 17:39:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:39:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 17:39:29'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 17:39:29'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test05IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 17:39:29'!
FAILURE!

{'Iceberg', 'Ice breaker'}!
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 17:42:06'!
testFinderWithPrefix: aPrefix onStackWith: aCollectionOfSentencesToStack shouldReturn:  anExpectedCollectionOfSentences

	| stack finder finderResult expectedResult |
	
	stack := OOStack new.
	aCollectionOfSentencesToStack do: [:aSentence | stack push: aSentence].
	
	expectedResult := OrderedCollection new.
	anExpectedCollectionOfSentences do: [:aSentence | expectedResult  add: aSentence].	
	
	finder := SentenceFinderByPrefix new.
	finderResult := finder selectFromStack: stack sentencesPrefixedWith: aPrefix.
		
	self assert: finderResult equals: expectedResult. ! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 17:42:32' prior: 50632797!
testFinderWithPrefix: aPrefix onStackWith: anArrayOfSentencesToStack shouldReturn:  anExpectedCollectionOfSentences

	| stack finder finderResult expectedResult |
	
	stack := OOStack new.
	anArrayOfSentencesToStack do: [:aSentence | stack push: aSentence].
	
	expectedResult := OrderedCollection new.
	anExpectedCollectionOfSentences do: [:aSentence | expectedResult  add: aSentence].	
	
	finder := SentenceFinderByPrefix new.
	finderResult := finder selectFromStack: stack sentencesPrefixedWith: aPrefix.
		
	self assert: finderResult equals: expectedResult. ! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 17:42:41' prior: 50632819!
testFinderWithPrefix: aPrefix onStackWith: anArrayOfSentencesToStack shouldReturn:  anExpectedArrayOfSentences

	| stack finder finderResult expectedResult |
	
	stack := OOStack new.
	anArrayOfSentencesToStack do: [:aSentence | stack push: aSentence].
	
	expectedResult := OrderedCollection new.
	anExpectedArrayOfSentences do: [:aSentence | expectedResult  add: aSentence].	
	
	finder := SentenceFinderByPrefix new.
	finderResult := finder selectFromStack: stack sentencesPrefixedWith: aPrefix.
		
	self assert: finderResult equals: expectedResult. ! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:44:29' prior: 50632757!
test05IfMoreThanOneFoundReturnAllFound

	"| stack sentenceFinder returnedCollection |
	
	stack := OOStack new.
	
	stack push: 'Iceberg'.
	stack push: 'Ice breaker'.	
	stack push: 'Stormy winter'.	
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	returnedCollection := sentenceFinder selectFromStack: stack sentencesPrefixedWith: 'Ice'.
	
	self assert: returnedCollection = {'Iceberg', 'Ice breaker'}."
	
	
	self testFinderWithPrefix: 'Ice' onStackWith: {'Iceberg', 'Ice breaker', 'Stormy winter'} shouldReturn:  {'Iceberg', 'Ice breaker'}! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 17:44:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 17:44:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:44:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 17:44:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 17:44:34'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test05IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 17:44:34'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:47:01' prior: 50632861!
test05IfMoreThanOneFoundReturnAllFound

	"| stack sentenceFinder returnedCollection |
	
	stack := OOStack new.
	
	stack push: 'Iceberg'.
	stack push: 'Ice breaker'.	
	stack push: 'Stormy winter'.	
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	returnedCollection := sentenceFinder selectFromStack: stack sentencesPrefixedWith: 'Ice'.
	
	self assert: returnedCollection = {'Iceberg', 'Ice breaker'}."
	
	
	self testFinderWithPrefix: 'Ice' onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter') shouldReturn:  #('Iceberg' 'Ice breaker')! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 17:47:03'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 17:47:03'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:47:03'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 17:47:03'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 17:47:03'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test05IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 17:47:03'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'WAL 4/22/2023 17:52:31' prior: 50632670!
addTo: collectionToReturn sentencesPrefixedWith: aPrefix fromOOStack: anOOStack


	
	(anOOStack isEmpty) ifFalse: [
		
		| sentence |
		
		sentence := anOOStack pop.
		
		self addTo: collectionToReturn
		       sentencesPrefixedWith: aPrefix
		       fromOOStack: anOOStack.
		
		self ifSentence: sentence
		       beginsWith: aPrefix
		       thenAddTo: collectionToReturn.
	
		anOOStack push: sentence
	]! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 17:52:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 17:52:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:52:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 17:52:34'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 17:52:34'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:53:13' prior: 50632904!
test05IfMoreThanOneFoundReturnAllFound

	self
		testFinderWithPrefix: 'Ice'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn:  #('Iceberg' 'Ice breaker')! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:53:35' prior: 50632742!
test04IfNotFoundReturnedCollectionShouldBeEmpty

	"| stack sentenceFinder returnedCollection |
	
	stack := OOStack new.
	
	stack push: 'Iceberg'.
	stack push: 'Ice breaker'.	
	stack push: 'Stormy winter'.	
	
	sentenceFinder := SentenceFinderByPrefix new.
	
	returnedCollection := sentenceFinder selectFromStack: stack sentencesPrefixedWith: 'Fire'.
	
	self assert: returnedCollection isEmpty."
	
	self testFinderWithPrefix: 'Fire' onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter') shouldReturn:  #()! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 17:53:38'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 17:53:38'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:53:38'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 17:53:38'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 17:53:38'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:54:04' prior: 50632991!
test04IfNotFoundReturnedCollectionShouldBeEmpty
	
	self
		testFinderWithPrefix: 'Fire'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn:  #()! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:54:37' prior: 50632567!
test03EmptyStackShouldReturnEmptyCollection

	self
		testFinderWithPrefix: 'Fire'
		onStackWith: #()
		shouldReturn:  #()! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 17:54:43'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 17:54:43'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:54:43'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 17:54:43'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 17:54:43'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:55:04' prior: 50632982!
test05IfMoreThanOneFoundReturnAllFound

	self
		testFinderWithPrefix: 'Ice'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn: #('Iceberg' 'Ice breaker')! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:55:08' prior: 50633029!
test04IfNotFoundReturnedCollectionShouldBeEmpty
	
	self
		testFinderWithPrefix: 'Fire'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn: #()! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:55:29'!
test06IfMoreThanOneFoundReturnAllFound

	self
		testFinderWithPrefix: 'Ice'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn: #('Iceberg' 'Ice breaker')! !

!methodRemoval: SentenceFinderByPrefixTest #test05IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 17:55:29'!
test05IfMoreThanOneFoundReturnAllFound

	self
		testFinderWithPrefix: 'Ice'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn: #('Iceberg' 'Ice breaker')!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:56:27'!
test05IfOneFoundReturnOneFound

	self
		testFinderWithPrefix: 'Storm'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn: #('Iceberg' 'Ice breaker')! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 17:56:45' prior: 50633099!
test05IfOneFoundReturnOneFound

	self
		testFinderWithPrefix: 'Storm'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn: #('Stormy winter')! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 17:56:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 17:56:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 17:56:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 17:56:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05IfOneFoundReturnOneFound stamp: 'WAL 4/22/2023 17:56:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 17:56:47'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 17:59:33' prior: 50632840!
testFinderWithPrefix: aPrefix onStackWith: anArrayOfSentencesToStack shouldReturn:  anExpectedArrayOfSentences

	| stack stackClone finder finderResult expectedResult |
	
	stack := OOStack new.
	anArrayOfSentencesToStack do: [:aSentence | stack push: aSentence].
	
	stackClone := self cloneOOStack: stack.
	
	expectedResult := OrderedCollection new.
	anExpectedArrayOfSentences do: [:aSentence | expectedResult  add: aSentence].	
	
	finder := SentenceFinderByPrefix new.
	finderResult := finder selectFromStack: stack sentencesPrefixedWith: aPrefix.
		
	self assert: finderResult equals: expectedResult.
	! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 18:04:52'!
thisStack: anOOStack isEqualToStack: anotherOOStack

	(anOOStack size = anotherOOStack size ) ifFalse: [^false].
	
	^self
		compareElementsFrom: anOOStack
		withElementsFrom: anotherOOStack.! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 18:14:02'!
compareElementsFrom: anOOStack withElementsFrom: anotherOOStack
	
	| value1 value2 |
	
	(anOOStack isEmpty ) ifFalse: [
		
		value1 := anOOStack pop.
		value2 := anotherOOStack pop.
		
		(value1 = value2) ifTrue: [ 
		
			^ self compareElementsFrom: anOOStack withElementsFrom: anotherOOStack.
		
		].
	
		anOOStack push: value1.
		anotherOOStack push: value1.
		
	]! !

!methodRemoval: SentenceFinderByPrefixTest #compareElementsFrom:withElementsFrom: stamp: 'WAL 4/22/2023 18:14:31'!
compareElementsFrom: anOOStack withElementsFrom: anotherOOStack
	
	| value1 value2 |
	
	(anOOStack isEmpty ) ifFalse: [
		
		value1 := anOOStack pop.
		value2 := anotherOOStack pop.
		
		(value1 = value2) ifTrue: [ 
		
			^ self compareElementsFrom: anOOStack withElementsFrom: anotherOOStack.
		
		].
	
		anOOStack push: value1.
		anotherOOStack push: value1.
		
	]!
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 18:16:53'!
convertStackToOrderedCollection: anOOStack

	| returnedCollection |
	
	returnedCollection := OrderedCollection new.
	
	self  addToCollection: returnedCollection
		fromOOStack: anOOStack .

	^returnedCollection! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 18:20:06'!
addToCollection: returnedCollection fromOOStack: anOOStack

	| value |

	(anOOStack isEmpty) ifFalse: [
		value := anOOStack pop.
		
		self addToCollection: returnedCollection fromOOStack: anOOStack.
		
		returnedCollection add: value.
		
		anOOStack push: value.
		
	]! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 18:24:05' prior: 50633139!
testFinderWithPrefix: aPrefix onStackWith: anArrayOfSentencesToStack shouldReturn:  anExpectedArrayOfSentences

	| stack originalSentences finder finderResult expectedResult |
	
	stack := OOStack new.
	anArrayOfSentencesToStack do: [:aSentence | stack push: aSentence].
	
	originalSentences := self convertStackToOrderedCollection: stack.
	
	"stackClone := self cloneOOStack: stack."
	
	expectedResult := OrderedCollection new.
	anExpectedArrayOfSentences do: [:aSentence | expectedResult  add: aSentence].	
	
	finder := SentenceFinderByPrefix new.
	finderResult := finder selectFromStack: stack sentencesPrefixedWith: aPrefix.
		
	self assert: finderResult equals: expectedResult.
	self assert: originalSentences equals: (self convertStackToOrderedCollection: stack).
	! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 18:24:08'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 18:24:08'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 18:24:08'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 18:24:08'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05IfOneFoundReturnOneFound stamp: 'WAL 4/22/2023 18:24:08'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 18:24:08'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 18:25:29' prior: 50633222!
testFinderWithPrefix: aPrefix onStackWith: anArrayOfSentencesToStack shouldReturn:  anExpectedArrayOfSentences

	| stack originalSentences finder finderResult expectedResult |
	
	stack := OOStack new.
	anArrayOfSentencesToStack do: [:aSentence | stack push: aSentence].
	
	originalSentences := self convertStackToOrderedCollection: stack.
	
	expectedResult := OrderedCollection new.
	anExpectedArrayOfSentences do: [:aSentence | expectedResult  add: aSentence].	
	
	finder := SentenceFinderByPrefix new.
	finderResult := finder selectFromStack: stack sentencesPrefixedWith: aPrefix.
		
	self assert: finderResult equals: expectedResult.
	self assert: originalSentences equals: (self convertStackToOrderedCollection: stack).
	! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 18:27:07' prior: 50633272!
testFinderWithPrefix: aPrefix onStackWith: anArrayOfSentencesToStack shouldReturn:  anExpectedArrayOfSentences

	| stack originalSentences finder finderResult expectedResult |
	
	stack:= self createStackFromArrayOfSentences: anArrayOfSentencesToStack.
	
	stack := OOStack new.
	anArrayOfSentencesToStack do: [:aSentence | stack push: aSentence].
	
	originalSentences := self convertStackToOrderedCollection: stack.
	
	expectedResult := OrderedCollection new.
	anExpectedArrayOfSentences do: [:aSentence | expectedResult  add: aSentence].	
	
	finder := SentenceFinderByPrefix new.
	finderResult := finder selectFromStack: stack sentencesPrefixedWith: aPrefix.
		
	self assert: finderResult equals: expectedResult.
	self assert: originalSentences equals: (self convertStackToOrderedCollection: stack).
	! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 18:27:38'!
createStackFromArrayOfSentences: anArrayOfSentencesToStack
	
	| stack |
	
	stack := OOStack new.
	anArrayOfSentencesToStack do: [:aSentence | stack push: aSentence].
	
	^stack
	! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 18:27:49' prior: 50633299!
testFinderWithPrefix: aPrefix onStackWith: anArrayOfSentencesToStack shouldReturn:  anExpectedArrayOfSentences

	| stack originalSentences finder finderResult expectedResult |
	
	stack:= self createStackFromArrayOfSentences: anArrayOfSentencesToStack.
	
	originalSentences := self convertStackToOrderedCollection: stack.
	
	expectedResult := OrderedCollection new.
	anExpectedArrayOfSentences do: [:aSentence | expectedResult  add: aSentence].	
	
	finder := SentenceFinderByPrefix new.
	finderResult := finder selectFromStack: stack sentencesPrefixedWith: aPrefix.
		
	self assert: finderResult equals: expectedResult.
	self assert: originalSentences equals: (self convertStackToOrderedCollection: stack).
	! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 18:27:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 18:27:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 18:27:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 18:27:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05IfOneFoundReturnOneFound stamp: 'WAL 4/22/2023 18:27:52'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 18:27:52'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 18:29:18' prior: 50633336!
testFinderWithPrefix: aPrefix onStackWith: anArrayOfSentencesToStack shouldReturn:  anExpectedArrayOfSentences

	| stack originalSentences finder finderResult expectedResult |
	
	stack:= self createStackFromArrayOfSentences: anArrayOfSentencesToStack.
	
	originalSentences := self convertStackToOrderedCollection: stack.
	
	expectedResult := self createOrderedCollectionFromArrayOfSentences: anExpectedArrayOfSentences.
	
	expectedResult := OrderedCollection new.
	anExpectedArrayOfSentences do: [:aSentence | expectedResult  add: aSentence].	
	
	finder := SentenceFinderByPrefix new.
	finderResult := finder selectFromStack: stack sentencesPrefixedWith: aPrefix.
		
	self assert: finderResult equals: expectedResult.
	self assert: originalSentences equals: (self convertStackToOrderedCollection: stack).
	! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 18:30:03'!
createOrderedCollectionFromArrayOfSentences: anExpectedArrayOfSentences
	
	| orderedCollection |
	
	orderedCollection := OrderedCollection new.
	anExpectedArrayOfSentences do: [:aSentence | orderedCollection  add: aSentence].	
	
	^orderedCollection! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 18:30:14' prior: 50633384!
testFinderWithPrefix: aPrefix onStackWith: anArrayOfSentencesToStack shouldReturn:  anExpectedArrayOfSentences

	| stack originalSentences finder finderResult expectedResult |
	
	stack:= self createStackFromArrayOfSentences: anArrayOfSentencesToStack.
	
	originalSentences := self convertStackToOrderedCollection: stack.
	
	expectedResult := self createOrderedCollectionFromArrayOfSentences: anExpectedArrayOfSentences.
	
	finder := SentenceFinderByPrefix new.
	finderResult := finder selectFromStack: stack sentencesPrefixedWith: aPrefix.
		
	self assert: finderResult equals: expectedResult.
	self assert: originalSentences equals: (self convertStackToOrderedCollection: stack).
	! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 18:41:25' prior: 50633425!
testFinderWithPrefix: aPrefix onStackWith: anArrayOfSentencesToStack shouldReturn:  anExpectedArrayOfSentences

	| stack originalSentences finder finderResult expectedResult |
	
	stack:= self createStackFromArrayOfSentences: anArrayOfSentencesToStack.
	
	originalSentences := self convertStackToOrderedCollection: stack.
	
	expectedResult := self createOrderedCollectionFromArrayOfSentences: anExpectedArrayOfSentences.
	
	"finderResult := self createAndExecuteFinderOnStack: stack prefixToFind: aPrefix."
	
	finder := SentenceFinderByPrefix new.
	finderResult := finder selectFromStack: stack sentencesPrefixedWith: aPrefix.
		
	self assert: finderResult equals: expectedResult.
	self assert: originalSentences equals: (self convertStackToOrderedCollection: stack).
	! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 18:45:00' prior: 50633081!
test06IfMoreThanOneFoundReturnAllFound

	self
		testFinderWithPrefix: 'Ice'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn: (OrderedCollection newFrom: #('Iceberg' 'Ice breaker'))! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 18:45:12' prior: 50633108!
test05IfOneFoundReturnOneFound

	self
		testFinderWithPrefix: 'Storm'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn: (OrderedCollection newFrom: #('Stormy winter'))! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 18:45:18' prior: 50633073!
test04IfNotFoundReturnedCollectionShouldBeEmpty
	
	self
		testFinderWithPrefix: 'Fire'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn: (OrderedCollection newFrom: #() )! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 18:45:20' prior: 50633488!
test05IfOneFoundReturnOneFound

	self
		testFinderWithPrefix: 'Storm'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn: (OrderedCollection newFrom: #('Stormy winter') )! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 18:45:23' prior: 50633478!
test06IfMoreThanOneFoundReturnAllFound

	self
		testFinderWithPrefix: 'Ice'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn: (OrderedCollection newFrom: #('Iceberg' 'Ice breaker') )! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 18:45:29' prior: 50633518!
test06IfMoreThanOneFoundReturnAllFound

	self
		testFinderWithPrefix: 'Ice'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn: ( OrderedCollection newFrom: #('Iceberg' 'Ice breaker') )! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 18:45:31' prior: 50633508!
test05IfOneFoundReturnOneFound

	self
		testFinderWithPrefix: 'Storm'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn: ( OrderedCollection newFrom: #('Stormy winter') )! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 18:45:34' prior: 50633498!
test04IfNotFoundReturnedCollectionShouldBeEmpty
	
	self
		testFinderWithPrefix: 'Fire'
		onStackWith: #('Iceberg' 'Ice breaker' 'Stormy winter')
		shouldReturn: ( OrderedCollection newFrom: #() )! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'WAL 4/22/2023 18:45:42' prior: 50633038!
test03EmptyStackShouldReturnEmptyCollection

	self
		testFinderWithPrefix: 'Fire'
		onStackWith: #()
		shouldReturn: (OrderedCollection newFrom: #() )! !
!SentenceFinderByPrefixTest methodsFor: 'test auxiliary' stamp: 'WAL 4/22/2023 18:50:45' prior: 50633450!
testFinderWithPrefix: aPrefix onStackWith: anArrayOfSentencesToStack shouldReturn:  anExpectedResult

	| stack originalSentences finder finderResult |
	
	stack:= self createStackFromArrayOfSentences: anArrayOfSentencesToStack.
	
	originalSentences := self convertStackToOrderedCollection: stack.
	
	finder := SentenceFinderByPrefix new.
	finderResult := finder selectFromStack: stack sentencesPrefixedWith: aPrefix.
		
	self assert: finderResult equals: anExpectedResult.
	self assert: originalSentences equals: (self convertStackToOrderedCollection: stack).
	! !

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 18:50:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 18:50:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 18:50:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 18:50:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05IfOneFoundReturnOneFound stamp: 'WAL 4/22/2023 18:50:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 18:50:48'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'validations' stamp: 'WAL 4/22/2023 18:59:34'!
validateNoBlankSpaces: aPrefix

	( aPrefix includes: Character space ) ifTrue: [ self error: SentenceFinderByPrefix prefixWithSpaceCharacterErrorDescription ].
	
	! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 18:59:34' prior: 50632610!
selectFromStack: anOOStack sentencesPrefixedWith: aPrefix

	| returnedCollection |

	self checkNotEmptyPrefix: aPrefix.
	self validateNoBlankSpaces: aPrefix.
	
	returnedCollection := OrderedCollection new.
	
	self  addTo: returnedCollection
		sentencesPrefixedWith: aPrefix 
		fromOOStack: anOOStack .

	^returnedCollection! !

!methodRemoval: SentenceFinderByPrefix #checkNoBlankSpaces: stamp: 'WAL 4/22/2023 18:59:34'!
checkNoBlankSpaces: aPrefix

	( aPrefix includes: Character space ) ifTrue: [ self error: SentenceFinderByPrefix prefixWithSpaceCharacterErrorDescription ].
	
	!
!SentenceFinderByPrefix methodsFor: 'validations' stamp: 'WAL 4/22/2023 18:59:46'!
validateNotEmptyPrefix: aString

	aString isEmpty ifTrue: [ self error: SentenceFinderByPrefix prefixEmptyErrorDescription ]! !
!SentenceFinderByPrefix methodsFor: 'as yet unclassified' stamp: 'WAL 4/22/2023 18:59:46' prior: 50633619!
selectFromStack: anOOStack sentencesPrefixedWith: aPrefix

	| returnedCollection |

	self validateNotEmptyPrefix: aPrefix.
	self validateNoBlankSpaces: aPrefix.
	
	returnedCollection := OrderedCollection new.
	
	self  addTo: returnedCollection
		sentencesPrefixedWith: aPrefix 
		fromOOStack: anOOStack .

	^returnedCollection! !

!methodRemoval: SentenceFinderByPrefix #checkNotEmptyPrefix: stamp: 'WAL 4/22/2023 18:59:46'!
checkNotEmptyPrefix: aString

	aString isEmpty ifTrue: [ self error: SentenceFinderByPrefix prefixEmptyErrorDescription ]!

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 18:59:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 18:59:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 18:59:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 18:59:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05IfOneFoundReturnOneFound stamp: 'WAL 4/22/2023 18:59:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 18:59:48'!
PASSED!

!methodRemoval: SentenceFinderByPrefixTest #cloneOOStack: stamp: 'WAL 4/22/2023 19:00:42'!
cloneOOStack: anOOStack

	| stackClone |

	stackClone := OOStack new.

	self  copyElementsFrom: anOOStack
		to: stackClone.


	^stackClone!

!methodRemoval: SentenceFinderByPrefixTest #copyElementsFrom:to: stamp: 'WAL 4/22/2023 19:01:35'!
copyElementsFrom: sourceOOStack to: destinationOOStack
	
	| value |
	
	(sourceOOStack isEmpty ) ifFalse: [
		
		value := sourceOOStack pop.
		
		self copyElementsFrom: sourceOOStack to: destinationOOStack.
		
		destinationOOStack push: value.
		sourceOOStack push: value.
		
	]!

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 19:01:42'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 19:01:42'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 19:01:42'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 19:01:42'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05IfOneFoundReturnOneFound stamp: 'WAL 4/22/2023 19:01:42'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 19:01:42'!
PASSED!

!methodRemoval: SentenceFinderByPrefixTest #createOrderedCollectionFromArrayOfSentences: stamp: 'WAL 4/22/2023 19:02:17'!
createOrderedCollectionFromArrayOfSentences: anExpectedArrayOfSentences
	
	| orderedCollection |
	
	orderedCollection := OrderedCollection new.
	anExpectedArrayOfSentences do: [:aSentence | orderedCollection  add: aSentence].	
	
	^orderedCollection!

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 19:02:22'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 19:02:22'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 19:02:22'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 19:02:22'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05IfOneFoundReturnOneFound stamp: 'WAL 4/22/2023 19:02:22'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 19:02:22'!
PASSED!

!methodRemoval: SentenceFinderByPrefixTest #thisStack:isEqualToStack: stamp: 'WAL 4/22/2023 19:03:03'!
thisStack: anOOStack isEqualToStack: anotherOOStack

	(anOOStack size = anotherOOStack size ) ifFalse: [^false].
	
	^self
		compareElementsFrom: anOOStack
		withElementsFrom: anotherOOStack.!

!testRun: #SentenceFinderByPrefixTest #test01CanNotUsePrefixWithSpaceCharacters stamp: 'WAL 4/22/2023 19:03:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02CanNotUseEmptyPrefix stamp: 'WAL 4/22/2023 19:03:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03EmptyStackShouldReturnEmptyCollection stamp: 'WAL 4/22/2023 19:03:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04IfNotFoundReturnedCollectionShouldBeEmpty stamp: 'WAL 4/22/2023 19:03:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05IfOneFoundReturnOneFound stamp: 'WAL 4/22/2023 19:03:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06IfMoreThanOneFoundReturnAllFound stamp: 'WAL 4/22/2023 19:03:07'!
PASSED!

----SNAPSHOT----(22 April 2023 19:05:13) CuisUniversity-5706.image priorSource: 9628062!

----SNAPSHOT----(22 April 2023 20:19:34) CuisUniversity-5706.image priorSource: 9668690!

----STARTUP---- (30 April 2023 16:33:51) as /home/a/s/sw/smalltalk1/CuisUniversity-5706.image!


----End fileIn of /home/a/s/sw/smalltalk1/ISW1-2022-2C-1erParcial.st----!

Pirate subclass: #Bucanero
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Bucanero category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 16:36:26'!
Pirate subclass: #Bucanero
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Pirate subclass: #Corsario
	instanceVariableNames: 'rank map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Corsario category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 16:36:31'!
Pirate subclass: #Corsario
	instanceVariableNames: 'rank map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Pirate subclass: #Filibustero
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Filibustero category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 16:36:38'!
Pirate subclass: #Filibustero
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 16:37:12'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 16:37:15'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 16:37:15'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 16:37:15'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 16:37:15'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 16:37:15'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 16:37:15'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 16:37:15'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 16:37:15'!
PASSED!

Object subclass: #Pirate
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Pirate subclass: #Filibustero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Filibustero category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 16:38:49'!
Pirate subclass: #Filibustero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Pirate subclass: #Corsario
	instanceVariableNames: 'map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Corsario category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 16:38:53'!
Pirate subclass: #Corsario
	instanceVariableNames: 'map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Pirate subclass: #Bucanero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Bucanero category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 16:38:55'!
Pirate subclass: #Bucanero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Object subclass: #Pirate
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Pirate category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 16:38:59'!
Object subclass: #Pirate
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 16:39:12'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 16:39:12'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 16:39:12'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 16:39:12'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 16:39:12'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 16:39:12'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 16:39:12'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 16:39:12'!
PASSED!

1!

1@1!
!Pirate methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 17:10:13'!
aCaptainIWasMeantToBe

	rank := #Captain! !

!methodRemoval: Bucanero #aCaptainIWasMeantToBe stamp: 'WAL 4/30/2023 17:10:13'!
aCaptainIWasMeantToBe

	rank := #Captain!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 17:10:42'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 17:10:42'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 17:10:42'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 17:10:42'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 17:10:42'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 17:10:42'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 17:10:42'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 17:10:42'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 17:10:44'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 17:10:44'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 17:10:44'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 17:10:44'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 17:10:44'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 17:10:44'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 17:10:44'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 17:10:44'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 18:55:40' prior: 50633818!
test01MovingCrewToTreePlaceDoesNotMove

	| island crew crewPosition treePosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	
	map := Map of: island crewStartsAt: crewPosition.

	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
			
			
	crew moveTo: treePosition.
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 18:56:14' prior: 50633863!
test03MovingCrewToFreePlace

	| island crew treePosition crewPosition nextPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	
	map := Map of: island crewStartsAt: crewPosition.

	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: (island isEmptyAt: nextPosition).
	
	crew moveTo: nextPosition.

	self deny: (island hasCrewAt: crewPosition).
	self assert: (island hasCrewAt: nextPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 18:56:46' prior: 50633839!
test02MovingCrewToTreePlaceFilibusteroRemovesTree

	| island crew treePosition crewPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	self deny: (island isEmptyAt: treePosition).
				
	crew moveTo: treePosition.

	self assert: (island isEmptyAt: treePosition).
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 18:56:54' prior: 50634609!
test01MovingCrewToTreePlaceDoesNotMove

	| island crew crewPosition treePosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
			
			
	crew moveTo: treePosition.
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 18:57:05' prior: 50634631!
test03MovingCrewToFreePlace

	| island crew treePosition crewPosition nextPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: (island isEmptyAt: nextPosition).
	
	crew moveTo: nextPosition.

	self deny: (island hasCrewAt: crewPosition).
	self assert: (island hasCrewAt: nextPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 18:57:13' prior: 50633886!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap

	| island crew treePosition crewPosition nextPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	nextPosition := 2@1.
	self assert: map isEmpty.

	crew moveTo: nextPosition.

	self assert: map stepsSize equals: 1. 
	self assert: map lastPosition equals: nextPosition.
! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 18:57:23' prior: 50633909!
test05CrewCannotBuryTreasureIfBucaneroCannotDig

	| island crew treePosition crewPosition map digPosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	
	self 
		should: [ crew buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: map hasTreasureMark ]
			
	
	
	
! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 18:57:39' prior: 50633936!
test06CrewCanBuryTreasureIfBucaneroCanDig

	| island crew treePosition crewPosition map digPosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.
	
	self assert: map hasTreasureMark.
	
			
	
	
	
! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 18:58:15' prior: 50634680!
test01MovingCrewToTreePlaceDoesNotMove

	| island crew treePosition crewPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
			
			
	crew moveTo: treePosition.
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:02:03' prior: 50634726!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap

	| island crew treePosition crewPosition nextPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: map isEmpty.

	crew moveTo: nextPosition.

	self assert: map stepsSize equals: 1. 
	self assert: map lastPosition equals: nextPosition.
! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:02:51' prior: 50634750!
test05CrewCannotBuryTreasureIfBucaneroCannotDig

	| island crew treePosition crewPosition map digPosition nextPosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	crew moveTo: nextPosition.
	
	self 
		should: [ crew buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: map hasTreasureMark ]
			
	
	
	
! !
!CrewTest methodsFor: 'setUp' stamp: 'WAL 4/30/2023 19:05:08' overrides: 16961394!
setUp
! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:07:54' prior: 50633958!
test07CaptainCanUseMap

	| island crew treePosition crewPosition map digPosition pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	pirate aCaptainIWasMeantToBe.
	
	self assert: (pirate searchTreasureIn: island with: map)! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:08:04' prior: 50633981!
test08SimplePirateCannotUseMap

	| island crew treePosition crewPosition map digPosition pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	
	self 
		should: [ pirate searchTreasureIn: island with: map ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'I am a simple pirate!!'
! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:15:20' prior: 50634799!
test01MovingCrewToTreePlaceDoesNotMove

	| crew treePosition crewPosition map island |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
			
			
	crew moveTo: treePosition.
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:15:43' prior: 50634927!
test01MovingCrewToTreePlaceDoesNotMove

	| island crew treePosition crewPosition map  |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
			
			
	crew moveTo: treePosition.
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !

TestCase subclass: #CrewTest
	instanceVariableNames: 'island'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

TestCase subclass: #CrewTest
	instanceVariableNames: 'island1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 19:16:23'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'island1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:17:00' prior: 50634949!
test01MovingCrewToTreePlaceDoesNotMove

	| crew treePosition crewPosition map  |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island1 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island1 crewStartsAt: crewPosition.
	crew := Crew 
			at: island1 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
			
			
	crew moveTo: treePosition.
	
	self deny: (island1 hasCrewAt: treePosition).
	self assert: (island1 hasCrewAt: crewPosition).! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:17:03'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:17:03'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:17:03'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:17:03'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:17:03'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:17:03'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:17:03'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:17:03'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:17:03'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:17:28' prior: 50634655!
test02MovingCrewToTreePlaceFilibusteroRemovesTree

	| crew treePosition crewPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island1 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island1 crewStartsAt: crewPosition.
	crew := Crew 
			at: island1 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	self deny: (island1 isEmptyAt: treePosition).
				
	crew moveTo: treePosition.

	self assert: (island1 isEmptyAt: treePosition).
	
	self deny: (island1 hasCrewAt: treePosition).
	self assert: (island1 hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:18:07' prior: 50634702!
test03MovingCrewToFreePlace

	| island2 crew treePosition crewPosition nextPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island2 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island2 crewStartsAt: crewPosition.
	crew := Crew 
			at: island2 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: (island2 isEmptyAt: nextPosition).
	
	crew moveTo: nextPosition.

	self deny: (island2 hasCrewAt: crewPosition).
	self assert: (island2 hasCrewAt: nextPosition).! !

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:18:37'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:18:37'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:18:37'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:18:37'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:18:37'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:18:37'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:18:37'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:18:37'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:18:37'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:18:56' prior: 50635064!
test03MovingCrewToFreePlace

	| crew treePosition crewPosition nextPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island1 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island1 crewStartsAt: crewPosition.
	crew := Crew 
			at: island1 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: (island1 isEmptyAt: nextPosition).
	
	crew moveTo: nextPosition.

	self deny: (island1 hasCrewAt: crewPosition).
	self assert: (island1 hasCrewAt: nextPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:19:07' prior: 50634821!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap

	| crew treePosition crewPosition nextPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island1 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island1 crewStartsAt: crewPosition.
	crew := Crew 
			at: island1 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: map isEmpty.

	crew moveTo: nextPosition.

	self assert: map stepsSize equals: 1. 
	self assert: map lastPosition equals: nextPosition.
! !

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:19:08'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:19:08'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:19:08'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:19:08'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:19:08'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:19:08'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:19:08'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:19:08'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:19:08'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:19:16' prior: 50634845!
test05CrewCannotBuryTreasureIfBucaneroCannotDig

	| crew treePosition crewPosition map digPosition nextPosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island1 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island1 crewStartsAt: crewPosition.
	crew := Crew 
			at: island1 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	crew moveTo: nextPosition.
	
	self 
		should: [ crew buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: map hasTreasureMark ]
			
	
	
	
! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:19:26' prior: 50634777!
test06CrewCanBuryTreasureIfBucaneroCanDig

	| crew treePosition crewPosition map digPosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island1 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island1 crewStartsAt: crewPosition.
	crew := Crew 
			at: island1 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.
	
	self assert: map hasTreasureMark.
	
			
	
	
	
! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:19:43' prior: 50634877!
test07CaptainCanUseMap

	| crew treePosition crewPosition map digPosition pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island1 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island1 crewStartsAt: crewPosition.
	crew := Crew 
			at: island1
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	pirate aCaptainIWasMeantToBe.
	
	self assert: (pirate searchTreasureIn: island1 with: map)! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:19:54' prior: 50634901!
test08SimplePirateCannotUseMap

	| crew treePosition crewPosition map digPosition pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island1 := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island1 crewStartsAt: crewPosition.
	crew := Crew 
			at: island1 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	
	self 
		should: [ pirate searchTreasureIn: island1 with: map ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'I am a simple pirate!!'
! !

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:19:56'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:19:56'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:19:56'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:19:56'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:19:56'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:19:56'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:19:56'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:19:56'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:19:56'!
PASSED!

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 19:20:48'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'island'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:20:48' prior: 50635243!
test07CaptainCanUseMap

	| crew treePosition crewPosition map digPosition pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	pirate aCaptainIWasMeantToBe.
	
	self assert: (pirate searchTreasureIn: island with: map)! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:20:48' prior: 50634988!
test01MovingCrewToTreePlaceDoesNotMove

	| crew treePosition crewPosition map  |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
			
			
	crew moveTo: treePosition.
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:20:48' prior: 50635221!
test06CrewCanBuryTreasureIfBucaneroCanDig

	| crew treePosition crewPosition map digPosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.
	
	self assert: map hasTreasureMark.
	
			
	
	
	
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:20:48' prior: 50635140!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap

	| crew treePosition crewPosition nextPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: map isEmpty.

	crew moveTo: nextPosition.

	self assert: map stepsSize equals: 1. 
	self assert: map lastPosition equals: nextPosition.
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:20:48' prior: 50635039!
test02MovingCrewToTreePlaceFilibusteroRemovesTree

	| crew treePosition crewPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	self deny: (island isEmptyAt: treePosition).
				
	crew moveTo: treePosition.

	self assert: (island isEmptyAt: treePosition).
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:20:48' prior: 50635266!
test08SimplePirateCannotUseMap

	| crew treePosition crewPosition map digPosition pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	
	self 
		should: [ pirate searchTreasureIn: island with: map ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'I am a simple pirate!!'
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:20:48' prior: 50635116!
test03MovingCrewToFreePlace

	| crew treePosition crewPosition nextPosition map |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: (island isEmptyAt: nextPosition).
	
	crew moveTo: nextPosition.

	self deny: (island hasCrewAt: crewPosition).
	self assert: (island hasCrewAt: nextPosition).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:20:48' prior: 50635193!
test05CrewCannotBuryTreasureIfBucaneroCannotDig

	| crew treePosition crewPosition map digPosition nextPosition |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	crew moveTo: nextPosition.
	
	self 
		should: [ crew buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: map hasTreasureMark ]
			
	
	
	
! !

TestCase subclass: #CrewTest
	instanceVariableNames: 'island crew1 treePosition1 crewPosition1 map1 digPosition1 nextPosition1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 19:27:11'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'island crew1 treePosition1 crewPosition1 map1 digPosition1 nextPosition1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:27:37' prior: 50635352!
test01MovingCrewToTreePlaceDoesNotMove


	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew1 := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.
			
			
			
	crew1 moveTo: treePosition1.
	
	self deny: (island hasCrewAt: treePosition1).
	self assert: (island hasCrewAt: crewPosition1).! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:27:38'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:27:38'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:27:38'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:27:38'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:27:38'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:27:38'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:27:38'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:27:38'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:27:38'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:28:09' prior: 50635420!
test02MovingCrewToTreePlaceFilibusteroRemovesTree


	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew1 := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.

	self deny: (island isEmptyAt: treePosition1).
				
	crew1 moveTo: treePosition1.

	self assert: (island isEmptyAt: treePosition1).
	
	self deny: (island hasCrewAt: treePosition1).
	self assert: (island hasCrewAt: crewPosition1).! !

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:28:12'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:28:12'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:28:12'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:28:12'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:28:12'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:28:12'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:28:12'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:28:12'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:28:12'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:28:38' prior: 50635471!
test03MovingCrewToFreePlace


	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew1 := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.
	nextPosition1 := 2@1.
	self assert: (island isEmptyAt: nextPosition1).
	
	crew1 moveTo: nextPosition1.

	self deny: (island hasCrewAt: crewPosition1).
	self assert: (island hasCrewAt: nextPosition1).! !

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:28:40'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:28:40'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:28:40'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:28:40'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:28:40'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:28:40'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:28:40'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:28:40'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:28:40'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:29:03' prior: 50635396!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap


	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew1 := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.
	nextPosition1 := 2@1.
	self assert: map1 isEmpty.

	crew1 moveTo: nextPosition1.

	self assert: map1 stepsSize equals: 1. 
	self assert: map1 lastPosition equals: nextPosition1.
! !

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:29:04'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:29:04'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:29:04'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:29:04'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:29:04'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:29:04'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:29:04'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:29:04'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:29:04'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:29:31' prior: 50635495!
test05CrewCannotBuryTreasureIfBucaneroCannotDig


	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew1 := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.
	nextPosition1 := 2@1.
	crew1 moveTo: nextPosition1.
	
	self 
		should: [ crew1 buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: map1 hasTreasureMark ]
			
	
	
	
! !

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:29:32'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:29:32'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:29:32'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:29:32'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:29:32'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:29:32'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:29:32'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:29:32'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:29:32'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:29:52' prior: 50635374!
test06CrewCanBuryTreasureIfBucaneroCanDig


	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew1 := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.

	crew1 moveTo: 2@1.
	crew1 buryTreasureAt: 2@2.
	
	self assert: map1 hasTreasureMark.
	
			
	
	
	
! !

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:29:54'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:29:54'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:29:54'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:29:54'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:29:54'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:29:54'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:29:54'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:29:54'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:29:54'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:30:16' prior: 50635328!
test07CaptainCanUseMap

	| pirate |
	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew1 := Crew 
			at: island
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.

	crew1 moveTo: 2@1.
	crew1 buryTreasureAt: 2@2.

	pirate := Bucanero new.
	pirate aCaptainIWasMeantToBe.
	
	self assert: (pirate searchTreasureIn: island with: map1)! !

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:30:18'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:30:18'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:30:18'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:30:18'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:30:18'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:30:18'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:30:18'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:30:18'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:30:18'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:30:49' prior: 50635445!
test08SimplePirateCannotUseMap

	| pirate |
	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew1 := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.

	crew1 moveTo: 2@1.
	crew1 buryTreasureAt: 2@2.

	pirate := Bucanero new.
	
	self 
		should: [ pirate searchTreasureIn: island with: map1 ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'I am a simple pirate!!'
! !

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:30:51'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:30:51'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:30:51'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:30:51'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:30:51'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:30:51'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:30:51'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:30:51'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:30:51'!
PASSED!

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 19:33:46'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'island crew treePosition1 crewPosition1 map1 digPosition1 nextPosition1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:33:46' prior: 50635851!
test07CaptainCanUseMap

	| pirate |
	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	pirate aCaptainIWasMeantToBe.
	
	self assert: (pirate searchTreasureIn: island with: map1)! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:33:46' prior: 50635540!
test01MovingCrewToTreePlaceDoesNotMove


	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.
			
			
			
	crew moveTo: treePosition1.
	
	self deny: (island hasCrewAt: treePosition1).
	self assert: (island hasCrewAt: crewPosition1).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:33:46' prior: 50635802!
test06CrewCanBuryTreasureIfBucaneroCanDig


	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.
	
	self assert: map1 hasTreasureMark.
	
			
	
	
	
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:33:46' prior: 50635694!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap


	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.
	nextPosition1 := 2@1.
	self assert: map1 isEmpty.

	crew moveTo: nextPosition1.

	self assert: map1 stepsSize equals: 1. 
	self assert: map1 lastPosition equals: nextPosition1.
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:33:46' prior: 50635590!
test02MovingCrewToTreePlaceFilibusteroRemovesTree


	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.

	self deny: (island isEmptyAt: treePosition1).
				
	crew moveTo: treePosition1.

	self assert: (island isEmptyAt: treePosition1).
	
	self deny: (island hasCrewAt: treePosition1).
	self assert: (island hasCrewAt: crewPosition1).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:33:46' prior: 50635902!
test08SimplePirateCannotUseMap

	| pirate |
	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	
	self 
		should: [ pirate searchTreasureIn: island with: map1 ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'I am a simple pirate!!'
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:33:46' prior: 50635643!
test03MovingCrewToFreePlace


	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.
	nextPosition1 := 2@1.
	self assert: (island isEmptyAt: nextPosition1).
	
	crew moveTo: nextPosition1.

	self deny: (island hasCrewAt: crewPosition1).
	self assert: (island hasCrewAt: nextPosition1).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:33:46' prior: 50635746!
test05CrewCannotBuryTreasureIfBucaneroCannotDig


	
	crewPosition1 := 1@1.
	treePosition1 := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition1)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.
	nextPosition1 := 2@1.
	crew moveTo: nextPosition1.
	
	self 
		should: [ crew buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: map1 hasTreasureMark ]
			
	
	
	
! !

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 19:34:09'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'island crew treePosition crewPosition1 map1 digPosition1 nextPosition1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:09' prior: 50635965!
test07CaptainCanUseMap

	| pirate |
	
	crewPosition1 := 1@1.
	treePosition := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	pirate aCaptainIWasMeantToBe.
	
	self assert: (pirate searchTreasureIn: island with: map1)! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:09' prior: 50635988!
test01MovingCrewToTreePlaceDoesNotMove


	
	crewPosition1 := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.
			
			
			
	crew moveTo: treePosition.
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition1).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:09' prior: 50636009!
test06CrewCanBuryTreasureIfBucaneroCanDig


	
	crewPosition1 := 1@1.
	treePosition := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.
	
	self assert: map1 hasTreasureMark.
	
			
	
	
	
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:09' prior: 50636030!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap


	
	crewPosition1 := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.
	nextPosition1 := 2@1.
	self assert: map1 isEmpty.

	crew moveTo: nextPosition1.

	self assert: map1 stepsSize equals: 1. 
	self assert: map1 lastPosition equals: nextPosition1.
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:09' prior: 50636053!
test02MovingCrewToTreePlaceFilibusteroRemovesTree


	
	crewPosition1 := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.

	self deny: (island isEmptyAt: treePosition).
				
	crew moveTo: treePosition.

	self assert: (island isEmptyAt: treePosition).
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition1).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:09' prior: 50636077!
test08SimplePirateCannotUseMap

	| pirate |
	
	crewPosition1 := 1@1.
	treePosition := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	
	self 
		should: [ pirate searchTreasureIn: island with: map1 ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'I am a simple pirate!!'
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:09' prior: 50636102!
test03MovingCrewToFreePlace


	
	crewPosition1 := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.
	nextPosition1 := 2@1.
	self assert: (island isEmptyAt: nextPosition1).
	
	crew moveTo: nextPosition1.

	self deny: (island hasCrewAt: crewPosition1).
	self assert: (island hasCrewAt: nextPosition1).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:09' prior: 50636125!
test05CrewCannotBuryTreasureIfBucaneroCannotDig


	
	crewPosition1 := 1@1.
	treePosition := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition1.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition1.
	nextPosition1 := 2@1.
	crew moveTo: nextPosition1.
	
	self 
		should: [ crew buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: map1 hasTreasureMark ]
			
	
	
	
! !

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 19:34:12'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'island crew treePosition crewPosition map1 digPosition1 nextPosition1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:12' prior: 50636162!
test07CaptainCanUseMap

	| pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	pirate aCaptainIWasMeantToBe.
	
	self assert: (pirate searchTreasureIn: island with: map1)! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:12' prior: 50636185!
test01MovingCrewToTreePlaceDoesNotMove


	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
			
			
	crew moveTo: treePosition.
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:12' prior: 50636206!
test06CrewCanBuryTreasureIfBucaneroCanDig


	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.
	
	self assert: map1 hasTreasureMark.
	
			
	
	
	
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:12' prior: 50636227!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap


	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition1 := 2@1.
	self assert: map1 isEmpty.

	crew moveTo: nextPosition1.

	self assert: map1 stepsSize equals: 1. 
	self assert: map1 lastPosition equals: nextPosition1.
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:12' prior: 50636250!
test02MovingCrewToTreePlaceFilibusteroRemovesTree


	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	self deny: (island isEmptyAt: treePosition).
				
	crew moveTo: treePosition.

	self assert: (island isEmptyAt: treePosition).
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:12' prior: 50636274!
test08SimplePirateCannotUseMap

	| pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	
	self 
		should: [ pirate searchTreasureIn: island with: map1 ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'I am a simple pirate!!'
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:12' prior: 50636299!
test03MovingCrewToFreePlace


	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map1 := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition1 := 2@1.
	self assert: (island isEmptyAt: nextPosition1).
	
	crew moveTo: nextPosition1.

	self deny: (island hasCrewAt: crewPosition).
	self assert: (island hasCrewAt: nextPosition1).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:12' prior: 50636322!
test05CrewCannotBuryTreasureIfBucaneroCannotDig


	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition1).
	map1 := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map1) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition1 := 2@1.
	crew moveTo: nextPosition1.
	
	self 
		should: [ crew buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: map1 hasTreasureMark ]
			
	
	
	
! !

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 19:34:16'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'island crew treePosition crewPosition map digPosition1 nextPosition1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:16' prior: 50636359!
test07CaptainCanUseMap

	| pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition1).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	pirate aCaptainIWasMeantToBe.
	
	self assert: (pirate searchTreasureIn: island with: map)! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:16' prior: 50636381!
test01MovingCrewToTreePlaceDoesNotMove


	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
			
			
	crew moveTo: treePosition.
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:16' prior: 50636402!
test06CrewCanBuryTreasureIfBucaneroCanDig


	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition1).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.
	
	self assert: map hasTreasureMark.
	
			
	
	
	
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:16' prior: 50636423!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap


	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition1 := 2@1.
	self assert: map isEmpty.

	crew moveTo: nextPosition1.

	self assert: map stepsSize equals: 1. 
	self assert: map lastPosition equals: nextPosition1.
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:16' prior: 50636446!
test02MovingCrewToTreePlaceFilibusteroRemovesTree


	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	self deny: (island isEmptyAt: treePosition).
				
	crew moveTo: treePosition.

	self assert: (island isEmptyAt: treePosition).
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:16' prior: 50636470!
test08SimplePirateCannotUseMap

	| pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition1).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	
	self 
		should: [ pirate searchTreasureIn: island with: map ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'I am a simple pirate!!'
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:16' prior: 50636495!
test03MovingCrewToFreePlace


	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition1 := 2@1.
	self assert: (island isEmptyAt: nextPosition1).
	
	crew moveTo: nextPosition1.

	self deny: (island hasCrewAt: crewPosition).
	self assert: (island hasCrewAt: nextPosition1).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:16' prior: 50636517!
test05CrewCannotBuryTreasureIfBucaneroCannotDig


	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition1 := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition1).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition1 := 2@1.
	crew moveTo: nextPosition1.
	
	self 
		should: [ crew buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: map hasTreasureMark ]
			
	
	
	
! !

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 19:34:18'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'island crew treePosition crewPosition map digPosition nextPosition1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:18' prior: 50636597!
test06CrewCanBuryTreasureIfBucaneroCanDig


	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.
	
	self assert: map hasTreasureMark.
	
			
	
	
	
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:18' prior: 50636554!
test07CaptainCanUseMap

	| pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	pirate aCaptainIWasMeantToBe.
	
	self assert: (pirate searchTreasureIn: island with: map)! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:18' prior: 50636711!
test05CrewCannotBuryTreasureIfBucaneroCannotDig


	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition1 := 2@1.
	crew moveTo: nextPosition1.
	
	self 
		should: [ crew buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: map hasTreasureMark ]
			
	
	
	
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:18' prior: 50636665!
test08SimplePirateCannotUseMap

	| pirate |
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	
	self 
		should: [ pirate searchTreasureIn: island with: map ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'I am a simple pirate!!'
! !

!classDefinition: #CrewTest category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 19:34:22'!
TestCase subclass: #CrewTest
	instanceVariableNames: 'island crew treePosition crewPosition map digPosition nextPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:22' prior: 50636618!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap


	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: map isEmpty.

	crew moveTo: nextPosition.

	self assert: map stepsSize equals: 1. 
	self assert: map lastPosition equals: nextPosition.
! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:22' prior: 50636689!
test03MovingCrewToFreePlace


	
	crewPosition := 1@1.
	treePosition := 1@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: (island isEmptyAt: nextPosition).
	
	crew moveTo: nextPosition.

	self deny: (island hasCrewAt: crewPosition).
	self assert: (island hasCrewAt: nextPosition).! !
!CrewTest methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 19:34:22' prior: 50636789!
test05CrewCannotBuryTreasureIfBucaneroCannotDig


	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	crew moveTo: nextPosition.
	
	self 
		should: [ crew buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: map hasTreasureMark ]
			
	
	
	
! !

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:34:30'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:34:33'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:34:33'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:34:33'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:34:33'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:34:33'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:34:33'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:34:33'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:34:33'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:34:35'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:34:35'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:34:35'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:34:35'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:34:35'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:34:35'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:34:35'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:34:35'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:35:36' prior: 50636576!
test01MovingCrewToTreePlaceDoesNotMove



	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
			
			
	crew moveTo: treePosition.
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'setUp' stamp: 'WAL 4/30/2023 19:35:43' prior: 50634874 overrides: 16961394!
setUp
	
	crewPosition := 1@1.
	treePosition := 1@2.! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:35:45'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:35:45'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:35:45'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:35:45'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:35:45'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:35:45'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:35:45'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:35:45'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:35:55' prior: 50636641!
test02MovingCrewToTreePlaceFilibusteroRemovesTree



	
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	self deny: (island isEmptyAt: treePosition).
				
	crew moveTo: treePosition.

	self assert: (island isEmptyAt: treePosition).
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:35:57' prior: 50636872!
test03MovingCrewToFreePlace



	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: (island isEmptyAt: nextPosition).
	
	crew moveTo: nextPosition.

	self deny: (island hasCrewAt: crewPosition).
	self assert: (island hasCrewAt: nextPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:36:02' prior: 50636850!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap


	
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: map isEmpty.

	crew moveTo: nextPosition.

	self assert: map stepsSize equals: 1. 
	self assert: map lastPosition equals: nextPosition.
! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:36:08' prior: 50636894!
test05CrewCannotBuryTreasureIfBucaneroCannotDig


	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	crew moveTo: nextPosition.
	
	self 
		should: [ crew buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: map hasTreasureMark ]
			
	
	
	
! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:36:13' prior: 50636747!
test06CrewCanBuryTreasureIfBucaneroCanDig



	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.
	
	self assert: map hasTreasureMark.
	
			
	
	
	
! !

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:36:15'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:36:19'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:36:19'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:36:19'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:36:19'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:36:19'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:36:19'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:36:19'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:36:19'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:36:28' prior: 50637025!
test02MovingCrewToTreePlaceFilibusteroRemovesTree



	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	self deny: (island isEmptyAt: treePosition).
				
	crew moveTo: treePosition.

	self assert: (island isEmptyAt: treePosition).
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:36:40' prior: 50636767!
test07CaptainCanUseMap

	| pirate |
	

	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	pirate aCaptainIWasMeantToBe.
	
	self assert: (pirate searchTreasureIn: island with: map)! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 19:36:45' prior: 50636816!
test08SimplePirateCannotUseMap

	| pirate |
	

	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	
	self 
		should: [ pirate searchTreasureIn: island with: map ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'I am a simple pirate!!'
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 19:36:47'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 19:36:47'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 19:36:47'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 19:36:47'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 19:36:47'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 19:36:47'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 19:36:47'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 19:36:47'!
PASSED!

#Tree!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 20:00:33' prior: 50634160!
moveTo: aPosition

	| acc ix terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.
	ix := 1.
	
	pirates do: [ : pirate | 
	

		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				acc := acc & true 
			].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				acc := acc & false
			].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 20:00:39'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 20:00:39'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 20:00:39'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 20:00:39'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 20:00:39'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 20:00:39'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 20:00:39'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 20:00:39'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 20:06:07' prior: 50637251!
moveTo: aPosition

	| acc ix terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.
	ix := 1.
	
	pirates do: [ : pirate | 

		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				acc := acc & true 
			].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				acc := acc & false
			].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 20:06:20' prior: 50637309!
moveTo: aPosition

	| acc terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.
	
	pirates do: [ : pirate | 

		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				acc := acc & true 
			].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				acc := acc & false
			].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 20:06:22'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 20:06:22'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 20:06:22'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 20:06:22'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 20:06:22'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 20:06:22'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 20:06:22'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 20:06:22'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 20:14:13'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 20:14:13'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 20:14:13'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 20:14:13'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 20:14:13'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 20:14:13'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 20:14:13'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 20:14:13'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 20:15:01' prior: 50637342!
moveTo: aPosition

	| acc terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.
	
	pirates do: [ : pirate | 



		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				acc := acc & true 
			].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				acc := acc & false
			].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 20:15:13' prior: 50637426!
moveTo: aPosition

	| move terrain |
	
	terrain := island terrainAt: aPosition.
	
	move := true.
	
	pirates do: [ : pirate | 



		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ move := move & false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				move := move & true 
			].
			terrain = #Diggable ifTrue: [ move := move & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				move := move & false
			].
			terrain = #Empty ifTrue: [ move := move & true ].
			terrain = #Diggable ifTrue: [ move := move & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ move := move & false ].
			terrain = #Empty ifTrue: [ move := move & true ].
			terrain = #Diggable ifTrue: [ move := move & true ].
		].
		
	].

	"nos movemos si todos pueden moverse"
	move ifTrue: [ island crewAt: aPosition ].
	
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 20:21:04'!
canMovePirate: pirate to: aPosition withTerrain: terrain

		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ ^ false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				^ true 
			].
			terrain = #Diggable ifTrue: [^ true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				^ false
			].
			terrain = #Empty ifTrue: [ ^true ].
			terrain = #Diggable ifTrue: [ ^ true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ ^false ].
			terrain = #Empty ifTrue: [ ^ true ].
			terrain = #Diggable ifTrue: [ ^ true ].
		].! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 20:21:05'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 20:21:05'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 20:21:05'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 20:21:05'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 20:21:05'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 20:21:05'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 20:21:05'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 20:21:05'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 20:23:07' prior: 50637458!
moveTo: aPosition

	| move terrain |
	
	terrain := island terrainAt: aPosition.
	
	move := true.
	
	pirates inject: true into: [ : pirate : moveTest |   moveTest &  self canMovePirate: pirate to: aPosition withTerrain: terrain 	].

	"nos movemos si todos pueden moverse"
	move ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 20:23:09'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 20:23:09'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 20:23:09'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 20:23:09'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 20:23:09'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 20:23:09'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 20:23:09'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 20:23:09'!
ERROR!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 20:23:24' prior: 50637541!
moveTo: aPosition

	| move terrain |
	
	terrain := island terrainAt: aPosition.
	
	move := pirates inject: true into: [ : pirate : moveTest |   moveTest &  self canMovePirate: pirate to: aPosition withTerrain: terrain 	].

	"nos movemos si todos pueden moverse"
	move ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 20:23:25'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 20:23:25'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 20:23:25'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 20:23:25'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 20:23:25'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 20:23:25'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 20:23:25'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 20:23:25'!
ERROR!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 20:25:42' prior: 50637580!
moveTo: aPosition

	| move terrain |
	
	terrain := island terrainAt: aPosition.
	
	pirates inject: true into: [ : pirate |  move := move &  self canMovePirate: pirate to: aPosition withTerrain: terrain 	].

	"nos movemos si todos pueden moverse"
	move ifTrue: [ island crewAt: aPosition ].
	
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 20:29:03' prior: 50637618!
moveTo: aPosition

	| move terrain |
	
	terrain := island terrainAt: aPosition.
	
	move := pirates inject: true into: [ : canMove : pirate | canMove &  self canMovePirate: pirate to: aPosition withTerrain: terrain 	].

	"nos movemos si todos pueden moverse"
	move ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 20:29:05'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 20:29:05'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 20:29:05'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 20:29:05'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 20:29:05'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 20:29:05'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 20:29:05'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 20:29:05'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 20:29:58' prior: 50637631!
moveTo: aPosition

	| move terrain |
	
	terrain := island terrainAt: aPosition.
	
	move := pirates inject: true into: [ : canMove : pirate | canMove & ( self canMovePirate: pirate to: aPosition withTerrain: terrain )	].

	"nos movemos si todos pueden moverse"
	move ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 20:29:59'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 20:29:59'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 20:29:59'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 20:29:59'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 20:29:59'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 20:29:59'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 20:29:59'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 20:29:59'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 20:30:13' prior: 50637670!
moveTo: aPosition

	| move terrain |
	
	terrain := island terrainAt: aPosition.
	
	move := pirates inject: true into: [ : canMove : pirate | canMove & self canMovePirate: pirate to: aPosition withTerrain: terrain ].

	"nos movemos si todos pueden moverse"
	move ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 20:30:14'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 20:30:14'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 20:30:14'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 20:30:14'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 20:30:14'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 20:30:14'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 20:30:14'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 20:30:14'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 20:30:16'!
ERROR!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 20:30:32' prior: 50637709!
moveTo: aPosition

	| move terrain |
	
	terrain := island terrainAt: aPosition.
	
	move := pirates inject: true into: [ : canMove : pirate | canMove & (self canMovePirate: pirate to: aPosition withTerrain: terrain) ].

	"nos movemos si todos pueden moverse"
	move ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 20:30:38'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 20:30:38'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 20:30:38'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 20:30:38'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 20:30:38'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 20:30:38'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 20:30:38'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 20:30:38'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 21:34:05' prior: 50636975!
test01MovingCrewToTreePlaceDoesNotMove



	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
			
			
	crew moveTo: treePosition.
	
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 21:34:14' prior: 50637789!
test01MovingCrewToTreePlaceDoesNotMove



	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
			
			
	crew moveTo: treePosition.
	
	
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 4/30/2023 21:34:45' prior: 50637047!
test03MovingCrewToFreePlace



	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: (island isEmptyAt: nextPosition).
	
	crew moveTo: nextPosition.



	self deny: (island hasCrewAt: crewPosition).
	self assert: (island hasCrewAt: nextPosition).! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 21:39:49'!
canMoveTo: aPosition withTerrain: terrain

	terrain = #Tree ifTrue: [ ^false ].
	terrain = #Empty ifTrue: [ ^ true ].
	terrain = #Diggable ifTrue: [ ^ true ].
! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 21:40:37'!
canMoveTo: aPosition withTerrain: terrain

	terrain = #Tree ifTrue: [ ^ false ].
	terrain = #Empty ifTrue: [ 
		self drawDirectionTo: aPosition.
		^ true 
	].
	terrain = #Diggable ifTrue: [^ true ].! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 21:42:40'!
canMoveTo: aPosition withTerrain: terrain on: island

	terrain = #Tree ifTrue: [ 
		island clearTerrainAt: aPosition.
		^ false
	].
	terrain = #Empty ifTrue: [ ^true ].
	terrain = #Diggable ifTrue: [ ^ true ].
! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 21:43:57'!
canMoveTo: aPosition withTerrain: terrain on: island 

	terrain = #Tree ifTrue: [ ^ false ].
	terrain = #Empty ifTrue: [ 
		self drawDirectionTo: aPosition.
		^ true 
	].
	terrain = #Diggable ifTrue: [^ true ].! !

!methodRemoval: Corsario #canMoveTo:withTerrain: stamp: 'WAL 4/30/2023 21:43:57'!
canMoveTo: aPosition withTerrain: terrain

	terrain = #Tree ifTrue: [ ^ false ].
	terrain = #Empty ifTrue: [ 
		self drawDirectionTo: aPosition.
		^ true 
	].
	terrain = #Diggable ifTrue: [^ true ].!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 21:44:59'!
canMoveTo: aPosition withTerrain: terrain on: island 

	terrain = #Tree ifTrue: [ ^false ].
	terrain = #Empty ifTrue: [ ^ true ].
	terrain = #Diggable ifTrue: [ ^ true ].
! !

!methodRemoval: Bucanero #canMoveTo:withTerrain: stamp: 'WAL 4/30/2023 21:44:59'!
canMoveTo: aPosition withTerrain: terrain

	terrain = #Tree ifTrue: [ ^false ].
	terrain = #Empty ifTrue: [ ^ true ].
	terrain = #Diggable ifTrue: [ ^ true ].
!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 21:45:18'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 21:45:18'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 21:45:18'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 21:45:18'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 21:45:18'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 21:45:18'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 21:45:18'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 21:45:18'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 21:46:05' prior: 50637491!
canMovePirate: pirate to: aPosition withTerrain: terrain

	^ pirate canMoveTo: aPosition withTerrain: terrain on: island .

		"(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ ^ false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				^ true 
			].
			terrain = #Diggable ifTrue: [^ true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				^ false
			].
			terrain = #Empty ifTrue: [ ^true ].
			terrain = #Diggable ifTrue: [ ^ true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ ^false ].
			terrain = #Empty ifTrue: [ ^ true ].
			terrain = #Diggable ifTrue: [ ^ true ].
		]."! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 21:46:14'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 21:46:14'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 21:46:14'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 21:46:14'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 21:46:14'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 21:46:14'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 21:46:14'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 21:46:14'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 21:46:33' prior: 50637934!
canMovePirate: pirate to: aPosition withTerrain: terrain

	^ pirate canMoveTo: aPosition withTerrain: terrain on: island.! !

Object subclass: #Terrain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Terrain category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 21:53:17'!
Object subclass: #Terrain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Terrain subclass: #Empty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Empty category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 21:54:36'!
Terrain subclass: #Empty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Terrain subclass: #Diggable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Diggable category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 21:54:43'!
Terrain subclass: #Diggable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Terrain subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Tree category: 'ISW1-2022-2C-1erParcial' stamp: 'WAL 4/30/2023 21:54:58'!
Terrain subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!Filibustero methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:12:15' prior: 50637864!
canMoveTo: aPosition withTerrain: terrain on: island

	^terrain canMoveFilibusteroTo: aPosition withTerrain: terrain on: island.! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 22:12:36'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 22:12:36'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:12:36'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 22:12:36'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 22:12:36'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 22:12:36'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 22:12:36'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 22:12:36'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 22:12:39'!
ERROR!
!Diggable methodsFor: 'no messages' stamp: 'WAL 4/30/2023 22:14:21'!
canMoveFilibusteroTo: aPosition withTerrain: terrain on: island.
		
	^ true
! !
!Empty methodsFor: 'no messages' stamp: 'WAL 4/30/2023 22:14:36'!
canMoveFilibusteroTo: aPosition withTerrain: terrain on: island.
		
	^true ! !
!Tree methodsFor: 'no messages' stamp: 'WAL 4/30/2023 22:15:00'!
canMoveFilibusteroTo: aPosition withTerrain: terrain on: island.
		
	island clearTerrainAt: aPosition.
	^ false! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 22:15:04'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 22:15:04'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:15:04'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 22:15:04'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 22:15:04'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 22:15:04'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 22:15:04'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 22:15:04'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 22:15:09'!
ERROR!
!Corsario methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:16:39' prior: 50637874!
canMoveTo: aPosition withTerrain: terrain on: island 

	^terrain canMoveCorsarioTo: aPosition withTerrain: terrain on: island .! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:17:14'!
canMoveCorsarioTo: aPosition withTerrain: terrain on: island .
	
	^ true! !
!Empty methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:17:44'!
canMoveCorsarioTo: aPosition withTerrain: terrain on: island 

	self drawDirectionTo: aPosition.
	^ true 
! !
!Tree methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:18:08'!
canMoveCorsarioTo: aPosition withTerrain: terrain on: island 

	^ false! !
!Tree methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:18:13' prior: 50638085!
canMoveFilibusteroTo: aPosition withTerrain: terrain on: island
		
	island clearTerrainAt: aPosition.
	^ false! !
!Empty methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:18:17' prior: 50638080!
canMoveFilibusteroTo: aPosition withTerrain: terrain on: island
		
	^true ! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:18:21' prior: 50638075!
canMoveFilibusteroTo: aPosition withTerrain: terrain on: island
		
	^ true
! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:18:24' prior: 50638128!
canMoveCorsarioTo: aPosition withTerrain: terrain on: island
	
	^ true! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:20:41' prior: 50637892!
canMoveTo: aPosition withTerrain: terrain on: island 

	^terrain canMoveBucaneroTo: aPosition withTerrain: terrain on: island .
! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:20:58'!
canMoveBucaneroTo: aPosition withTerrain: terrain on: island
	
	^ true! !
!Empty methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:21:14'!
canMoveBucaneroTo: aPosition withTerrain: terrain on: island .
	
	^ true! !
!Tree methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:21:30'!
canMoveBucaneroTo: aPosition withTerrain: terrain on: island
	
	^false! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 22:21:43'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 22:21:43'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:21:43'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 22:21:43'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 22:21:43'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 22:21:43'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 22:21:43'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 22:21:43'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 22:21:45'!
ERROR!
!Island methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:23:00' prior: 50634292!
terrainAt: aPosition

	| ix |
	
	ix := 1.
	[ix <= treesAt size] whileTrue: [ | pos |
		pos := treesAt at: ix.
		(aPosition = pos) ifTrue: [ ^ Tree new ].		
		ix := ix + 1.
	].

	ix := 1.
	[ix <= digsAt size] whileTrue: [ | pos |
		pos := digsAt at: ix.
		(aPosition = pos) ifTrue: [ ^ Diggable new ].
		ix := ix + 1.
	].

	^ Empty new.
	
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 22:23:03'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 22:23:03'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:23:03'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 22:23:03'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 22:23:03'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 22:23:03'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 22:23:03'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 22:23:03'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:23:08'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 22:24:56'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 22:24:56'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:24:56'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 22:24:56'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 22:24:56'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 22:24:56'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 22:24:56'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 22:24:56'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:25:00'!
ERROR!
!Empty methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:26:09' prior: 50638133!
canMoveCorsarioTo: aPosition withTerrain: terrain on: island 

	Corsario new drawDirectionTo: aPosition.
	^ true 
! !

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:26:12'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:26:16'!
ERROR!
!Empty methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:35:04'!
canMoveCorsario: aCorsario To: aPosition withTerrain: terrain on: island 

	aCorsario drawDirectionTo: aPosition.
	^ true 
! !

!methodRemoval: Empty #canMoveCorsarioTo:withTerrain:on: stamp: 'WAL 4/30/2023 22:35:18'!
canMoveCorsarioTo: aPosition withTerrain: terrain on: island 

	Corsario new drawDirectionTo: aPosition.
	^ true 
!
!Tree methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:35:35'!
canMoveCorsario: aCorsario To: aPosition withTerrain: terrain on: island 

	^ false! !

!methodRemoval: Tree #canMoveCorsarioTo:withTerrain:on: stamp: 'WAL 4/30/2023 22:35:47'!
canMoveCorsarioTo: aPosition withTerrain: terrain on: island 

	^ false!
!Diggable methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:35:55'!
canMoveCorsario: aCorsario To: aPosition withTerrain: terrain on: island 
	
	^ true! !

!methodRemoval: Diggable #canMoveCorsarioTo:withTerrain:on: stamp: 'WAL 4/30/2023 22:35:59'!
canMoveCorsarioTo: aPosition withTerrain: terrain on: island
	
	^ true!
!Corsario methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:36:25' prior: 50638121!
canMoveTo: aPosition withTerrain: terrain on: island 

	^terrain canMoveCorsario: self To: aPosition withTerrain: terrain on: island .! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 22:36:27'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 22:36:27'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:36:27'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 22:36:27'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 22:36:27'!
FAILURE!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 22:36:27'!
FAILURE!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 22:36:27'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 22:36:27'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 22:36:32'!
FAILURE!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 22:37:40'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 22:37:40'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:37:40'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 22:37:40'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 22:37:40'!
FAILURE!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 22:37:40'!
FAILURE!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 22:37:40'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 22:37:40'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 22:42:06'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 22:42:06'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 22:42:06'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:42:06'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 22:42:06'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 22:42:06'!
FAILURE!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 22:42:06'!
FAILURE!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 22:42:06'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 22:42:06'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 22:42:09'!
FAILURE!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:44:20' prior: 50634124!
buryTreasureAt: aPosition

	| ix terrain |
	
	terrain := island terrainAt: aPosition.
	
	ix := 1.
	[ix <= pirates size] whileTrue: [ | pirate |
		pirate := pirates at: ix.
		
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = Tree new ifTrue: [].
			terrain = Empty new ifTrue: [].
			terrain = Diggable new ifTrue: [ 				pirate drawTreasureMarkAt: aPosition ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = Tree new ifTrue: [].
			terrain = Empty new ifTrue: [].
			terrain = Diggable new ifTrue: [].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = Tree new ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
			terrain = Empty new ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
			terrain = Diggable new ifTrue: [ island receiveTreasureAt: aPosition ].
		].
		
		ix := ix + 1.
	].
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 22:44:23'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 22:44:23'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:44:23'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 22:44:23'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 22:44:23'!
FAILURE!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 22:44:23'!
FAILURE!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 22:44:23'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 22:44:23'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 22:44:28'!
FAILURE!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 22:44:55'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 22:44:55'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:44:55'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 22:44:55'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 22:44:55'!
FAILURE!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 22:44:55'!
FAILURE!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 22:44:55'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 22:44:55'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:45:34' prior: 50638433!
buryTreasureAt: aPosition

	| ix terrain |
	
	terrain := island terrainAt: aPosition.
	
	ix := 1.
	[ix <= pirates size] whileTrue: [ | pirate |
		pirate := pirates at: ix.
		
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = (Tree new) ifTrue: [].
			terrain = (Empty new) ifTrue: [].
			terrain = (Diggable new) ifTrue: [ 				pirate drawTreasureMarkAt: aPosition ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = (Tree new) ifTrue: [].
			terrain = (Empty new) ifTrue: [].
			terrain = (Diggable new) ifTrue: [].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = (Tree new) ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
			terrain = (Empty new) ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
			terrain = (Diggable new) ifTrue: [ island receiveTreasureAt: aPosition ].
		].
		
		ix := ix + 1.
	].
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 22:47:02' prior: 50638518!
buryTreasureAt: aPosition

	| ix terrain |
	
	terrain := island terrainAt: aPosition.
	
	ix := 1.
	[ix <= pirates size] whileTrue: [ | pirate |
		pirate := pirates at: ix.
		
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain class name = 'Tree' ifTrue: [].
			terrain class name = 'Empty' ifTrue: [].
			terrain class name = 'Diggable' ifTrue: [ 				pirate drawTreasureMarkAt: aPosition ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain class name = 'Tree' ifTrue: [].
			terrain class name = 'Empty' ifTrue: [].
			terrain class name = 'Diggable' ifTrue: [].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain class name = 'Tree' ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
			terrain class name = 'Empty' ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
			terrain class name = 'Diggable' ifTrue: [ island receiveTreasureAt: aPosition ].
		].
		
		ix := ix + 1.
	].
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 22:47:04'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 22:47:04'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 22:47:04'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 22:47:04'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 22:47:04'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 22:47:04'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 22:47:04'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 22:47:04'!
PASSED!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 23:44:41'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 23:44:41'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 23:44:41'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 23:44:41'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 23:44:41'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 23:44:41'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 23:44:41'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 23:44:41'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 23:45:49' prior: 50638549!
buryTreasureAt: aPosition

	| ix terrain |
	
	terrain := island terrainAt: aPosition.
	
	pirates do: [: pirate |
		
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain class name = 'Tree' ifTrue: [].
			terrain class name = 'Empty' ifTrue: [].
			terrain class name = 'Diggable' ifTrue: [ 				pirate drawTreasureMarkAt: aPosition ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain class name = 'Tree' ifTrue: [].
			terrain class name = 'Empty' ifTrue: [].
			terrain class name = 'Diggable' ifTrue: [].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain class name = 'Tree' ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
			terrain class name = 'Empty' ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
			terrain class name = 'Diggable' ifTrue: [ island receiveTreasureAt: aPosition ].
		].
	].
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 23:46:01' prior: 50638633!
buryTreasureAt: aPosition

	| terrain |
	
	terrain := island terrainAt: aPosition.
	
	pirates do: [: pirate |
		
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain class name = 'Tree' ifTrue: [].
			terrain class name = 'Empty' ifTrue: [].
			terrain class name = 'Diggable' ifTrue: [ 				pirate drawTreasureMarkAt: aPosition ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain class name = 'Tree' ifTrue: [].
			terrain class name = 'Empty' ifTrue: [].
			terrain class name = 'Diggable' ifTrue: [].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain class name = 'Tree' ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
			terrain class name = 'Empty' ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
			terrain class name = 'Diggable' ifTrue: [ island receiveTreasureAt: aPosition ].
		].
	].
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 23:46:04'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 23:46:04'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 23:46:04'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 23:46:04'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 23:46:04'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 23:46:04'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 23:46:04'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 23:46:04'!
PASSED!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 23:51:52' prior: 50638663!
buryTreasureAt: aPosition

	| terrain |
	
	terrain := island terrainAt: aPosition.
	
	pirates do: [: pirate |
		pirate buryTreasureAt: aPosition on: island.
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain class name = 'Tree' ifTrue: [].
			terrain class name = 'Empty' ifTrue: [].
			terrain class name = 'Diggable' ifTrue: [ 				pirate drawTreasureMarkAt: aPosition ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain class name = 'Tree' ifTrue: [].
			terrain class name = 'Empty' ifTrue: [].
			terrain class name = 'Diggable' ifTrue: [].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain class name = 'Tree' ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
			terrain class name = 'Empty' ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
			terrain class name = 'Diggable' ifTrue: [ island receiveTreasureAt: aPosition ].
		].
	].
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 23:52:14' prior: 50638719!
buryTreasureAt: aPosition

	| terrain |
	
	terrain := island terrainAt: aPosition.
	
	pirates do: [: pirate |
		pirate buryTreasureAt: aPosition on: island.

	].
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 23:53:09' prior: 50638751!
buryTreasureAt: aPosition

	| terrain |
	
	terrain := island terrainAt: aPosition.
	
	pirates do: [: pirate |
		pirate buryTreasureAt: aPosition with: terrain on: island.
	].
	! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 23:53:35'!
buryTreasureAt: aPosition with: terrain on: island
		
	terrain class name = 'Tree' ifTrue: [].
	terrain class name = 'Empty' ifTrue: [].
	terrain class name = 'Diggable' ifTrue: [].
! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 23:54:07'!
buryTreasureAt: aPosition with: terrain on: island.

	terrain class name = 'Tree' ifTrue: [].
	terrain class name = 'Empty' ifTrue: [].
	terrain class name = 'Diggable' ifTrue: [ 				self drawTreasureMarkAt: aPosition ].
! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 23:54:54' prior: 50638768!
buryTreasureAt: aPosition with: terrain on: island.
		
	terrain class name = 'Tree' ifTrue: [].
	terrain class name = 'Empty' ifTrue: [].
	terrain class name = 'Diggable' ifTrue: [].! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 23:55:09'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 23:55:09'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 23:55:09'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 23:55:09'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 23:55:09'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 23:55:09'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 23:55:09'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 23:55:09'!
ERROR!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 23:55:19'!
ERROR!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 23:56:33'!
buryTreasureAt: aPosition with: terrain on: island.
		
	terrain class name = 'Tree' ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ].
	terrain class name = 'Empty' ifTrue: [ self error: 'Arrgh!! I cannot dig this type of terrain!!' ]	.
	terrain class name = 'Diggable' ifTrue: [ island receiveTreasureAt: aPosition ].! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 23:56:34'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 23:56:34'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 23:56:34'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 23:56:34'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 23:56:34'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 23:56:34'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 23:56:34'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 23:56:34'!
PASSED!
!Filibustero methodsFor: 'as yet unclassified' stamp: 'WAL 4/30/2023 23:57:17' prior: 50638788!
buryTreasureAt: aPosition with: terrain on: island.
		
	"terrain class name = 'Tree' ifTrue: [].
	terrain class name = 'Empty' ifTrue: [].
	terrain class name = 'Diggable' ifTrue: []."! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 4/30/2023 23:57:19'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 4/30/2023 23:57:19'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 4/30/2023 23:57:19'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 4/30/2023 23:57:19'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 4/30/2023 23:57:19'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 4/30/2023 23:57:19'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 4/30/2023 23:57:19'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 4/30/2023 23:57:19'!
PASSED!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:01:19' prior: 50638826!
buryTreasureAt: aPosition with: terrain on: island.
	
	terrain buryTreasureByBucanero: self At: aPosition on: island.! !
!Tree methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:02:36'!
buryTreasureByBucanero: aBucanero At: aPosition on: island
	
	aBucanero error: 'Arrgh!! I cannot dig this type of terrain!!'! !
!Empty methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:02:51'!
buryTreasureByBucanero: aBucanero At: aPosition on: island
	
	 aBucanero error: 'Arrgh!! I cannot dig this type of terrain!!'! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:03:08'!
buryTreasureByBucanero: aBucanero At: aPosition on: island
	
	island receiveTreasureAt: aPosition! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 00:03:14'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 00:03:14'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 00:03:14'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 00:03:14'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 00:03:14'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 00:03:14'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 00:03:14'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 00:03:14'!
PASSED!
!Corsario methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:04:22' prior: 50638777!
buryTreasureAt: aPosition with: terrain on: island.

	terrain buryTreasureByCorsario: self at: aPosition on: island.
! !
!Tree methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:04:51'!
buryTreasureByCorsario: aCorsario at: aPosition on: island
! !
!Empty methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:05:12'!
buryTreasureByCorsario: aCorsario at: aPosition on: island

! !
!Diggable methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:05:42'!
buryTreasureByCorsario: aCorsario at: aPosition on: island

	aCorsario drawTreasureMarkAt: aPosition
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 00:05:52'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 00:05:52'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 00:05:52'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 00:05:52'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 00:05:52'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 00:05:52'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 00:05:52'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 00:05:52'!
PASSED!
!Diggable methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:06:20'!
buryTreasureByBucanero: aBucanero at: aPosition on: island
	
	island receiveTreasureAt: aPosition! !
!Empty methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:06:20'!
buryTreasureByBucanero: aBucanero at: aPosition on: island
	
	 aBucanero error: 'Arrgh!! I cannot dig this type of terrain!!'! !
!Tree methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:06:20'!
buryTreasureByBucanero: aBucanero at: aPosition on: island
	
	aBucanero error: 'Arrgh!! I cannot dig this type of terrain!!'! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:06:20' prior: 50638901!
buryTreasureAt: aPosition with: terrain on: island.
	
	terrain buryTreasureByBucanero: self at: aPosition on: island.! !

!methodRemoval: Diggable #buryTreasureByBucanero:At:on: stamp: 'WAL 5/1/2023 00:06:20'!
buryTreasureByBucanero: aBucanero At: aPosition on: island
	
	island receiveTreasureAt: aPosition!

!methodRemoval: Empty #buryTreasureByBucanero:At:on: stamp: 'WAL 5/1/2023 00:06:20'!
buryTreasureByBucanero: aBucanero At: aPosition on: island
	
	 aBucanero error: 'Arrgh!! I cannot dig this type of terrain!!'!

!methodRemoval: Tree #buryTreasureByBucanero:At:on: stamp: 'WAL 5/1/2023 00:06:20'!
buryTreasureByBucanero: aBucanero At: aPosition on: island
	
	aBucanero error: 'Arrgh!! I cannot dig this type of terrain!!'!

!methodRemoval: Crew #canMovePirate:to:withTerrain: stamp: 'WAL 5/1/2023 00:13:33'!
canMovePirate: pirate to: aPosition withTerrain: terrain

	^ pirate canMoveTo: aPosition withTerrain: terrain on: island.!
!Crew methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:13:33' prior: 50637751!
moveTo: aPosition

	| move terrain |
	
	terrain := island terrainAt: aPosition.
	
	move := pirates inject: true into: [ : canMove : pirate | canMove & ( pirate canMoveTo: aPosition withTerrain: terrain on: island). ].

	"nos movemos si todos pueden moverse"
	move ifTrue: [ island crewAt: aPosition ].
	
	! !

----SNAPSHOT----(1 May 2023 00:20:39) CuisUniversity-5706.image priorSource: 9668780!
!Island methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:24:03' prior: 50634254!
clearTerrainAt: aPosition
	


	| ix |
	
	ix := 1.
	[ix <= treesAt size] whileTrue: [ | pos |
		pos := treesAt at: ix.
		(aPosition = pos) ifTrue: [ ^ treesAt removeIndex: ix ].
		
		ix := ix + 1.
	].
	
! !
!Island methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:26:43' prior: 50639072!
clearTerrainAt: aPosition
	
	treesAt remove: [ : aPositionWithTree | aPositionWithTree = aPosition ]

	"| ix |
	
	ix := 1.
	[ix <= treesAt size] whileTrue: [ | pos |
		pos := treesAt at: ix.
		(aPosition = pos) ifTrue: [ ^ treesAt removeIndex: ix ].
		
		ix := ix + 1.
	].
	"
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 00:26:47'!
ERROR!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 00:26:47'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 00:26:47'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 00:26:47'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 00:26:47'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 00:26:47'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 00:26:47'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 00:26:47'!
PASSED!
!Island methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:30:24' prior: 50639082!
clearTerrainAt: aPosition
	
	treesAt remove: aPosition ifAbsent: []! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 00:30:27'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 00:30:27'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 00:30:27'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 00:30:27'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 00:30:27'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 00:30:27'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 00:30:27'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 00:30:27'!
PASSED!
!Island methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:34:04' prior: 50634278!
isEmptyAt: aPosition


	 
	
	| ix |
	
	ix := 1.
	[ix <= treesAt size] whileTrue: [ | pos |
		pos := treesAt at: ix.
		(aPosition = pos) ifTrue: [ ^ false ].
		
		ix := ix + 1.
	].

	^ true! !
!Island methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:38:35' prior: 50639150!
isEmptyAt: aPosition

	^ (treesAt includes: aPosition) negated 
	 
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 00:38:37'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 00:38:37'!
ERROR!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 00:38:37'!
ERROR!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 00:38:37'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 00:38:37'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 00:38:37'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 00:38:37'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 00:38:37'!
PASSED!
!Island methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:38:56' prior: 50639159!
isEmptyAt: aPosition

	^ (treesAt includes: aPosition) not 
	 
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 00:38:58'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 00:38:58'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 00:38:58'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 00:38:58'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 00:38:58'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 00:38:58'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 00:38:58'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 00:38:58'!
PASSED!
!Island methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:43:24' prior: 50638221!
terrainAt: aPosition

	| ix |

	"treesAt do: [:aPositionWithTree|]."


	
	ix := 1.
	[ix <= treesAt size] whileTrue: [ | pos |
		pos := treesAt at: ix.
		(aPosition = pos) ifTrue: [ ^ Tree new ].		
		ix := ix + 1.
	].

	ix := 1.
	[ix <= digsAt size] whileTrue: [ | pos |
		pos := digsAt at: ix.
		(aPosition = pos) ifTrue: [ ^ Diggable new ].
		ix := ix + 1.
	].

	^ Empty new.
	
! !
!Island methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:52:41' prior: 50639221!
terrainAt: aPosition

	| ix |

	"treesAt do: [:aPositionWithTree|]."

	treesAt
		detect: [:aPositionWithTree | aPositionWithTree = aPosition ]
		ifFound: [:aPositionWithTree|^ Tree new]
		ifNone: [
			
			
			
			].

	ix := 1.
	[ix <= digsAt size] whileTrue: [ | pos |
		pos := digsAt at: ix.
		(aPosition = pos) ifTrue: [ ^ Diggable new ].
		ix := ix + 1.
	].

	^ Empty new.
	
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 00:52:44'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 00:52:44'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 00:52:44'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 00:52:44'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 00:52:44'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 00:52:44'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 00:52:44'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 00:52:44'!
PASSED!
!Island methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:53:48' prior: 50639236!
terrainAt: aPosition

	| ix |

	"treesAt do: [:aPositionWithTree|]."

	treesAt
		detect: [:aPositionWithTree | aPositionWithTree = aPosition ]
		ifFound: [:aPositionWithTree|^ Tree new]
		ifNone: [
			
			digsAt
				detect: [:aPositionDIggable | aPositionDIggable = aPosition ]
				ifFound: [:aPositionDIggable|^ Diggable new]
				ifNone: [
					
					^ Empty new.
				].
	].
	
! !
!Island methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:53:57' prior: 50639277!
terrainAt: aPosition

	treesAt
		detect: [:aPositionWithTree | aPositionWithTree = aPosition ]
		ifFound: [:aPositionWithTree|^ Tree new]
		ifNone: [
			digsAt
				detect: [:aPositionDIggable | aPositionDIggable = aPosition ]
				ifFound: [:aPositionDIggable|^ Diggable new]
				ifNone: [
					
					^ Empty new.
				].
	].
	
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 00:53:59'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 00:53:59'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 00:53:59'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 00:53:59'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 00:53:59'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 00:53:59'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 00:53:59'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 00:53:59'!
PASSED!
!Island methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 00:58:37' prior: 50639292!
terrainAt: aPosition





	treesAt
		detect: [:aPositionWithTree | aPositionWithTree = aPosition ]
		ifFound: [:aPositionWithTree|^ Tree new]
		ifNone: [
			digsAt
				detect: [:aPositionDIggable | aPositionDIggable = aPosition ]
				ifFound: [:aPositionDIggable|^ Diggable new]
				ifNone: [
					
					^ Empty new.
				].
	].
	
! !
!Island methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 01:44:33' prior: 50639331!
terrainAt: aPosition

	(treesAt includes: aPosition ) ifTrue: [^ Tree new].

	(digsAt includes: aPosition ) ifTrue: [^ Diggable new].

	^ Empty new.
	
	"treesAt
		detect: [:aPositionWithTree | aPositionWithTree = aPosition ]
		ifFound: [:aPositionWithTree|^ Tree new]
		ifNone: [
			digsAt
				detect: [:aPositionDIggable | aPositionDIggable = aPosition ]
				ifFound: [:aPositionDIggable|^ Diggable new]
				ifNone: [
					
					^ Empty new.
				].
	]."
	
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 01:44:35'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 01:44:35'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 01:44:35'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 01:44:35'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 01:44:35'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 01:44:35'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 01:44:35'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 01:44:35'!
PASSED!
!Island methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 01:49:29' prior: 50639345!
terrainAt: aPosition

	(treesAt includes: aPosition ) ifTrue: [^ Tree new].

	(digsAt includes: aPosition ) ifTrue: [^ Diggable new].

	^ Empty new.
	

! !
!Map methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 01:56:37' prior: 50634350!
lastPosition

	"| acc ix |"
	
	^ steps inject: startPosition into: [ :positionAcc :step | positionAcc + step ].
	
	"acc := startPosition.
	ix := 1.
	
	[ix <= steps size] whileTrue: [
		acc := acc + (steps at: ix)	.
		ix := ix + 1.
	].

	^ acc"
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 01:56:38'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 01:56:38'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 01:56:38'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 01:56:38'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 01:56:38'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 01:56:38'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 01:56:38'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 01:56:38'!
PASSED!
!Map methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 01:58:04' prior: 50639396!
lastPosition

	"| acc ix |"
	
	^ steps inject: startPosition into: [ :position :step | position + step ].
	
	"acc := startPosition.
	ix := 1.
	
	[ix <= steps size] whileTrue: [
		acc := acc + (steps at: ix)	.
		ix := ix + 1.
	].

	^ acc"
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 01:58:10'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 01:58:10'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 01:58:10'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 01:58:10'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 01:58:10'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 01:58:10'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 01:58:10'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 01:58:10'!
PASSED!
!Map methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 01:58:32' prior: 50639432!
lastPosition

	^ steps inject: startPosition into: [ :position :step | position + step ].
! !
!Map methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 01:58:37' prior: 50639468!
lastPosition

	^ steps inject: startPosition into: [ :step :position  | position + step ].
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 01:58:38'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 01:58:38'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 01:58:38'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 01:58:38'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 01:58:38'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 01:58:38'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 01:58:38'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 01:58:38'!
PASSED!
!Map methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 01:59:00' prior: 50639474!
lastPosition

	^ steps inject: startPosition into: [ :position :step  | position + step ].
! !

!methodRemoval: Map #startPosition stamp: 'WAL 5/1/2023 02:00:20'!
startPosition

	^ startPosition
	
	!

!methodRemoval: Map #step: stamp: 'WAL 5/1/2023 02:01:21'!
step: ix

	^ steps at: ix.
	
	!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 02:01:24'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 02:01:24'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 02:01:24'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 02:01:24'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 02:01:24'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 02:01:24'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 02:01:24'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 02:01:24'!
PASSED!

!methodRemoval: Filibustero #aCaptainIWasMeantToBe stamp: 'WAL 5/1/2023 02:03:20'!
aCaptainIWasMeantToBe

	rank := #Captain!

!methodRemoval: Corsario #aCaptainIWasMeantToBe stamp: 'WAL 5/1/2023 02:03:24'!
aCaptainIWasMeantToBe

	rank := #Captain!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 02:03:27'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 02:03:27'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 02:03:27'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 02:03:27'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 02:03:27'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 02:03:27'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 02:03:27'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 02:03:27'!
PASSED!
!Pirate methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 02:04:07'!
searchTreasureIn: island with: aMap

	self subclassResponsibility ! !
!Pirate methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 02:05:45' prior: 50639577!
searchTreasureIn: island with: aMap

	rank = #SimplePirate ifTrue: [ self error: 'I am a simple pirate!!' ].
	rank = #Captain ifTrue: [ ^ true "Aye, Aye!! La implementación está fuera del scope del parcial." ].
	! !

!methodRemoval: Bucanero #searchTreasureIn:with: stamp: 'WAL 5/1/2023 02:05:45'!
searchTreasureIn: island with: aMap

	rank = #SimplePirate ifTrue: [ self error: 'I am a simple pirate!!' ].
	rank = #Captain ifTrue: [ ^ true "Aye, Aye!! La implementación está fuera del scope del parcial." ].
	!

!methodRemoval: Corsario #searchTreasureIn:with: stamp: 'WAL 5/1/2023 02:05:51'!
searchTreasureIn: island with: aMap

	rank = #SimplePirate ifTrue: [ self error: 'I am a simple pirate!!' ].
	rank = #Captain ifTrue: [ ^ true "Aye, Aye!! La implementación está fuera del scope del parcial." ].
	!

!methodRemoval: Filibustero #searchTreasureIn:with: stamp: 'WAL 5/1/2023 02:05:56'!
searchTreasureIn: island with: aMap

	rank = #SimplePirate ifTrue: [ self error: 'I am a simple pirate!!' ].
	rank = #Captain ifTrue: [ ^ true "Aye, Aye!! La implementación está fuera del scope del parcial." ].
	!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 02:05:59'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 02:05:59'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 02:05:59'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 02:05:59'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 02:05:59'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 02:05:59'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 02:05:59'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 02:05:59'!
PASSED!

!methodRemoval: Corsario #initialize stamp: 'WAL 5/1/2023 02:07:59'!
initialize

	rank := #NoRank!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 02:08:04'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 02:08:04'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 02:08:04'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 02:08:04'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 02:08:04'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 02:08:04'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 02:08:04'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 02:08:04'!
PASSED!
!Pirate methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 02:10:00' overrides: 16920235!
initialize

	rank := #SimplePirate! !

!methodRemoval: Filibustero #initialize stamp: 'WAL 5/1/2023 02:10:00'!
initialize

	rank := #SimplePirate!
!Corsario methodsFor: 'as yet unclassified' stamp: 'WAL 5/1/2023 02:10:08' prior: 50634084!
initializeWith: aMap

	map := aMap! !

!methodRemoval: Bucanero #initialize stamp: 'WAL 5/1/2023 02:10:17'!
initialize

	rank := #SimplePirate!
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:19:46' prior: 50637067!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap


	
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: map isEmpty.

	crew moveTo: nextPosition.

	self assert: map stepsSize equals: 1. 
	self assert: map lastPosition equals: nextPosition.
! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:19:51' prior: 50639689!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap


	
	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: map isEmpty.

	crew moveTo: nextPosition.

	self assert: map stepsSize equals: 1. 
	self assert: map lastPosition equals: nextPosition.
! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:20:01' prior: 50637827!
test03MovingCrewToFreePlace



	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: (island isEmptyAt: nextPosition).
	
	crew moveTo: nextPosition.



	self deny: (island hasCrewAt: crewPosition).
	self assert: (island hasCrewAt: nextPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:20:04' prior: 50637160!
test02MovingCrewToTreePlaceFilibusteroRemovesTree



	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	self deny: (island isEmptyAt: treePosition).
				
	crew moveTo: treePosition.

	self assert: (island isEmptyAt: treePosition).
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:20:06' prior: 50637808!
test01MovingCrewToTreePlaceDoesNotMove



	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: 3@3).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
			
			
	crew moveTo: treePosition.
	
	
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:20:13' prior: 50639775!
test01MovingCrewToTreePlaceDoesNotMove



	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
			
			
			
	crew moveTo: treePosition.
	
	
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:20:17' prior: 50639752!
test02MovingCrewToTreePlaceFilibusteroRemovesTree



	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.

	self deny: (island isEmptyAt: treePosition).
				
	crew moveTo: treePosition.

	self assert: (island isEmptyAt: treePosition).
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:20:21' prior: 50639731!
test03MovingCrewToFreePlace



	digPosition := 2@2.
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
	map := Map of: island crewStartsAt: crewPosition.
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.
	nextPosition := 2@1.
	self assert: (island isEmptyAt: nextPosition).
	
	crew moveTo: nextPosition.



	self deny: (island hasCrewAt: crewPosition).
	self assert: (island hasCrewAt: nextPosition).! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 02:20:26'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 02:20:26'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 02:20:26'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 02:20:26'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 02:20:26'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 02:20:26'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 02:20:26'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 02:20:26'!
PASSED!
!CrewTest methodsFor: 'setUp' stamp: 'WAL 5/1/2023 02:21:04' prior: 50636995 overrides: 16961394!
setUp
	
	crewPosition := 1@1.
	treePosition := 1@2.
	digPosition := 2@2.
	
	island := Island
		sized: 3@3
		treesAt: (OrderedCollection with: treePosition)
		digsAt: (OrderedCollection with: digPosition).
		
	map := Map of: island crewStartsAt: crewPosition.
	
	crew := Crew 
			at: island 
			composedBy: (OrderedCollection with: (Corsario with: map) with: Filibustero new with: Bucanero new)
			at: crewPosition.! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:21:13' prior: 50639795!
test01MovingCrewToTreePlaceDoesNotMove
	
	crew moveTo: treePosition.
	
	
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:21:20' prior: 50639815!
test02MovingCrewToTreePlaceFilibusteroRemovesTree

	self deny: (island isEmptyAt: treePosition).
				
	crew moveTo: treePosition.

	self assert: (island isEmptyAt: treePosition).
	
	self deny: (island hasCrewAt: treePosition).
	self assert: (island hasCrewAt: crewPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:21:27' prior: 50639838!
test03MovingCrewToFreePlace

	nextPosition := 2@1.
	self assert: (island isEmptyAt: nextPosition).
	
	crew moveTo: nextPosition.



	self deny: (island hasCrewAt: crewPosition).
	self assert: (island hasCrewAt: nextPosition).! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:21:35' prior: 50639710!
test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap

	nextPosition := 2@1.
	self assert: map isEmpty.

	crew moveTo: nextPosition.

	self assert: map stepsSize equals: 1. 
	self assert: map lastPosition equals: nextPosition.
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 02:21:39'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 02:21:39'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 02:21:39'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 02:21:39'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 02:21:39'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 02:21:39'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 02:21:39'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 02:21:39'!
PASSED!
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:21:47' prior: 50637088!
test05CrewCannotBuryTreasureIfBucaneroCannotDig

	nextPosition := 2@1.
	crew moveTo: nextPosition.
	
	self 
		should: [ crew buryTreasureAt: 3@1 ] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: Bucanero cannotDigErrorDescription.
			self deny: map hasTreasureMark ]
			
	
	
	
! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:21:53' prior: 50637113!
test06CrewCanBuryTreasureIfBucaneroCanDig


	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.
	
	self assert: map hasTreasureMark.
	
			
	
	
	
! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:21:59' prior: 50637182!
test07CaptainCanUseMap

	| pirate |
	

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	pirate aCaptainIWasMeantToBe.
	
	self assert: (pirate searchTreasureIn: island with: map)! !
!CrewTest methodsFor: 'tests' stamp: 'WAL 5/1/2023 02:22:06' prior: 50637202!
test08SimplePirateCannotUseMap

	| pirate |

	crew moveTo: 2@1.
	crew buryTreasureAt: 2@2.

	pirate := Bucanero new.
	
	self 
		should: [ pirate searchTreasureIn: island with: map ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'I am a simple pirate!!'
! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'WAL 5/1/2023 02:22:10'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'WAL 5/1/2023 02:22:10'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'WAL 5/1/2023 02:22:10'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'WAL 5/1/2023 02:22:10'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'WAL 5/1/2023 02:22:10'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'WAL 5/1/2023 02:22:10'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'WAL 5/1/2023 02:22:10'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'WAL 5/1/2023 02:22:10'!
PASSED!

----SNAPSHOT----(1 May 2023 02:52:59) CuisUniversity-5706.image priorSource: 9837364!

----SNAPSHOT----(1 May 2023 02:53:39) CuisUniversity-5706.image priorSource: 9868250!

----STARTUP---- (6 May 2023 14:04:49) as /home/a/s/sw/smalltalk1/CuisUniversity-5706.image!


----End fileIn of /home/a/s/sw/smalltalk1/ISW1-2022-1C-Parcial-1.st----!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 14:49:58' prior: 50640488!
test24CanNotActivateTurboWhenTurboIsActivated

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 14:50:06' prior: 50640509!
test25CanNotDeactivateTurboWhenIsDeactivated

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	
	
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadydeActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 14:50:14' prior: 50641047!
test25CanNotDeactivateTurboWhenIsDeactivated

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
		
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadydeActivatedErrorDescription
	
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 15:03:26'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 15:03:30'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 15:03:32'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 15:03:43'!
PASSED!

Sector withTurboOf: 10 * kilometer!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:15:58'!
tenKilometerTurboSector

	^ Sector withTurboOf: 10 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:15:58' prior: 50640177!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	track _ Track withSectors: sectors.
	outside _ track length + (1 * millimeter).
	car _ FormulaOneCar drivenBy: #Schumacher.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:15:58' prior: 50640355!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:15:58' prior: 50640378!
test19GrandPrixMovesCarsBetweenSectors

	| grandPrix verstappen sectorA sectorB |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	sectorA _ self tenKilometerTurboSector.
	sectorB _ Sector withTurboOf: 30 * kilometer.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: sectorA with: sectorB))
		running: 100
		with: (Set new add: verstappen; yourself).
		
	grandPrix put: verstappen at: 5 * kilometer.

	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorA equals: (grandPrix sectorOf: verstappen).
	
	verstappen speed: 15 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 20 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorB equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:15:58' prior: 50640165!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors

	| sectors track |
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (Sector withoutTurboOf: 20 * kilometer).
	track _ Track withSectors: sectors.
	
	self assert: 30 * kilometer equals: 	track length! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:15:58' prior: 50640260!
test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps

	| track grandPrix numberOfLaps |
	
	track _ Track withSectors: (OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (Sector withoutTurboOf: 20 * kilometer)).
	numberOfLaps _ 100.
	
	grandPrix _ GrandPrix on: track running: numberOfLaps.
	
	self assert: track length * numberOfLaps	 equals: grandPrix length
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:15:58' prior: 50640275!
test14TwoCarsCanBeAtTheSameDistanceFromStart

	| grandPrix hamilton verstappen |
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self tenKilometerTurboSector)))
		running: 100.
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.	
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix put: hamilton at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert:  5 * kilometer equals: (grandPrix locationOf: hamilton). 
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:15:58' prior: 50640242!
test12CarCannotBeInMoreThanOneSectorAtATime

	| sectors track car |
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	track _ Track withSectors: sectors.
	car _ FormulaOneCar drivenBy: #Schumacher.

	track put: car at: 5 * kilometer.
	track put: car at: 15 * kilometer.
	
	self assert: sectors second equals: (track sectorOf: car).
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car)
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:15:58' prior: 50640197!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (Sector withoutTurboOf: 20 * kilometer).
		
	positionInSector2 _ 5 * kilometer.
	positionInTrack _ sectors first length + positionInSector2.
	
	track _ Track withSectors: sectors.
	car _ FormulaOneCar drivenBy: #Schumacher.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:15:58' prior: 50640335!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:15:59' prior: 50640221!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (Sector withoutTurboOf: 20 * kilometer).
		
	track _ Track withSectors: sectors.
	car1 _ FormulaOneCar drivenBy: #Schumacher.
	car2 _ FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:15:59' prior: 50640062!
test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength

	| sector  outside car |
	
	sector _ self tenKilometerTurboSector.
	outside _ sector length + (1 * millimeter).
	car _ FormulaOneCar drivenBy: #Schumacher.
	
	self 
		should: [ sector put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (sector includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:15:59' prior: 50640313!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	verstappen speed: 0* kilometer / hour.
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:15:59' prior: 50640295!
test15ACarStoppedShouldNotMoveAfterSomeTime

	| grandPrix verstappen |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	verstappen speed: 0 * kilometer / hour.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self tenKilometerTurboSector)))
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix advance: 10 * minute.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen) 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:17:51' prior: 50641374!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 temporaryVariable |
	
	sectors := OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (Sector withoutTurboOf: 20 * kilometer).
		
	temporaryVariable := Sector withoutTurboOf: 20 * kilometer.
		
	track := Track withSectors: sectors.
	car1 := FormulaOneCar drivenBy: #Schumacher.
	car2 := FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:18:15' prior: 50641452!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 temporaryVariable |
	
	sectors := OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (Sector withoutTurboOf: 20 * kilometer).
		
	temporaryVariable := Sector withoutTurboOf: 20 * kilometer .
		
	track := Track withSectors: sectors.
	car1 := FormulaOneCar drivenBy: #Schumacher.
	car2 := FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:18:32' prior: 50641476!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 temporaryVariable |
	
	sectors := OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (Sector withoutTurboOf: 20 * kilometer).
		
	temporaryVariable := Sector withoutTurboOf: 20 * kilometer
	 .
		
	track := Track withSectors: sectors.
	car1 := FormulaOneCar drivenBy: #Schumacher.
	car2 := FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:19:13'!
twentyKilometerWithoutTurboSector

	^ Sector withoutTurboOf: 20 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:19:13' prior: 50641264!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors

	| sectors track |
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
	track _ Track withSectors: sectors.
	
	self assert: 30 * kilometer equals: 	track length! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:19:13' prior: 50641193!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
	
	track _ Track withSectors: sectors.
	outside _ track length + (1 * millimeter).
	car _ FormulaOneCar drivenBy: #Schumacher.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:19:13' prior: 50641276!
test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps

	| track grandPrix numberOfLaps |
	
	track _ Track withSectors: (OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector)).
	numberOfLaps _ 100.
	
	grandPrix _ GrandPrix on: track running: numberOfLaps.
	
	self assert: track length * numberOfLaps	 equals: grandPrix length
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:19:13' prior: 50641213!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:19:13' prior: 50641311!
test12CarCannotBeInMoreThanOneSectorAtATime

	| sectors track car |
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
	
	track _ Track withSectors: sectors.
	car _ FormulaOneCar drivenBy: #Schumacher.

	track put: car at: 5 * kilometer.
	track put: car at: 15 * kilometer.
	
	self assert: sectors second equals: (track sectorOf: car).
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car)
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:19:13' prior: 50641330!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
		
	positionInSector2 _ 5 * kilometer.
	positionInTrack _ sectors first length + positionInSector2.
	
	track _ Track withSectors: sectors.
	car _ FormulaOneCar drivenBy: #Schumacher.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:19:13' prior: 50641354!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:19:13' prior: 50641500!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 temporaryVariable |
	
	sectors := OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
		
	temporaryVariable := Sector withoutTurboOf: 20 * kilometer
	 .
		
	track := Track withSectors: sectors.
	car1 := FormulaOneCar drivenBy: #Schumacher.
	car2 := FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:19:13' prior: 50641662!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 temporaryVariable |
	
	sectors := OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
		
	temporaryVariable := self twentyKilometerWithoutTurboSector
	 .
		
	track := Track withSectors: sectors.
	car1 := FormulaOneCar drivenBy: #Schumacher.
	car2 := FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:19:13' prior: 50641412!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	verstappen speed: 0* kilometer / hour.
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:19:35' prior: 50641686!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors := OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
		
	track := Track withSectors: sectors.
	car1 := FormulaOneCar drivenBy: #Schumacher.
	car2 := FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:13' prior: 50640079!
test03CarCannotActivateTurboInNonTurboSector

	| car sector |

	sector := Sector withoutTurboOf: 10*kilometer.
	car := FormulaOneCar drivenBy: #Schumacher
	.
	
	sector atStartPut: car.
	
	self should: [ car activateTurbo ]
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector turboNotAllowedErrorDescription equals: error messageText.
			self deny: car isTurboActivated]
	! !

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 15:57:14'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:32'!
schumacherCar

	^ FormulaOneCar drivenBy: #Schumacher! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:32' prior: 50641025!
test24CanNotActivateTurboWhenTurboIsActivated

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := self schumacherCar.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:32' prior: 50641541!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
	
	track _ Track withSectors: sectors.
	outside _ track length + (1 * millimeter).
	car _ self schumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:32' prior: 50640115!
test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.95 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:32' prior: 50640425!
test21SecondTurboSpeedsByTenPercent

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 110 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:32' prior: 50640445!
test22ThirdTurboSpeedsByFivePercent

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 105 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:33' prior: 50640094!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 20 * kilometer.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:33' prior: 50640405!
test20FirstTurboIncrementsSpeedByTwentyPercent

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:33' prior: 50641618!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
		
	positionInSector2 _ 5 * kilometer.
	positionInTrack _ sectors first length + positionInSector2.
	
	track _ Track withSectors: sectors.
	car _ self schumacherCar.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:33' prior: 50641599!
test12CarCannotBeInMoreThanOneSectorAtATime

	| sectors track car |
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
	
	track _ Track withSectors: sectors.
	car _ self schumacherCar.

	track put: car at: 5 * kilometer.
	track put: car at: 15 * kilometer.
	
	self assert: sectors second equals: (track sectorOf: car).
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car)
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:33' prior: 50641753!
test03CarCannotActivateTurboInNonTurboSector

	| car sector |

	sector := Sector withoutTurboOf: 10*kilometer.
	car := self schumacherCar
	.
	
	sector atStartPut: car.
	
	self should: [ car activateTurbo ]
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector turboNotAllowedErrorDescription equals: error messageText.
			self deny: car isTurboActivated]
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:33' prior: 50640466!
test23AfterThridTurbo_TurboIsExhausted

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	
	
	self assert: schumacher isTurboActivated.
	self assert: 100 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:33' prior: 50641732!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors := OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
		
	track := Track withSectors: sectors.
	car1 := self schumacherCar.
	car2 := FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:33' prior: 50641395!
test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength

	| sector  outside car |
	
	sector _ self tenKilometerTurboSector.
	outside _ sector length + (1 * millimeter).
	car _ self schumacherCar.
	
	self 
		should: [ sector put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (sector includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:33' prior: 50641068!
test25CanNotDeactivateTurboWhenIsDeactivated

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := self schumacherCar.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
		
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadydeActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:57:33' prior: 50640133!
test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.9 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self should: [schumacher activateTurbo]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error |
			self 
				assert: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription 
				equals: error messageText.
			self deny: schumacher isTurboActivated]
			! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:11' prior: 50641965!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 20 * kilometer.
	
	schumacher := self schumacherCar.
	hamilton := FormulaOneCar drivenBy: #Hamilton
	
	.
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:19'!
hamiltonCar

	^ FormulaOneCar drivenBy: #Hamilton! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:19' prior: 50641906!
test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.95 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:19' prior: 50641924!
test21SecondTurboSpeedsByTenPercent

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 110 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:19' prior: 50641944!
test22ThirdTurboSpeedsByFivePercent

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 105 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:19' prior: 50642168!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 20 * kilometer.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar
	
	.
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:19' prior: 50641986!
test20FirstTurboIncrementsSpeedByTwentyPercent

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:19' prior: 50641291!
test14TwoCarsCanBeAtTheSameDistanceFromStart

	| grandPrix hamilton verstappen |
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self tenKilometerTurboSector)))
		running: 100.
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	hamilton _ self hamiltonCar.	
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix put: hamilton at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert:  5 * kilometer equals: (grandPrix locationOf: hamilton). 
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:19' prior: 50642143!
test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.9 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self should: [schumacher activateTurbo]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error |
			self 
				assert: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription 
				equals: error messageText.
			self deny: schumacher isTurboActivated]
			! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:19' prior: 50642063!
test23AfterThridTurbo_TurboIsExhausted

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	
	
	self assert: schumacher isTurboActivated.
	self assert: 100 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:19' prior: 50641865!
test24CanNotActivateTurboWhenTurboIsActivated

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:19' prior: 50642122!
test25CanNotDeactivateTurboWhenIsDeactivated

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
		
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadydeActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:23' prior: 50642252!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 20 * kilometer.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:44' prior: 50642398!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 20 * kilometer
	
	.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:59'!
twentyKilometerTurboSector

	^ Sector withTurboOf: 20 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:58:59' prior: 50642418!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector := self twentyKilometerTurboSector
	
	.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 15:59:05' prior: 50642443!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector := self twentyKilometerTurboSector.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 15:59:07'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:00:30' prior: 50642311!
test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer
	
	.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.9 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self should: [schumacher activateTurbo]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error |
			self 
				assert: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription 
				equals: error messageText.
			self deny: schumacher isTurboActivated]
			! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:01:09'!
twentyfourKilometerTurboSector

	^ Sector withTurboOf: 24 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:01:09' prior: 50642272!
test20FirstTurboIncrementsSpeedByTwentyPercent

	| schumacher hamilton sector |
	
	sector _ self twentyfourKilometerTurboSector.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:01:09' prior: 50642193!
test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ self twentyfourKilometerTurboSector.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.95 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:01:09' prior: 50642575!
test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector := self twentyfourKilometerTurboSector
	
	.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.9 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self should: [schumacher activateTurbo]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error |
			self 
				assert: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription 
				equals: error messageText.
			self deny: schumacher isTurboActivated]
			! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:01:09' prior: 50642335!
test23AfterThridTurbo_TurboIsExhausted

	| schumacher hamilton sector |
	
	sector _ self twentyfourKilometerTurboSector.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	
	
	self assert: schumacher isTurboActivated.
	self assert: 100 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:01:09' prior: 50642357!
test24CanNotActivateTurboWhenTurboIsActivated

	| schumacher hamilton sector |
	
	sector := self twentyfourKilometerTurboSector.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:01:09' prior: 50642211!
test21SecondTurboSpeedsByTenPercent

	| schumacher hamilton sector |
	
	sector _ self twentyfourKilometerTurboSector.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 110 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:01:09' prior: 50642378!
test25CanNotDeactivateTurboWhenIsDeactivated

	| schumacher hamilton sector |
	
	sector := self twentyfourKilometerTurboSector.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
		
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadydeActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:01:09' prior: 50642231!
test22ThirdTurboSpeedsByFivePercent

	| schumacher hamilton sector |
	
	sector _ self twentyfourKilometerTurboSector.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 105 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:01:15' prior: 50642641!
test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector := self twentyfourKilometerTurboSector.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.9 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self should: [schumacher activateTurbo]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error |
			self 
				assert: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription 
				equals: error messageText.
			self deny: schumacher isTurboActivated]
			! !

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 16:01:16'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:02:17' prior: 50641434!
test15ACarStoppedShouldNotMoveAfterSomeTime

	| grandPrix verstappen |
	
	verstappen := FormulaOneCar drivenBy: #Verstappen
	
	.
	verstappen speed: 0 * kilometer / hour.
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self tenKilometerTurboSector)))
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix advance: 10 * minute.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen) 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:02:30'!
verstappenCar

	^ FormulaOneCar drivenBy: #Verstappen! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:02:30' prior: 50641576!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:02:30' prior: 50642291!
test14TwoCarsCanBeAtTheSameDistanceFromStart

	| grandPrix hamilton verstappen |
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self tenKilometerTurboSector)))
		running: 100.
	
	verstappen _ self verstappenCar.
	hamilton _ self hamiltonCar.	
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix put: hamilton at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert:  5 * kilometer equals: (grandPrix locationOf: hamilton). 
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:02:30' prior: 50641642!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:02:30' prior: 50641236!
test19GrandPrixMovesCarsBetweenSectors

	| grandPrix verstappen sectorA sectorB |
	
	verstappen _ self verstappenCar.
	sectorA _ self tenKilometerTurboSector.
	sectorB _ Sector withTurboOf: 30 * kilometer.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: sectorA with: sectorB))
		running: 100
		with: (Set new add: verstappen; yourself).
		
	grandPrix put: verstappen at: 5 * kilometer.

	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorA equals: (grandPrix sectorOf: verstappen).
	
	verstappen speed: 15 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 20 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorB equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:02:30' prior: 50642085!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors := OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
		
	track := Track withSectors: sectors.
	car1 := self schumacherCar.
	car2 := self verstappenCar.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:02:30' prior: 50641710!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	verstappen speed: 0* kilometer / hour.
	
	sectors _ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:02:30' prior: 50642887!
test15ACarStoppedShouldNotMoveAfterSomeTime

	| grandPrix verstappen |
	
	verstappen := self verstappenCar
	
	.
	verstappen speed: 0 * kilometer / hour.
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self tenKilometerTurboSector)))
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix advance: 10 * minute.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen) 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:03:35' prior: 50642972!
test19GrandPrixMovesCarsBetweenSectors

	| grandPrix verstappen sectorA sectorB |
	
	verstappen := self verstappenCar.
	sectorA := self tenKilometerTurboSector.
	sectorB := Sector withTurboOf: 30 * kilometer
	
	.
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: sectorA with: sectorB))
		running: 100
		with: (Set new add: verstappen; yourself).
		
	grandPrix put: verstappen at: 5 * kilometer.

	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorA equals: (grandPrix sectorOf: verstappen).
	
	verstappen speed: 15 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 20 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorB equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:03:54'!
thirtyKilometerTurboSector

	^ Sector withTurboOf: 30 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:03:54' prior: 50643058!
test19GrandPrixMovesCarsBetweenSectors

	| grandPrix verstappen sectorA sectorB |
	
	verstappen := self verstappenCar.
	sectorA := self tenKilometerTurboSector.
	sectorB := self thirtyKilometerTurboSector
	
	.
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: sectorA with: sectorB))
		running: 100
		with: (Set new add: verstappen; yourself).
		
	grandPrix put: verstappen at: 5 * kilometer.

	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorA equals: (grandPrix sectorOf: verstappen).
	
	verstappen speed: 15 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 20 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorB equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:03:59' prior: 50643090!
test19GrandPrixMovesCarsBetweenSectors

	| grandPrix verstappen sectorA sectorB |
	
	verstappen := self verstappenCar.
	sectorA := self tenKilometerTurboSector.
	sectorB := self thirtyKilometerTurboSector.
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: sectorA with: sectorB))
		running: 100
		with: (Set new add: verstappen; yourself).
		
	grandPrix put: verstappen at: 5 * kilometer.

	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorA equals: (grandPrix sectorOf: verstappen).
	
	verstappen speed: 15 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 20 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorB equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:10:10' prior: 50641529!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors

	| sectors track |
	
	sectors := OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector)
		
		.
	track := Track withSectors: sectors.
	
	self assert: 30 * kilometer equals: 	track length! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:10:31'!
twoParticularSectors

	^ OrderedCollection 
		with: (self tenKilometerTurboSector)
		with: (self twentyKilometerWithoutTurboSector)! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:10:31' prior: 50643144!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors

	| sectors track |
	
	sectors := self twoParticularSectors
		
		.
	track := Track withSectors: sectors.
	
	self assert: 30 * kilometer equals: 	track length! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:10:31' prior: 50641886!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors _ self twoParticularSectors.
	
	track _ Track withSectors: sectors.
	outside _ track length + (1 * millimeter).
	car _ self schumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:10:31' prior: 50641561!
test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps

	| track grandPrix numberOfLaps |
	
	track _ Track withSectors: (self twoParticularSectors).
	numberOfLaps _ 100.
	
	grandPrix _ GrandPrix on: track running: numberOfLaps.
	
	self assert: track length * numberOfLaps	 equals: grandPrix length
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:10:31' prior: 50642910!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	
	sectors _ self twoParticularSectors.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:10:31' prior: 50642030!
test12CarCannotBeInMoreThanOneSectorAtATime

	| sectors track car |
	
	sectors _ self twoParticularSectors.
	
	track _ Track withSectors: sectors.
	car _ self schumacherCar.

	track put: car at: 5 * kilometer.
	track put: car at: 15 * kilometer.
	
	self assert: sectors second equals: (track sectorOf: car).
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car)
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:10:31' prior: 50642006!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors _ self twoParticularSectors.
		
	positionInSector2 _ 5 * kilometer.
	positionInTrack _ sectors first length + positionInSector2.
	
	track _ Track withSectors: sectors.
	car _ self schumacherCar.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:10:31' prior: 50642952!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	
	sectors _ self twoParticularSectors.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:10:31' prior: 50642999!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors := self twoParticularSectors.
		
	track := Track withSectors: sectors.
	car1 := self schumacherCar.
	car2 := self verstappenCar.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:10:31' prior: 50643019!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	verstappen speed: 0* kilometer / hour.
	
	sectors _ self twoParticularSectors.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:10:52' prior: 50643163!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors

	| track |
	
	track := Track withSectors: self twoParticularSectors.
	
	self assert: 30 * kilometer equals: 	track length! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:11:16' prior: 50643173!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| track car outside |
	
	track := Track withSectors: self twoParticularSectors.
	outside := track length + (1 * millimeter).
	car := self schumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 16:11:17'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:11:26' prior: 50643239!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors := self twoParticularSectors.
		
	positionInSector2 := 5 * kilometer.
	positionInTrack := sectors first length + positionInSector2.
	
	track := Track withSectors: sectors.
	car := self schumacherCar.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:11:41' prior: 50643223!
test12CarCannotBeInMoreThanOneSectorAtATime

	| sectors track car |
	
	sectors := self twoParticularSectors.
	
	track := Track withSectors: sectors.
	car := self schumacherCar.

	track put: car at: 5 * kilometer.
	track put: car at: 15 * kilometer.
	
	self assert: sectors second equals: (track sectorOf: car).
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car)
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:13:32' prior: 50643322!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| track car outside |
	
	track := Track withSectors: self twoParticularSectors
	
	.
	outside := track length + (1 * millimeter).
	car := self schumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:16:22' prior: 50643190!
test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps

	| track grandPrix numberOfLaps |
	
	track := Track withSectors: self twoParticularSectors.
	numberOfLaps := 100.
	
	grandPrix := GrandPrix on: track running: numberOfLaps.
	
	self assert: track length * numberOfLaps	 equals: grandPrix length
	! !

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 16:16:22'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:17:03'!
trackWithTwoParticularSectors

	^ Track withSectors: self twoParticularSectors! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:17:03' prior: 50643313!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors

	| track |
	
	track := self trackWithTwoParticularSectors.
	
	self assert: 30 * kilometer equals: 	track length! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:17:03' prior: 50643468!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| track car outside |
	
	track := self trackWithTwoParticularSectors
	
	.
	outside := track length + (1 * millimeter).
	car := self schumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:17:03' prior: 50643485!
test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps

	| track grandPrix numberOfLaps |
	
	track := self trackWithTwoParticularSectors.
	numberOfLaps := 100.
	
	grandPrix := GrandPrix on: track running: numberOfLaps.
	
	self assert: track length * numberOfLaps	 equals: grandPrix length
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:17:08' prior: 50643603!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| track car outside |
	
	track := self trackWithTwoParticularSectors.
	outside := track length + (1 * millimeter).
	car := self schumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:17:37' prior: 50643040!
test15ACarStoppedShouldNotMoveAfterSomeTime

	| grandPrix verstappen |
	
	verstappen := self verstappenCar.
	verstappen speed: 0 * kilometer / hour.
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self tenKilometerTurboSector)))
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix advance: 10 * minute.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen) 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:34:25'!
assertSpeedIs: anExpectedSpeed after: aTurboAvailableCarBlock

	| schumacher hamilton sector |
	
	sector := self twentyfourKilometerTurboSector.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	aTurboAvailableCarBlock value: schumacher.
	
	self assert: schumacher isTurboActivated.
	self assert: anExpectedSpeed equals: schumacher speed.! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 16:34:26'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:36:59' prior: 50642604!
test20FirstTurboIncrementsSpeedByTwentyPercent


	"self assertSpeedIs: 120 * kilometer / hour after: [ :aTurboAvailableCar |  aTurboAvailableCar activateTurbo ].
	
	sector := self twentyfourKilometerTurboSector.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed."! !

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 16:37:01'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:37:14' prior: 50643772!
test20FirstTurboIncrementsSpeedByTwentyPercent


	self assertSpeedIs: 120 * kilometer / hour after: [ :aTurboAvailableCar |  aTurboAvailableCar activateTurbo ].
	
	"sector := self twentyfourKilometerTurboSector.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed."! !

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 16:37:16'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:37:29' prior: 50643886!
test20FirstTurboIncrementsSpeedByTwentyPercent

	self assertSpeedIs: 120 * kilometer / hour after: [ :aTurboAvailableCar |  aTurboAvailableCar activateTurbo ].
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:38:22' prior: 50642709!
test21SecondTurboSpeedsByTenPercent

	self assertSpeedIs: 110 * kilometer / hour after: [ :aTurboAvailableCar |  aTurboAvailableCar activateTurbo; deactivateTurbo; activateTurbo ].
	
	"sector := self twentyfourKilometerTurboSector.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 110 * kilometer / hour equals: schumacher speed."! !

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 16:38:23'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:38:37' prior: 50644008!
test21SecondTurboSpeedsByTenPercent

	self assertSpeedIs: 110 * kilometer / hour after: [ :aTurboAvailableCar |  aTurboAvailableCar activateTurbo deactivateTurbo activateTurbo ].
! !

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 16:38:38'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:39:23' prior: 50642749!
test22ThirdTurboSpeedsByFivePercent

	self assertSpeedIs: 105 * kilometer / hour after: [ :aTurboAvailableCar |  aTurboAvailableCar activateTurbo deactivateTurbo activateTurbo deactivateTurbo activateTurbo].

	"sector := self twentyfourKilometerTurboSector.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 105 * kilometer / hour equals: schumacher speed."! !

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 16:39:24'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:39:41' prior: 50644223!
test22ThirdTurboSpeedsByFivePercent

	self assertSpeedIs: 105 * kilometer / hour after: [ :aTurboAvailableCar |  aTurboAvailableCar activateTurbo deactivateTurbo activateTurbo deactivateTurbo activateTurbo].! !

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 16:39:43'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:58:12' prior: 50642666!
test23AfterThridTurbo_TurboIsExhausted

	self assertSpeedIs: 100 * kilometer / hour after: [ :aTurboAvailableCar |  aTurboAvailableCar  activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.].
	! !

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 16:58:14'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:58:37' prior: 50644441!
test23AfterThridTurbo_TurboIsExhausted

	self
		assertSpeedIs: 100 * kilometer / hour
		after: [ :aTurboAvailableCar |  aTurboAvailableCar  activateTurbo deactivateTurbo activateTurbo deactivateTurbo activateTurbo deactivateTurbo activateTurbo]
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:58:45' prior: 50644340!
test22ThirdTurboSpeedsByFivePercent

	self
		assertSpeedIs: 105 * kilometer / hour
		after: [ :aTurboAvailableCar |  aTurboAvailableCar activateTurbo deactivateTurbo activateTurbo deactivateTurbo activateTurbo]! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:58:53' prior: 50644123!
test21SecondTurboSpeedsByTenPercent

	self
		assertSpeedIs: 110 * kilometer / hour
		after: [ :aTurboAvailableCar |  aTurboAvailableCar activateTurbo deactivateTurbo activateTurbo ]
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:58:59' prior: 50644000!
test20FirstTurboIncrementsSpeedByTwentyPercent

	self
		assertSpeedIs: 120 * kilometer / hour
		after: [ :aTurboAvailableCar |  aTurboAvailableCar activateTurbo ].
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 16:59:01' prior: 50644574!
test20FirstTurboIncrementsSpeedByTwentyPercent

	self
		assertSpeedIs: 120 * kilometer / hour
		after: [ :aTurboAvailableCar |  aTurboAvailableCar activateTurbo ]
! !
!FormulaOneTest methodsFor: 'assertions' stamp: 'WAL 5/6/2023 17:27:59'!
withTurboAvailableCarDo: aBlock

	| schumacher hamilton sector |
	
	sector := self twentyfourKilometerTurboSector.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	aBlock value: schumacher.! !
!FormulaOneTest methodsFor: 'assertions' stamp: 'WAL 5/6/2023 17:29:24' prior: 50643664!
assertSpeedIs: anExpectedSpeed after: aTurboAvailableCarBlock

	"self withTurboAvailableCarDo: aBlock."
	
	| schumacher hamilton sector |
	
	sector := self twentyfourKilometerTurboSector.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	aTurboAvailableCarBlock value: schumacher.
	
	self assert: schumacher isTurboActivated.
	self assert: anExpectedSpeed equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'assertions' stamp: 'WAL 5/6/2023 17:30:56' prior: 50644606!
assertSpeedIs: anExpectedSpeed after: aTurboAvailableCarBlock

	self withTurboAvailableCarDo: [ : schumacher |
	
		aTurboAvailableCarBlock value: schumacher.
		
		self assert: schumacher isTurboActivated.
		self assert: anExpectedSpeed equals: schumacher speed
		
	]! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 17:30:57'!
PASSED!
!FormulaOneTest methodsFor: 'assertions' stamp: 'WAL 5/6/2023 17:32:08' prior: 50644627!
assertSpeedIs: anExpectedSpeed after: aTurboAvailableCarBlock

	self withTurboAvailableCarDo: [ : turboAvailableCar |
	
		aTurboAvailableCarBlock value: turboAvailableCar.
		
		self assert: turboAvailableCar isTurboActivated.
		self assert: anExpectedSpeed equals: turboAvailableCar speed
		
	]! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 17:32:12'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 17:33:31' prior: 50642688!
test24CanNotActivateTurboWhenTurboIsActivated

	self withTurboAvailableCarDo: [ : schumacher |
	
		schumacher activateTurbo.
		
		self 
			should: [ schumacher activateTurbo ]
			raise: Error - MessageNotUnderstood 
			withMessageText: schumacher turboAlreadyActivatedErrorDescription
	]
		! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 17:33:54'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 17:34:15' prior: 50644828!
test24CanNotActivateTurboWhenTurboIsActivated

	self withTurboAvailableCarDo: [ : aTurboAvailableCar |
	
		aTurboAvailableCar activateTurbo.
		
		self 
			should: [ aTurboAvailableCar activateTurbo ]
			raise: Error - MessageNotUnderstood 
			withMessageText: aTurboAvailableCar turboAlreadyActivatedErrorDescription
	]
		! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 17:35:27' prior: 50642729!
test25CanNotDeactivateTurboWhenIsDeactivated

	self withTurboAvailableCarDo: [ : schumacher |
	
		self 
			should: [ schumacher deactivateTurbo ]
			raise: Error - MessageNotUnderstood 
			withMessageText: schumacher turboAlreadydeActivatedErrorDescription
		
	]! !

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 17:35:27'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 17:35:28'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 17:35:28'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 17:35:28'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 17:35:28'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 17:35:28'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 17:35:28'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 17:35:28'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 17:35:42'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 17:35:52' prior: 50644942!
test25CanNotDeactivateTurboWhenIsDeactivated

	self withTurboAvailableCarDo: [ : aTurboAvailableCar |
	
		self 
			should: [ aTurboAvailableCar deactivateTurbo ]
			raise: Error - MessageNotUnderstood 
			withMessageText: aTurboAvailableCar turboAlreadydeActivatedErrorDescription
		
	]! !

Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed turboActivated turboState traveledDistance currentSector turboActivations'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #FormulaOneCar category: 'ISW1-2022-1C-Parcial-1' stamp: 'WAL 5/6/2023 17:41:47'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed turboActivated turboState traveledDistance currentSector turboActivations'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

TestCase subclass: #TurboState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboState category: 'ISW1-2022-1C-Parcial-1' stamp: 'WAL 5/6/2023 17:42:13'!
TestCase subclass: #TurboState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

TurboState subclass: #TurboActivated
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboActivated category: 'ISW1-2022-1C-Parcial-1' stamp: 'WAL 5/6/2023 17:42:48'!
TurboState subclass: #TurboActivated
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

TurboState subclass: #TurboDeactivated
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboDeactivated category: 'ISW1-2022-1C-Parcial-1' stamp: 'WAL 5/6/2023 17:42:58'!
TurboState subclass: #TurboDeactivated
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!TurboState methodsFor: 'no messages' stamp: 'WAL 5/6/2023 17:43:35'!
activateTurbo

	self subclassResponsibility 
! !
!TurboActivated methodsFor: 'no messages' stamp: 'WAL 5/6/2023 17:44:11' overrides: 50645200!
activateTurbo

	self error: self turboAlreadyActivatedErrorDescription.! !
!TurboState methodsFor: 'error descriptions' stamp: 'WAL 5/6/2023 17:45:13'!
turboAlreadyActivatedErrorDescription
	
	^'Turbo already activated'! !

Sector subclass: #SectorWithTurbo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #SectorWithTurbo category: 'ISW1-2022-1C-Parcial-1' stamp: 'WAL 5/6/2023 17:49:53'!
Sector subclass: #SectorWithTurbo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Sector subclass: #SectorWithoutTurbo
	instanceVariableNames: 'cars length withTurbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Sector subclass: #SectorWithoutTurbo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #SectorWithoutTurbo category: 'ISW1-2022-1C-Parcial-1' stamp: 'WAL 5/6/2023 17:50:16'!
Sector subclass: #SectorWithoutTurbo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!SectorWithTurbo methodsFor: 'turbo' stamp: 'WAL 5/6/2023 17:51:17' overrides: 50640790!
activateTurboTo: aCarToActivateTurboTo

	| positionOfCarAhead |

	withTurbo ifFalse: [	self error: Sector turboNotAllowedErrorDescription].
	
	positionOfCarAhead _ self 
		positionOfCarAheadOf: aCarToActivateTurboTo 
		ifNone: [self error: Sector cannotActivateTurboWhenNoCarAheadErrorDescription ].
		
	self 
		assertDriverIsOneSecondOrLess: aCarToActivateTurboTo
		ofDriverAt: positionOfCarAhead.

	aCarToActivateTurboTo activateTurboInSectorWithTurbo
! !
!SectorWithoutTurbo methodsFor: 'turbo' stamp: 'WAL 5/6/2023 17:51:17' overrides: 50640790!
activateTurboTo: aCarToActivateTurboTo

	| positionOfCarAhead |

	withTurbo ifFalse: [	self error: Sector turboNotAllowedErrorDescription].
	
	positionOfCarAhead _ self 
		positionOfCarAheadOf: aCarToActivateTurboTo 
		ifNone: [self error: Sector cannotActivateTurboWhenNoCarAheadErrorDescription ].
		
	self 
		assertDriverIsOneSecondOrLess: aCarToActivateTurboTo
		ofDriverAt: positionOfCarAhead.

	aCarToActivateTurboTo activateTurboInSectorWithTurbo
! !

!methodRemoval: Sector #activateTurboTo: stamp: 'WAL 5/6/2023 17:51:17'!
activateTurboTo: aCarToActivateTurboTo

	| positionOfCarAhead |

	withTurbo ifFalse: [	self error: Sector turboNotAllowedErrorDescription].
	
	positionOfCarAhead _ self 
		positionOfCarAheadOf: aCarToActivateTurboTo 
		ifNone: [self error: Sector cannotActivateTurboWhenNoCarAheadErrorDescription ].
		
	self 
		assertDriverIsOneSecondOrLess: aCarToActivateTurboTo
		ofDriverAt: positionOfCarAhead.

	aCarToActivateTurboTo activateTurboInSectorWithTurbo
!
!Sector methodsFor: 'car position' stamp: 'WAL 5/6/2023 17:51:39'!
activateTurboTo: aCarToActivateTurboTo

	self subclassResponsibility ! !
!SectorWithoutTurbo methodsFor: 'turbo' stamp: 'WAL 5/6/2023 17:52:08' prior: 50645264 overrides: 50645297!
activateTurboTo: aCarToActivateTurboTo

	self error: Sector turboNotAllowedErrorDescription! !
!SectorWithTurbo methodsFor: 'turbo' stamp: 'WAL 5/6/2023 17:52:17' prior: 50645246 overrides: 50645297!
activateTurboTo: aCarToActivateTurboTo

	| positionOfCarAhead |

	positionOfCarAhead := self 
		positionOfCarAheadOf: aCarToActivateTurboTo 
		ifNone: [self error: Sector cannotActivateTurboWhenNoCarAheadErrorDescription ].
		
	self 
		assertDriverIsOneSecondOrLess: aCarToActivateTurboTo
		ofDriverAt: positionOfCarAhead.

	aCarToActivateTurboTo activateTurboInSectorWithTurbo
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 17:52:30'!
FAILURE!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 17:52:30'!
FAILURE!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:52:30'!
ERROR!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:52:30'!
FAILURE!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 17:52:30'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 17:52:30'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 17:52:30'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 17:52:30'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 17:52:30'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 17:52:30'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 17:52:49'!
FAILURE!
!Sector class methodsFor: 'instance creation' stamp: 'WAL 5/6/2023 17:56:34' prior: 50640849!
withTurboOf: aLength 

	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.

	^ SectorWithTurbo new initializeOf: aLength; withTurbo: true; yourself ! !
!Sector class methodsFor: 'instance creation' stamp: 'WAL 5/6/2023 17:56:49' prior: 50640858!
withoutTurboOf: aLength 
	
	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.
		
	^ SectorWithoutTurbo new initializeOf: aLength; withTurbo: false; yourself ! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 17:56:53'!
PASSED!

!classRenamed: #SectorWithoutTurbo as: #TurboSector stamp: 'WAL 5/6/2023 17:57:17'!
Smalltalk renameClassNamed: #SectorWithoutTurbo as: #TurboSector!
!Sector class methodsFor: 'as yet unclassified' stamp: 'WAL 5/6/2023 17:57:17' prior: 50645427!
withoutTurboOf: aLength 
	
	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.
		
	^ TurboSector new initializeOf: aLength; withTurbo: false; yourself ! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 17:58:44'!
PASSED!

!classRenamed: #TurboSector as: #NoTurboSector stamp: 'WAL 5/6/2023 17:59:14'!
Smalltalk renameClassNamed: #TurboSector as: #NoTurboSector!
!Sector class methodsFor: 'as yet unclassified' stamp: 'WAL 5/6/2023 17:59:14' prior: 50645530!
withoutTurboOf: aLength 
	
	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.
		
	^ NoTurboSector new initializeOf: aLength; withTurbo: false; yourself ! !

----SNAPSHOT----(6 May 2023 17:59:36) CuisUniversity-5706.image priorSource: 9868337!

----STARTUP---- (6 May 2023 17:59:55) as /home/a/s/sw/smalltalk1/CuisUniversity-5706.image!


!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 18:01:32'!
PASSED!
!Sector class methodsFor: 'instance creation' stamp: 'WAL 5/6/2023 18:05:18' prior: 50645417!
withTurboOf: aLength 

	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.

	^ SectorWithTurbo new initializeOf: aLength! !
!Sector class methodsFor: 'instance creation' stamp: 'WAL 5/6/2023 18:05:25' prior: 50645632!
withoutTurboOf: aLength 
	
	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.
		
	^ NoTurboSector new initializeOf: aLength! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 18:05:34'!
PASSED!

Object subclass: #Sector
	instanceVariableNames: 'cars length'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #Sector category: 'ISW1-2022-1C-Parcial-1' stamp: 'WAL 5/6/2023 18:06:12'!
Object subclass: #Sector
	instanceVariableNames: 'cars length'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 18:06:17'!
PASSED!

!methodRemoval: Sector #withTurbo: stamp: 'WAL 5/6/2023 18:06:49'!
withTurbo: aBoolean
 
	withTurbo _ aBoolean.
!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 18:06:55'!
PASSED!
!Sector class methodsFor: 'instance creation' stamp: 'WAL 5/6/2023 18:08:20'!
lengthIsValid: aLength

	^ aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]! !
!Sector class methodsFor: 'instance creation' stamp: 'WAL 5/6/2023 18:08:20' prior: 50645736!
withTurboOf: aLength 

	self lengthIsValid: aLength	.

	^ SectorWithTurbo new initializeOf: aLength! !
!Sector class methodsFor: 'instance creation' stamp: 'WAL 5/6/2023 18:08:20' prior: 50645745!
withoutTurboOf: aLength 
	
	self lengthIsValid: aLength	.
		
	^ NoTurboSector new initializeOf: aLength! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 18:08:32'!
PASSED!
!Sector class methodsFor: 'instance creation' stamp: 'WAL 5/6/2023 18:27:13'!
of: aLength 

	self lengthIsValid: aLength	.

	^ self new initializeOf: aLength! !
!Sector class methodsFor: 'instance creation' stamp: 'WAL 5/6/2023 18:28:05' prior: 50646041!
withTurboOf: aLength 

	self lengthIsValid: aLength	.

	^ SectorWithTurbo of: aLength! !
!Sector class methodsFor: 'instance creation' stamp: 'WAL 5/6/2023 18:28:10' prior: 50646048!
withoutTurboOf: aLength 
	
	self lengthIsValid: aLength	.
		
	^ NoTurboSector of: aLength! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 18:28:12'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 18:34:33'!
PASSED!
!Sector class methodsFor: 'instance creation' stamp: 'WAL 5/6/2023 18:35:05' prior: 50646149!
withTurboOf: aLength 

	^ SectorWithTurbo of: aLength! !
!Sector class methodsFor: 'instance creation' stamp: 'WAL 5/6/2023 18:35:11' prior: 50646155!
withoutTurboOf: aLength 
	
	^ NoTurboSector of: aLength! !

!methodRemoval: Sector class #withTurboOf: stamp: 'WAL 5/6/2023 18:37:05'!
withTurboOf: aLength 

	^ SectorWithTurbo of: aLength!
!FormulaOneTest methodsFor: 'sectors' stamp: 'WAL 5/6/2023 18:37:05' prior: 50641188!
tenKilometerTurboSector

	^ SectorWithTurbo of: 10 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 18:37:05' prior: 50640054!
test01SectorLengthMustBePositive

	self 
		should: [  SectorWithTurbo of: 0 * kilometer.]
		raise: Error
		withMessageText: Sector lengthMustBePositiveErrorDescription! !
!FormulaOneTest methodsFor: 'sectors' stamp: 'WAL 5/6/2023 18:37:05' prior: 50642438!
twentyKilometerTurboSector

	^ SectorWithTurbo of: 20 * kilometer! !
!FormulaOneTest methodsFor: 'sectors' stamp: 'WAL 5/6/2023 18:37:05' prior: 50643085!
thirtyKilometerTurboSector

	^ SectorWithTurbo of: 30 * kilometer! !
!FormulaOneTest methodsFor: 'sectors' stamp: 'WAL 5/6/2023 18:37:05' prior: 50642599!
twentyfourKilometerTurboSector

	^ SectorWithTurbo of: 24 * kilometer! !

!methodRemoval: Sector class #withoutTurboOf: stamp: 'WAL 5/6/2023 18:37:14'!
withoutTurboOf: aLength 
	
	^ NoTurboSector of: aLength!
!FormulaOneTest methodsFor: 'tests' stamp: 'WAL 5/6/2023 18:37:14' prior: 50642048!
test03CarCannotActivateTurboInNonTurboSector

	| car sector |

	sector :=  NoTurboSector of: 10*kilometer.
	car := self schumacherCar
	.
	
	sector atStartPut: car.
	
	self should: [ car activateTurbo ]
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector turboNotAllowedErrorDescription equals: error messageText.
			self deny: car isTurboActivated]
	! !
!FormulaOneTest methodsFor: 'sectors' stamp: 'WAL 5/6/2023 18:37:14' prior: 50641523!
twentyKilometerWithoutTurboSector

	^ NoTurboSector of: 20 * kilometer! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 18:37:28'!
PASSED!
!FormulaOneCar methodsFor: 'initialization' stamp: 'WAL 5/6/2023 22:05:14' prior: 50640547!
initializeDrivenBy: aDriver 

	driver := aDriver.
	turboActivated := false.
	turboState := TurboActivated new.
	turboActivations := 0.
	speed := 0*kilometer/hour.
	traveledDistance := 0.
	! !
!FormulaOneCar methodsFor: 'initialization' stamp: 'WAL 5/6/2023 22:05:33' prior: 50646495!
initializeDrivenBy: aDriver 

	driver := aDriver.
	turboActivated := false.
	turboState := TurboDeactivated new.
	turboActivations := 0.
	speed := 0*kilometer/hour.
	traveledDistance := 0.
	! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'WAL 5/6/2023 22:09:28' prior: 50640591!
activateTurbo

	turboActivated ifTrue: [
		self error: self turboAlreadyActivatedErrorDescription
	].
	
	currentSector activateTurboTo: self.
! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'WAL 5/6/2023 22:41:38' prior: 50646513!
activateTurbo

	turboState  activateOn: self.! !

!methodRemoval: TurboState #activateTurbo stamp: 'WAL 5/6/2023 22:42:56'!
activateTurbo

	self subclassResponsibility 
!
!FormulaOneCar methodsFor: 'turbo' stamp: 'WAL 5/6/2023 22:43:15' prior: 50646521!
activateTurbo

	"turboState  activateOn: self."
	
	

	turboActivated ifTrue: [
		self error: self turboAlreadyActivatedErrorDescription
	].
	
	currentSector activateTurboTo: self.
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 22:43:19'!
PASSED!
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'WAL 5/6/2023 22:44:59'!
activate: aCar

	aCar error: aCar turboAlreadyActivatedErrorDescription.! !

!methodRemoval: TurboActivated #activateTurbo stamp: 'WAL 5/6/2023 22:45:04'!
activateTurbo

	self error: self turboAlreadyActivatedErrorDescription.!
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'WAL 5/6/2023 22:45:33'!
activateOn: aCar

	aCar error: aCar turboAlreadyActivatedErrorDescription.! !

!methodRemoval: TurboActivated #activate: stamp: 'WAL 5/6/2023 22:45:33'!
activate: aCar

	aCar error: aCar turboAlreadyActivatedErrorDescription.!
!TurboDeactivated methodsFor: 'no messages' stamp: 'WAL 5/6/2023 22:46:35'!
activateOn: aCar
	aCar currentSector activateTurboTo: aCar.
! !
!TurboDeactivated methodsFor: 'as yet unclassified' stamp: 'WAL 5/6/2023 22:48:33' prior: 50646646!
activateOn: aCar

	aCar activateTurboFromDeactivated
! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'WAL 5/6/2023 22:49:49'!
activateTurboFromDeactivated
	
	currentSector activateTurboTo: self.
! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'WAL 5/6/2023 22:49:58' prior: 50646529!
activateTurbo

	turboState  activateOn: self.
! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'WAL 5/6/2023 22:50:55' prior: 50640598!
deactivateTurbo
	
	
	turboState deactivateOn: self.
	"turboActivated ifFalse: [ self error: self turboAlreadydeActivatedErrorDescription ].
	
	turboActivated := false"! !
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'WAL 5/6/2023 22:52:02'!
deactivateOn: aCar

	aCar turboDeactivateFromActivated! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'WAL 5/6/2023 22:53:40'!
deactivateFromActivated
	
	turboActivated := false.
	turboState := TurboDeactivated new.! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'WAL 5/6/2023 22:54:04'!
deactivateTurboFromActivated
	
	turboActivated := false.
	turboState := TurboDeactivated new.! !

!methodRemoval: FormulaOneCar #deactivateFromActivated stamp: 'WAL 5/6/2023 22:54:04'!
deactivateFromActivated
	
	turboActivated := false.
	turboState := TurboDeactivated new.!
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'WAL 5/6/2023 22:54:31' prior: 50646674!
deactivateOn: aCar

	aCar deactivateTurboFromActivated! !
!TurboDeactivated methodsFor: 'as yet unclassified' stamp: 'WAL 5/6/2023 22:55:36'!
deactivateOn: aCar

	aCar error: aCar turboAlreadydeActivatedErrorDescription! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'WAL 5/6/2023 22:55:59' prior: 50646666!
deactivateTurbo
	
	turboState deactivateOn: self.
	"turboActivated ifFalse: [ self error: self turboAlreadydeActivatedErrorDescription ].
	
	turboActivated := false"! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 22:56:01'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 22:56:01'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 22:56:01'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 22:56:01'!
FAILURE!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 22:56:01'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 22:56:10'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 22:56:19'!
ERROR!
!FormulaOneCar methodsFor: 'turbo-private' stamp: 'WAL 5/6/2023 22:57:44' prior: 50640619!
activateTurboInSectorWithTurbo
	
	turboActivated := true.
	turboState := TurboActivated new.
	turboActivations := turboActivations + 1 ! !
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'WAL 5/6/2023 22:59:08'!
isTurboActivated

	^true.! !
!TurboDeactivated methodsFor: 'as yet unclassified' stamp: 'WAL 5/6/2023 22:59:22'!
isTurboActivated

	^false! !
!FormulaOneCar methodsFor: 'testing' stamp: 'WAL 5/6/2023 22:59:47' prior: 50640610!
isTurboActivated
	
	^turboState isTurboActivated ! !
!FormulaOneCar methodsFor: 'moving' stamp: 'WAL 5/6/2023 23:00:39' prior: 50640569!
speed

	self isTurboActivated ifTrue: [
		turboActivations = 1 ifTrue: [ ^ speed * 12 / 10 ].
		turboActivations = 2 ifTrue: [ ^ speed * 11 / 10 ].
		turboActivations = 3 ifTrue: [ ^ speed * 105 / 100 ].
	].

	^speed! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 23:01:06'!
PASSED!
!FormulaOneCar methodsFor: 'turbo-private' stamp: 'WAL 5/6/2023 23:01:33' prior: 50646809!
activateTurboInSectorWithTurbo
	
	turboState := TurboActivated new.
	turboActivations := turboActivations + 1 ! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 23:01:35'!
PASSED!
!FormulaOneCar methodsFor: 'turbo' stamp: 'WAL 5/6/2023 23:01:52' prior: 50646706!
deactivateTurbo
	
	turboState deactivateOn: self.! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'WAL 5/6/2023 23:02:08' prior: 50646683!
deactivateTurboFromActivated
	
	turboState := TurboDeactivated new.! !
!FormulaOneCar methodsFor: 'initialization' stamp: 'WAL 5/6/2023 23:02:18' prior: 50646504!
initializeDrivenBy: aDriver 

	driver := aDriver.
	turboState := TurboDeactivated new.
	turboActivations := 0.
	speed := 0*kilometer/hour.
	traveledDistance := 0.
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 23:02:51'!
PASSED!

!classDefinition: #FormulaOneCar category: 'ISW1-2022-1C-Parcial-1' stamp: 'WAL 5/6/2023 23:03:59'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed turboState traveledDistance currentSector turboActivations'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/6/2023 23:04:10'!
PASSED!
!GrandPrix methodsFor: 'simulation' stamp: 'WAL 5/7/2023 00:08:10' prior: 50640681!
advance: aTimeLapse
	
	| cars |
	
	cars := track cars asOrderedCollection.
	"ix := 1.
	[ix <= cars size] whileTrue: [ | car |
		car := cars at: ix.
		self relocate: car after: aTimeLapse.
		ix := ix + 1.
	]."

	cars do: [ : car |
		
		self relocate: car after: aTimeLapse.
		
		]

	
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:08:17'!
PASSED!
!GrandPrix methodsFor: 'simulation' stamp: 'WAL 5/7/2023 00:09:14' prior: 50647228!
advance: aTimeLapse
	
	| cars |
	
	cars := track cars asOrderedCollection.

	cars do: [ : car | self relocate: car after: aTimeLapse ]

	
! !
!GrandPrix methodsFor: 'simulation' stamp: 'WAL 5/7/2023 00:11:59' prior: 50647328!
advance: aTimeLapse
	
	track cars asOrderedCollection do: [ : car | self relocate: car after: aTimeLapse ]

	
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:12:02'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:17:08' prior: 50640967!
cars
	| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	"sectors inject: Set new into: [ :
		
		
		
		]

"


	^ allCars
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:17:10'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:18:21' prior: 50647431!
cars
	| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	sectors inject: Set new into: [ :c|
		
		
		
		]




	^ allCars
	! !
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:20:36' prior: 50647530!
cars
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	]."

	^ sectors inject: Set new into: [ :allCars :sector |
		
		allCars addAll: sector cars
		
		]




	"^ allCars"
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:20:38'!
FAILURE!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:20:38'!
FAILURE!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:20:38'!
FAILURE!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:20:38'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:21:27' prior: 50647540!
cars
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	]."

	^ sectors inject: Set new into: [ :allCars :sector |
		
		allCars addAll: sector cars;
		yourself
		
		]




	"^ allCars"
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:21:29'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:26:13' prior: 50647640!
cars
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	]."

	^ sectors inject: Set new into: [ :allCars :sector | 	allCars addAll: sector cars; yourself ]




	"^ allCars"
	! !
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:27:32' prior: 50647740!
cars
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	]."

	^ sectors inject: Set new into: [ :allCars :sector | 	allCars addAll: sector cars yourself ]




	"^ allCars"
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:27:35'!
FAILURE!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:27:35'!
FAILURE!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:27:35'!
FAILURE!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:27:35'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:27:44' prior: 50647752!
cars
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	]."

	^ sectors inject: Set new into: [ :allCars :sector | 	allCars addAll: sector cars; yourself ]




	"^ allCars"
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:27:45'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:27:46'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:27:46'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:27:46'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:27:46'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:27:46'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:32:40' prior: 50647852!
cars
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	]."

	^ sectors inject: Set new into: [ :allCars :sector | 	allCars addAll: sector cars "; yourself "]




	"^ allCars"
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:32:42'!
FAILURE!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:32:42'!
FAILURE!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:32:42'!
FAILURE!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:32:42'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:32:58' prior: 50647952!
cars
	"| allCars ix |
	
	allCars := Set new.
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	]."

	^ sectors inject: Set new into: [ :allCars :sector | 	allCars addAll: sector cars ; yourself ]




	"^ allCars"
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:33:01'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:33:23' prior: 50648052!
cars

	^ sectors inject: Set new into: [ :allCars :sector | 	allCars addAll: sector cars ; yourself ]! !
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:37:03' prior: 50648152!
cars

	^ sectors inject: Set new into: [ :allCars :sector | 	allCars addAll: sector cars . allCars ]! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:37:04'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:37:08'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:37:23' prior: 50648158!
cars

	^ sectors inject: Set new into: [ :allCars :sector | 	allCars addAll: sector cars  ]! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:37:24'!
FAILURE!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:37:24'!
FAILURE!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:37:24'!
FAILURE!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:37:24'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:37:39' prior: 50648341!
cars

	^ sectors inject: Set new into: [ :allCars :sector | 	allCars addAll: sector cars . allCars  ]! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:37:42'!
PASSED!
!Track methodsFor: 'testing' stamp: 'WAL 5/7/2023 00:43:24' prior: 50640983!
includes: aCar
	"Returns if any of the sectors includes aCar"
	
	| inc ix sector |
	inc := false.
	ix := 1.
	
		sectors anySatisfy: [].
	
	(sectors size = 0) ifTrue: [ ^ inc ].
	
	sector := sectors at: ix.
	(sector includes: aCar) 
		ifTrue: [ inc := true]
		ifFalse: [
			ix := ix +1.
			[ix <= sectors size] whileTrue: [ | s |
				s := sectors at: ix.
				(s includes: aCar) ifTrue: [ ^ true ].
				ix := ix + 1
			]	
		]. 
	^ inc.
	

	! !
!Track methodsFor: 'testing' stamp: 'WAL 5/7/2023 00:47:52' prior: 50648529!
includes: aCar
	"Returns if any of the sectors includes aCar"
	
	"| inc ix sector |
	inc := false.
	ix := 1."
	
	^sectors anySatisfy: [ :sector | sector includes: aCar ].
	
	"(sectors size = 0) ifTrue: [ ^ inc ].
	
	sector := sectors at: ix.
	(sector includes: aCar) 
		ifTrue: [ inc := true]
		ifFalse: [
			ix := ix +1.
			[ix <= sectors size] whileTrue: [ | s |
				s := sectors at: ix.
				(s includes: aCar) ifTrue: [ ^ true ].
				ix := ix + 1
			]	
		]. 
	^ inc."
	

	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:47:55'!
PASSED!
!Track methodsFor: 'testing' stamp: 'WAL 5/7/2023 00:49:39' prior: 50648546!
includes: aCar
	"Returns if any of the sectors includes aCar"
	
	^sectors anySatisfy: [ :sector | sector includes: aCar ].
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:49:42'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:55:50' prior: 50640975!
length

	"| acc ix |"

	^sectors inject: 0 into: [ :length :sector | length +  sector length   ]. 

	"acc := 0 * kilometer.
	ix := 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector := sectors at: ix.
		acc := acc + sector length.
		ix := ix + 1.		
	].

	^ acc."
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:55:53'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:56:31' prior: 50648747!
length

	^sectors inject: 0 into: [ :length :sector | length +  sector length   ]. ! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:56:32'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:56:32'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:56:32'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:56:32'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:56:32'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:56:32'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:56:32'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:56:32'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:56:32'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:56:32'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:56:32'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:56:32'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:56:32'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:56:33'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:56:33'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:56:33'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:56:33'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:56:33'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:56:33'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:56:33'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:56:33'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:56:33'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:56:33'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:56:33'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:56:33'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 00:59:41' prior: 50648847!
length

	"^sectors inject: 0 into: [ :length :sector | length +  sector length   ]. "
	
	^sectors sum: [ :sector | sector length ]! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 00:59:43'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 01:07:44' prior: 50648941!
length

	"^sectors inject: 0 into: [ :length :sector | length +  sector length   ]. "
	
	^sectors sum: [ :sector | sector length ] ifEmpty: 0.! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 01:07:47'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 01:08:48' prior: 50649036!
length

	"^sectors inject: 0 into: [ :length :sector | length +  sector length   ]. "
	
	^sectors sum: [ :sector | sector length ] ! !
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 01:09:02' prior: 50649132!
length

	"^sectors inject: 0 into: [ :length :sector | length +  sector length   ]. "
	
	^sectors sum: [ :sector | sector length ] ifEmpty: 0.! !
!Track methodsFor: 'accessing' stamp: 'WAL 5/7/2023 01:09:29' prior: 50649139!
length

	"^sectors inject: 0 into: [ :length :sector | length +  sector length   ]. "
	
	^sectors sum: [ :sector | sector length ] ifEmpty: 0*kilometer.! !
!Track methodsFor: 'car position' stamp: 'WAL 5/7/2023 01:19:04' prior: 50640917!
positionOf: aCar
	| accumulatedLength "ix sector" |
	
	"ix := 1.
	sector := (sectors at: ix).
	accumulatedLength := 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	].

	^ accumulatedLength + (sector positionOf: aCar)."
	
	sectors do: [ :sector |  
		(sector includes: aCar) ifTrue: [ 
			^ accumulatedLength + (sector positionOf: aCar).
		] ifFalse: [ 
			accumulatedLength := accumulatedLength + sector length.
		]
	]! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 01:19:15'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 01:19:15'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 01:19:16'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 01:19:16'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 01:19:16'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 01:19:16'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 01:19:16'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 01:19:16'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 01:19:16'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 01:19:16'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 01:19:16'!
ERROR!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 01:20:34'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 01:20:34'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 01:20:34'!
ERROR!
!Track methodsFor: 'car position' stamp: 'WAL 5/7/2023 01:21:51' prior: 50649155!
positionOf: aCar
	| accumulatedLength "ix sector" |
	
	"ix := 1.
	sector := (sectors at: ix).
	accumulatedLength := 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	].

	^ accumulatedLength + (sector positionOf: aCar)."
	
	sectors do: [ :sector |  
		(sector includes: aCar) ifTrue: [ 
			^ accumulatedLength + (sector positionOf: aCar).
		]. "ifFalse: [ "
			accumulatedLength := accumulatedLength + sector length.
		"]"
	]! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 01:21:58'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 01:21:58'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 01:21:58'!
ERROR!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 01:22:51'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 01:22:51'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 01:22:51'!
ERROR!
!Track methodsFor: 'car position' stamp: 'WAL 5/7/2023 01:23:35' prior: 50649358!
positionOf: aCar
	| accumulatedLength "ix sector" |
	
	accumulatedLength = 0 * kilometer.
	
	"ix := 1.
	sector := (sectors at: ix).
	accumulatedLength := 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	].

	^ accumulatedLength + (sector positionOf: aCar)."
	
	sectors do: [ :sector |  
		(sector includes: aCar) ifTrue: [ 
			^ accumulatedLength + (sector positionOf: aCar).
		]. "ifFalse: [ "
			accumulatedLength := accumulatedLength + sector length.
		"]"
	]! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 01:23:44'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 01:23:44'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 01:23:44'!
ERROR!
!Track methodsFor: 'car position' stamp: 'WAL 5/7/2023 01:24:23' prior: 50649562!
positionOf: aCar
	| accumulatedLength "ix sector" |
	
	accumulatedLength := 0 * kilometer.
	
	"ix := 1.
	sector := (sectors at: ix).
	accumulatedLength := 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	].

	^ accumulatedLength + (sector positionOf: aCar)."
	
	sectors do: [ :sector |  
		(sector includes: aCar) ifTrue: [ 
			^ accumulatedLength + (sector positionOf: aCar).
		]. "ifFalse: [ "
			accumulatedLength := accumulatedLength + sector length.
		"]"
	]! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'WAL 5/7/2023 01:24:29'!
PASSED!
!Track methodsFor: 'car position' stamp: 'WAL 5/7/2023 01:25:01' prior: 50649675!
positionOf: aCar
	| accumulatedLength "ix sector" |
	
	accumulatedLength := 0 * kilometer.
	
	sectors do: [ :sector |  
		(sector includes: aCar) ifTrue: [ 
			^ accumulatedLength + (sector positionOf: aCar).
		].
		accumulatedLength := accumulatedLength + sector length.
	]! !
!Track methodsFor: 'car position' stamp: 'WAL 5/7/2023 01:25:17' prior: 50649784!
positionOf: aCar
	| accumulatedLength |
	
	accumulatedLength := 0 * kilometer.
	
	sectors do: [ :sector |  
		(sector includes: aCar) ifTrue: [ 
			^ accumulatedLength + (sector positionOf: aCar).
		].
		accumulatedLength := accumulatedLength + sector length.
	]! !
!Track methodsFor: 'car position' stamp: 'WAL 5/7/2023 01:34:21'!
assertCanPlaceCarAtPosition: aPosition

	^ aPosition > self length ifTrue: [ self error: self class cannotPlacedCarErrorDescription ]! !
!Track methodsFor: 'car position' stamp: 'WAL 5/7/2023 01:34:21' prior: 50640930!
put: aCar at: aPosition

	| ix sector acc |
	
	self assertCanPlaceCarAtPosition: aPosition.

	self remove: aCar.

	ix _ 1.
	sector _ sectors at: ix. 
	acc _ 0 * kilometer.

	[aPosition > (acc +  sector length)] whileTrue: [
		acc _ acc + sector length.
		ix _ ix + 1.
		sector _ sectors at: ix.
	].

	sector put: aCar at: aPosition - acc.! !

----STARTUP---- (12 May 2023 21:11:13) as /home/a/s/sw/smalltalk1/CuisUniversity-5706.image!


----End fileIn of /home/a/s/sw/smalltalk1/MarsRoverEjercicioVV.st----!

!testRun: #MarsRoverTest #test01newRowerStartsWithPosition stamp: 'WAL 5/12/2023 21:14:14'!
ERROR!

!testRun: #MarsRoverTest #test01newRowerStartsWithPosition stamp: 'WAL 5/12/2023 21:14:14'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 21:15:20'!
test01newRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: (marsRover position) equals: 1@1.
	self assert: (marsRover pointing) equals: #Norte.
	
	! !

!methodRemoval: MarsRoverTest #test01newRowerStartsWithPosition stamp: 'WAL 5/12/2023 21:15:20'!
test01newRowerStartsWithPosition

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: (marsRover position) equals: 1@1.
	self assert: (marsRover pointing) equals: #Norte.
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 21:24:19' prior: 50645708!
test01newRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: 1@1 equals: (marsRover position).
	self assert: #Norte equals: (marsRover pointing).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 21:25:27' prior: 50645728!
test01newRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: marsRover position equals: 1@1.
	self assert: marsRover pointing equals: #Norte.
	
	! !

!testRun: #MarsRoverTest #test01newRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 21:30:47'!
ERROR!
!MarsRover methodsFor: 'initialize' stamp: 'WAL 5/12/2023 21:31:24'!
position
	
	^1@1! !
!MarsRover methodsFor: 'initialize' stamp: 'WAL 5/12/2023 21:32:06'!
pointingDirection
	
	^#Norte! !

!testRun: #MarsRoverTest #test01newRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 21:32:09'!
ERROR!

!testRun: #MarsRoverTest #test01newRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 21:32:09'!
ERROR!
!MarsRover methodsFor: 'initialize' stamp: 'WAL 5/12/2023 21:32:39'!
pointing
	
	^#Norte! !

!methodRemoval: MarsRover #pointingDirection stamp: 'WAL 5/12/2023 21:32:39'!
pointingDirection
	
	^#Norte!

!testRun: #MarsRoverTest #test01newRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 21:32:44'!
PASSED!

!testRun: #MarsRoverTest #test01newRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 21:32:44'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 21:33:57'!
test02newRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: marsRover position equals: 1@1.
	self assert: marsRover pointing equals: #Norte.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 21:34:40'!
test02enterEmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: marsRover position equals: 1@1.
	self assert: marsRover pointing equals: #Norte.
	
	! !

!methodRemoval: MarsRoverTest #test02newRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 21:34:40'!
test02newRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: marsRover position equals: 1@1.
	self assert: marsRover pointing equals: #Norte.
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 21:37:18' prior: 50645790!
test02enterEmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: ''.
	
	self assert: marsRover position equals: 1@1.
	self assert: marsRover pointing equals: #Norte.
	
	! !

!testRun: #MarsRoverTest #test02enterEmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 21:37:24'!
ERROR!

!testRun: #MarsRoverTest #test02enterEmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 21:37:44'!
ERROR!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 21:38:18'!
giveCommands: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 21:38:45' prior: 50645828!
giveCommands: aCommandSequenceString! !

!testRun: #MarsRoverTest #test01newRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 21:38:49'!
PASSED!

!testRun: #MarsRoverTest #test02enterEmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 21:38:49'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 21:39:51'!
test02givingEmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: ''.
	
	self assert: marsRover position equals: 1@1.
	self assert: marsRover pointing equals: #Norte.
	
	! !

!methodRemoval: MarsRoverTest #test02enterEmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 21:39:51'!
test02enterEmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: ''.
	
	self assert: marsRover position equals: 1@1.
	self assert: marsRover pointing equals: #Norte.
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 21:40:30'!
test02GivingEmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: ''.
	
	self assert: marsRover position equals: 1@1.
	self assert: marsRover pointing equals: #Norte.
	
	! !

!methodRemoval: MarsRoverTest #test02givingEmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 21:40:30'!
test02givingEmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: ''.
	
	self assert: marsRover position equals: 1@1.
	self assert: marsRover pointing equals: #Norte.
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 21:40:36'!
test01NewRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: marsRover position equals: 1@1.
	self assert: marsRover pointing equals: #Norte.
	
	! !

!methodRemoval: MarsRoverTest #test01newRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 21:40:36'!
test01newRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: marsRover position equals: 1@1.
	self assert: marsRover pointing equals: #Norte.
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 21:43:22'!
test03GivingOneForwardCommandMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'f'.
	
	self assert: marsRover position equals: 1@2.
	self assert: marsRover pointing equals: #Norte.
	
	! !

!testRun: #MarsRoverTest #test03GivingOneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 21:43:24'!
FAILURE!

!testRun: #MarsRoverTest #test03GivingOneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 21:43:39'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 21:44:07' prior: 50645907!
test03GivingOneForwardCommandMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'f'.
	
	self assert: 1@2 equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 21:44:23' prior: 50645865!
test02GivingEmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: ''.
	
	self assert: 1@1 equals: marsRover position.
	self assert: #Norte equals:  marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 21:44:48' prior: 50645887!
test01NewRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 21:44:52' prior: 50645936!
test02GivingEmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: ''.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 21:44:59' prior: 50645925!
test03GivingOneForwardCommandMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'f'.
	
	self assert: 1@2       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 21:46:37' prior: 50645833!
giveCommands: aCommandSequenceString

	aCommandSequenceString = 'f' ifTrue: [
		
	]! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 21:47:00' prior: 50645947!
test01NewRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 21:48:56'!
test02EmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: ''.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test02GivingEmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 21:48:56'!
test02GivingEmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: ''.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 21:49:03'!
test03OneForwardCommandMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'f'.
	
	self assert: 1@2       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test03GivingOneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 21:49:03'!
test03GivingOneForwardCommandMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'f'.
	
	self assert: 1@2       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	!

!classDefinition: #MarsRover category: 'MarsRoverEjercicio' stamp: 'WAL 5/12/2023 21:57:21'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 21:57:07' prior: 50645979!
giveCommands: aCommandSequenceString

	aCommandSequenceString = 'f' ifTrue: [
		position := 1@2.
	]! !

Object subclass: #MarsRover
	instanceVariableNames: 'direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #MarsRover category: 'MarsRoverEjercicio' stamp: 'WAL 5/12/2023 21:57:36'!
Object subclass: #MarsRover
	instanceVariableNames: 'direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

1@1!

	a:=1@1.!

	a class.!

Point!

	a y!

	a x!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:01:48'!
FAILURE!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:01:48'!
FAILURE!

!classDefinition: #MarsRover category: 'MarsRoverEjercicio' stamp: 'WAL 5/12/2023 22:03:16'!
Object subclass: #MarsRover
	instanceVariableNames: 'direction position pointing'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!
!MarsRover methodsFor: 'initialize' stamp: 'WAL 5/12/2023 22:03:14' prior: 50645681!
initializeStartOn: aPoint facing: aDirection 

	position := aPoint.
	pointing := aDirection.! !

Object subclass: #MarsRover
	instanceVariableNames: 'position pointing'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #MarsRover category: 'MarsRoverEjercicio' stamp: 'WAL 5/12/2023 22:03:30'!
Object subclass: #MarsRover
	instanceVariableNames: 'position pointing'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!
!MarsRover methodsFor: 'position and pointing' stamp: 'WAL 5/12/2023 22:03:48' prior: 50645752!
position
	
	^position! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:05:03'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:05:03'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:05:03'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:05:52'!
test03OneBackwardCommandMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@0       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:05:58'!
test04OneBackwardCommandMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@0       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test03OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:05:59'!
test03OneBackwardCommandMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@0       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	!

!testRun: #MarsRoverTest #test04OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:06:01'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:06:27' prior: 50646047!
giveCommands: aCommandSequenceString

	aCommandSequenceString = 'f' ifTrue: [
		position := 1@2.
	].
	aCommandSequenceString = 'f' ifTrue: [
		position := 1@0.
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:06:29'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:06:29'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:06:29'!
FAILURE!

!testRun: #MarsRoverTest #test04OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:06:29'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:06:39' prior: 50646152!
giveCommands: aCommandSequenceString

	aCommandSequenceString = 'f' ifTrue: [
		position := 1@2.
	].
	aCommandSequenceString = 'b' ifTrue: [
		position := 1@0.
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:06:40'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:06:40'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:06:40'!
PASSED!

!testRun: #MarsRoverTest #test04OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:06:40'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:14:59'!
test06OneBackwardCommandMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@0       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test04OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:14:59'!
test04OneBackwardCommandMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@0       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:15:32'!
test04TwoForwardCommandMovesTwoForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'ff'.
	
	self assert: 1@2       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:15:38' prior: 50646218!
test04TwoForwardCommandMovesTwoForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'ff'.
	
	self assert: 1@3       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:19:44' prior: 50646174!
giveCommands: aCommandSequenceString

	aCommandSequenceString = 'f' ifTrue: [
		position := 1@2.
	].
	aCommandSequenceString = 'ff' ifTrue: [
		position := 1@3.
	].! !

!methodRemoval: MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:20:07'!
test06OneBackwardCommandMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@0       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:20:10'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:20:10'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:20:10'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:20:10'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:21:05'!
test05ManyForwardCommandMovesManyForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'ff'.
	
	self assert: 1@3       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:21:13' prior: 50646273!
test05ManyForwardCommandMovesManyForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'fffff'.
	
	self assert: 1@6       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:21:36' prior: 50646240!
giveCommands: aCommandSequenceString

	aCommandSequenceString = 'f' ifTrue: [
		position := 1@2.
	].
	aCommandSequenceString = 'ff' ifTrue: [
		position := 1@3.
	].
	aCommandSequenceString = 'fffff' ifTrue: [
		position := 1@6.
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:21:38'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:21:38'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:21:38'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:21:38'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:21:38'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:26:36' prior: 50646295!
giveCommands: aCommandSequenceString

	aCommandSequenceString do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		]
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:26:55'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:26:55'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:26:55'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:26:55'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:26:55'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:27:11' prior: 50646322!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		]
	].! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:28:21'!
test06OneBackwardCommandMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@0       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:28:22'!
FAILURE!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:31:06'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:31:06'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:31:06'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:31:06'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:31:06'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:31:06'!
FAILURE!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:31:06'!
FAILURE!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:32:41'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:32:41'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:32:41'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:32:41'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:32:41'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:32:41'!
FAILURE!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:32:41'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:34:03' prior: 50646348!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		]
	].

	aCommandSequence = 'b' ifTrue: [ | x y |
		x := position x.
		y := position y.
		position := x@(y-1).
	]! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:34:05'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:34:05'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:34:05'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:34:05'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:34:05'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:34:05'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:34:26'!
test06TwoBackwardCommandMovesTwoBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@-1       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:34:35'!
test07TwoBackwardCommandMovesTwoBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@-1       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test06TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:34:35'!
test06TwoBackwardCommandMovesTwoBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@-1       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:34:58' prior: 50646461!
test07TwoBackwardCommandMovesTwoBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@-1    equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:35:01'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:35:25' prior: 50646418!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		]
	].

	aCommandSequence = 'b' ifTrue: [ | x y |
		x := position x.
		y := position y.
		position := x@(y-1).
	].
	aCommandSequence = 'bb' ifTrue: [ | x y |
		x := position x.
		y := position y.
		position := x@(y-1).
	]! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:35:32' prior: 50646497!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		]
	].

	aCommandSequence = 'b' ifTrue: [ | x y |
		x := position x.
		y := position y.
		position := x@(y-1).
	].
	aCommandSequence = 'bb' ifTrue: [ | x y |
		x := position x.
		y := position y.
		position := x@(y-2).
	]! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:35:33'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:35:33'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:35:33'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:35:33'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:35:33'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:35:33'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:35:33'!
FAILURE!

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:35:33'!
FAILURE!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:36:03'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:36:03'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:36:03'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:36:03'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:36:03'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:36:03'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:36:03'!
FAILURE!

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:36:03'!
FAILURE!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:36:29'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:36:29'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:36:29'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:36:29'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:36:29'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:36:29'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:36:29'!
FAILURE!

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:36:29'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:36:47' prior: 50646483!
test07TwoBackwardCommandMovesTwoBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'bb'.
	
	self assert: 1@-1    equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:36:48'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:36:48'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:36:48'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:36:48'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:36:48'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:36:48'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:36:48'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:36:48'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:37:04' prior: 50646512!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		]
	].

	aCommandSequence = 'b' ifTrue: [ | x y |
		x := position x.
		y := position y.
		position := x@(y-1).
	].
	aCommandSequence = 'bb' ifTrue: [ | x y |
		x := position x.
		y := position y.
		position := x@(y-2).
	].




! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:37:32'!
test07ManyBackwardCommandMovesManyBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'bbbbb'.
	
	self assert: 1@-4    equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!testRun: #MarsRoverTest #test07ManyBackwardCommandMovesManyBackward stamp: 'WAL 5/12/2023 22:37:33'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:37:43'!
test08ManyBackwardCommandMovesManyBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'bbbbb'.
	
	self assert: 1@-4    equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test07ManyBackwardCommandMovesManyBackward stamp: 'WAL 5/12/2023 22:37:43'!
test07ManyBackwardCommandMovesManyBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'bbbbb'.
	
	self assert: 1@-4    equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:37:56' prior: 50646647!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		]
	].

	aCommandSequence = 'b' ifTrue: [ | x y |
		x := position x.
		y := position y.
		position := x@(y-1).
	].
	aCommandSequence = 'bb' ifTrue: [ | x y |
		x := position x.
		y := position y.
		position := x@(y-2).
	].
	aCommandSequence = 'bbbbb' ifTrue: [ | x y |
		x := position x.
		y := position y.
		position := x@(y-5).
	].



! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:38:00'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:38:00'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:38:00'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:38:00'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:38:00'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:38:00'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:38:00'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandMovesManyBackward stamp: 'WAL 5/12/2023 22:38:00'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:38:37' prior: 50646698!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		]
	].

	aCommandSequence do: [ : command |
		command = $b ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		]
	].



! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:38:38'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:38:38'!
FAILURE!

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:38:38'!
FAILURE!

!testRun: #MarsRoverTest #test08ManyBackwardCommandMovesManyBackward stamp: 'WAL 5/12/2023 22:38:38'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:38:46' prior: 50646744!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		]
	].

	aCommandSequence do: [ : command |
		command = $b ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y-1).
		]
	].



! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:38:47'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:38:47'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:38:47'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:38:47'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:38:47'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:38:47'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:38:47'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandMovesManyBackward stamp: 'WAL 5/12/2023 22:38:47'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:39:10' prior: 50646785!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		].
		command = $b ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y-1).
		]
	].



! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:39:11'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandMovesManyBackward stamp: 'WAL 5/12/2023 22:39:11'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:41:37'!
test09LeftCommandTurnsLeft

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'l'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Oeste equals: marsRover pointing.
	
	! !

!testRun: #MarsRoverTest #test09LeftCommandTurnsLeft stamp: 'WAL 5/12/2023 22:41:39'!
FAILURE!

!testRun: #MarsRoverTest #test09LeftCommandTurnsLeft stamp: 'WAL 5/12/2023 22:41:46'!
FAILURE!

!testRun: #MarsRoverTest #test09LeftCommandTurnsLeft stamp: 'WAL 5/12/2023 22:42:12'!
FAILURE!

!testRun: #MarsRoverTest #test09LeftCommandTurnsLeft stamp: 'WAL 5/12/2023 22:42:12'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:42:35'!
test09NorthToLeftCommandPointsWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'l'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Oeste equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test09LeftCommandTurnsLeft stamp: 'WAL 5/12/2023 22:42:35'!
test09LeftCommandTurnsLeft

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'l'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Oeste equals: marsRover pointing.
	
	!

!testRun: #MarsRoverTest #test09NorthToLeftCommandPointsWest stamp: 'WAL 5/12/2023 22:42:48'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:44:42' prior: 50646825!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		].
		command = $b ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y-1).
		]
	].

	aCommandSequence = 'l' ifTrue: [
		
		pointing := #Oeste
		
	]

! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:44:43'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:44:43'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:44:43'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:44:43'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:44:43'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:44:43'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:44:43'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandMovesManyBackward stamp: 'WAL 5/12/2023 22:44:43'!
PASSED!

!testRun: #MarsRoverTest #test09NorthToLeftCommandPointsWest stamp: 'WAL 5/12/2023 22:44:43'!
FAILURE!

!testRun: #MarsRoverTest #test09NorthToLeftCommandPointsWest stamp: 'WAL 5/12/2023 22:44:43'!
FAILURE!
!MarsRover methodsFor: 'position and pointing' stamp: 'WAL 5/12/2023 22:44:56' prior: 50645766!
pointing
	
	^pointing ! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:44:57'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:44:57'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:44:57'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:44:57'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:44:57'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:44:57'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:44:57'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandMovesManyBackward stamp: 'WAL 5/12/2023 22:44:57'!
PASSED!

!testRun: #MarsRoverTest #test09NorthToLeftCommandPointsWest stamp: 'WAL 5/12/2023 22:44:57'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:45:33'!
test10NorthToLeftToLeftCommandsPointsSouth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Sur equals: marsRover pointing.
	
	! !

!testRun: #MarsRoverTest #test10NorthToLeftToLeftCommandsPointsSouth stamp: 'WAL 5/12/2023 22:45:35'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:45:56' prior: 50646910!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		].
		command = $b ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y-1).
		]
	].

	aCommandSequence = 'l' ifTrue: [
		
		pointing := #Oeste
		
	].
	aCommandSequence = 'll' ifTrue: [
		
		pointing := #Sur
		
	]

! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:45:57'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:45:57'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:45:57'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:45:57'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:45:57'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:45:57'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:45:57'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandMovesManyBackward stamp: 'WAL 5/12/2023 22:45:57'!
PASSED!

!testRun: #MarsRoverTest #test09NorthToLeftCommandPointsWest stamp: 'WAL 5/12/2023 22:45:57'!
PASSED!

!testRun: #MarsRoverTest #test10NorthToLeftToLeftCommandsPointsSouth stamp: 'WAL 5/12/2023 22:45:57'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:46:39'!
test11NorthThreeLeftCommandsPointsEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Sur equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:46:51'!
test10NorthTwoLeftCommandsPointsSouth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Sur equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test10NorthToLeftToLeftCommandsPointsSouth stamp: 'WAL 5/12/2023 22:46:55'!
test10NorthToLeftToLeftCommandsPointsSouth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Sur equals: marsRover pointing.
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:47:14'!
test09NorthOneLeftCommandPointsWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'l'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Oeste equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test09NorthToLeftCommandPointsWest stamp: 'WAL 5/12/2023 22:47:14'!
test09NorthToLeftCommandPointsWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'l'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Oeste equals: marsRover pointing.
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:47:29'!
test10NorthTwoLeftCommandPointsSouth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Sur equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/12/2023 22:47:29'!
test10NorthTwoLeftCommandsPointsSouth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Sur equals: marsRover pointing.
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:47:41'!
test10NorthTwoLeftCommandsPointsSouth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Sur equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test10NorthTwoLeftCommandPointsSouth stamp: 'WAL 5/12/2023 22:47:41'!
test10NorthTwoLeftCommandPointsSouth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Sur equals: marsRover pointing.
	
	!

----SNAPSHOT----(12 May 2023 22:47:48) CuisUniversity-5706.image priorSource: 10047687!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:48:12'!
test08ManyBackwardCommandsMovesManyBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'bbbbb'.
	
	self assert: 1@-4    equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test08ManyBackwardCommandMovesManyBackward stamp: 'WAL 5/12/2023 22:48:12'!
test08ManyBackwardCommandMovesManyBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'bbbbb'.
	
	self assert: 1@-4    equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:48:17'!
test07TwoBackwardCommandsMovesTwoBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'bb'.
	
	self assert: 1@-1    equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test07TwoBackwardCommandMovesTwoBackward stamp: 'WAL 5/12/2023 22:48:17'!
test07TwoBackwardCommandMovesTwoBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'bb'.
	
	self assert: 1@-1    equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:48:22'!
test05ManyForwardCommandsMovesManyForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'fffff'.
	
	self assert: 1@6       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test05ManyForwardCommandMovesManyForward stamp: 'WAL 5/12/2023 22:48:22'!
test05ManyForwardCommandMovesManyForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'fffff'.
	
	self assert: 1@6       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:48:26'!
test04TwoForwardCommandsMovesTwoForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'ff'.
	
	self assert: 1@3       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!methodRemoval: MarsRoverTest #test04TwoForwardCommandMovesTwoForward stamp: 'WAL 5/12/2023 22:48:26'!
test04TwoForwardCommandMovesTwoForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'ff'.
	
	self assert: 1@3       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:48:47' prior: 50647055!
test11NorthThreeLeftCommandsPointsEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'lll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #East equals: marsRover pointing.
	
	! !

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/12/2023 22:48:48'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 22:49:15' prior: 50647006!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		].
		command = $b ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y-1).
		]
	].

	aCommandSequence = 'l' ifTrue: [
		
		pointing := #Oeste
		
	].
	aCommandSequence = 'll' ifTrue: [
		
		pointing := #Sur
		
	].
	aCommandSequence = 'lll' ifTrue: [
		
		pointing := #East
		
	].

! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:49:54'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:49:54'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:49:54'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/12/2023 22:49:54'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/12/2023 22:49:54'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:49:54'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/12/2023 22:49:54'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/12/2023 22:49:54'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/12/2023 22:49:54'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/12/2023 22:49:54'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/12/2023 22:49:54'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:50:23'!
test12NorthFourLeftCommandsPointsNorth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'llll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !

!testRun: #MarsRoverTest #test12NorthFourLeftCommandsPointsNorth stamp: 'WAL 5/12/2023 22:50:28'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 22:50:33' prior: 50647310!
test12NorthFourLeftCommandsPointsNorth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'llll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!testRun: #MarsRoverTest #test12NorthFourLeftCommandsPointsNorth stamp: 'WAL 5/12/2023 22:50:47'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 22:50:47'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 22:50:47'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 22:50:47'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/12/2023 22:50:47'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/12/2023 22:50:47'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 22:50:47'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/12/2023 22:50:47'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/12/2023 22:50:47'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/12/2023 22:50:47'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/12/2023 22:50:47'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/12/2023 22:50:47'!
PASSED!

!testRun: #MarsRoverTest #test12NorthFourLeftCommandsPointsNorth stamp: 'WAL 5/12/2023 22:50:47'!
PASSED!

!methodRemoval: MarsRoverTest #test12NorthFourLeftCommandsPointsNorth stamp: 'WAL 5/12/2023 22:51:15'!
test12NorthFourLeftCommandsPointsNorth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'llll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	!

Object subclass: #CardinalDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #CardinalDirection category: 'MarsRoverEjercicio' stamp: 'WAL 5/12/2023 22:58:07'!
Object subclass: #CardinalDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

CardinalDirection subclass: #Norte
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Norte category: 'MarsRoverEjercicio' stamp: 'WAL 5/12/2023 22:58:37'!
CardinalDirection subclass: #Norte
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

CardinalDirection subclass: #DirectionSur
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #DirectionSur category: 'MarsRoverEjercicio' stamp: 'WAL 5/12/2023 22:59:01'!
CardinalDirection subclass: #DirectionSur
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classRenamed: #Norte as: #DirectionNorth stamp: 'WAL 5/12/2023 22:59:12'!
Smalltalk renameClassNamed: #Norte as: #DirectionNorth!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 22:59:12' prior: 50645985!
test01NewRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #DirectionNorth.
	
	
	
	self assert: 1@1       equals: marsRover position.
	self assert: #DirectionNorth equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 22:59:12' prior: 50647197!
test05ManyForwardCommandsMovesManyForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #DirectionNorth.
	
	marsRover giveCommands: 'fffff'.
	
	self assert: 1@6       equals: marsRover position.
	self assert: #DirectionNorth equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 22:59:12' prior: 50647087!
test09NorthOneLeftCommandPointsWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #DirectionNorth.
	
	marsRover giveCommands: 'l'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Oeste equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 22:59:12' prior: 50645995!
test02EmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #DirectionNorth.
	
	marsRover giveCommands: ''.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #DirectionNorth equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 22:59:12' prior: 50647219!
test04TwoForwardCommandsMovesTwoForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #DirectionNorth.
	
	marsRover giveCommands: 'ff'.
	
	self assert: 1@3       equals: marsRover position.
	self assert: #DirectionNorth equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 22:59:12' prior: 50647129!
test10NorthTwoLeftCommandsPointsSouth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #DirectionNorth.
	
	marsRover giveCommands: 'll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Sur equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 22:59:12' prior: 50647175!
test07TwoBackwardCommandsMovesTwoBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #DirectionNorth.
	
	marsRover giveCommands: 'bb'.
	
	self assert: 1@-1    equals: marsRover position.
	self assert: #DirectionNorth equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 22:59:12' prior: 50646017!
test03OneForwardCommandMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #DirectionNorth.
	
	marsRover giveCommands: 'f'.
	
	self assert: 1@2       equals: marsRover position.
	self assert: #DirectionNorth equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 22:59:12' prior: 50647241!
test11NorthThreeLeftCommandsPointsEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #DirectionNorth.
	
	marsRover giveCommands: 'lll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #East equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 22:59:12' prior: 50646356!
test06OneBackwardCommandMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #DirectionNorth.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@0       equals: marsRover position.
	self assert: #DirectionNorth equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/12/2023 22:59:12' prior: 50647153!
test08ManyBackwardCommandsMovesManyBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #DirectionNorth.
	
	marsRover giveCommands: 'bbbbb'.
	
	self assert: 1@-4    equals: marsRover position.
	self assert: #DirectionNorth equals: marsRover pointing.
	
	! !

!classRenamed: #DirectionSur as: #DirectionSouth stamp: 'WAL 5/12/2023 22:59:32'!
Smalltalk renameClassNamed: #DirectionSur as: #DirectionSouth!

CardinalDirection subclass: #DirectionEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #DirectionEast category: 'MarsRoverEjercicio' stamp: 'WAL 5/12/2023 22:59:40'!
CardinalDirection subclass: #DirectionEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

CardinalDirection subclass: #DirectionWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #DirectionWest category: 'MarsRoverEjercicio' stamp: 'WAL 5/12/2023 22:59:44'!
CardinalDirection subclass: #DirectionWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 23:00:36' prior: 50647550!
test08ManyBackwardCommandsMovesManyBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: DirectionNorth new.
	
	marsRover giveCommands: 'bbbbb'.
	
	self assert: 1@-4    equals: marsRover position.
	self assert: DirectionNorth new equals: marsRover pointing.
	
	! !

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/12/2023 23:00:40'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/12/2023 23:00:43'!
FAILURE!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/12/2023 23:00:43'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/12/2023 23:01:44' prior: 50647591!
test08ManyBackwardCommandsMovesManyBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #Norte.
	
	marsRover giveCommands: 'bbbbb'.
	
	self assert: 1@-4    equals: marsRover position.
	self assert: #Norte equals: marsRover pointing.
	
	! !

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/12/2023 23:01:45'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/12/2023 23:01:45'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/12/2023 23:01:45'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/12/2023 23:01:45'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/12/2023 23:01:45'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/12/2023 23:01:45'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/12/2023 23:01:45'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/12/2023 23:01:45'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/12/2023 23:01:45'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/12/2023 23:01:45'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/12/2023 23:01:45'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/12/2023 23:01:45'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/12/2023 23:02:42' prior: 50647255!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		].
		command = $b ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y-1).
		]
	].

	aCommandSequence = 'l' ifTrue: [
		pointing := #Oeste
	].
	aCommandSequence = 'll' ifTrue: [
		pointing := #Sur
	].
	aCommandSequence = 'lll' ifTrue: [
		pointing := #East	
	].

! !

----SNAPSHOT----(12 May 2023 23:11:15) CuisUniversity-5706.image priorSource: 10095988!

----STARTUP---- (13 May 2023 11:29:31) as /home/a/s/sw/smalltalk1/CuisUniversity-5706.image!


!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 11:44:39'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 11:44:39'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 11:44:39'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 11:44:39'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 11:44:39'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 11:44:39'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 11:44:39'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 11:44:39'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 11:44:39'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 11:44:39'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 11:44:39'!
PASSED!

!classRenamed: #DirectionEast as: #East stamp: 'WAL 5/13/2023 11:45:52'!
Smalltalk renameClassNamed: #DirectionEast as: #East!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 11:45:52' prior: 50647665!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		].
		command = $b ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y-1).
		]
	].

	aCommandSequence = 'l' ifTrue: [
		pointing := #Oeste
	].
	aCommandSequence = 'll' ifTrue: [
		pointing := #Sur
	].
	aCommandSequence = 'lll' ifTrue: [
		pointing := #East	
	].

! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 11:45:52' prior: 50647526!
test11NorthThreeLeftCommandsPointsEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #DirectionNorth.
	
	marsRover giveCommands: 'lll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #East equals: marsRover pointing.
	
	! !

!classRenamed: #DirectionWest as: #West stamp: 'WAL 5/13/2023 11:46:06'!
Smalltalk renameClassNamed: #DirectionWest as: #West!

!classRenamed: #DirectionSouth as: #South stamp: 'WAL 5/13/2023 11:46:12'!
Smalltalk renameClassNamed: #DirectionSouth as: #South!

!classRenamed: #DirectionNorth as: #North stamp: 'WAL 5/13/2023 11:46:17'!
Smalltalk renameClassNamed: #DirectionNorth as: #North!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 11:46:17' prior: 50647431!
test01NewRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	
	
	self assert: 1@1       equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 11:46:17' prior: 50647442!
test05ManyForwardCommandsMovesManyForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover giveCommands: 'fffff'.
	
	self assert: 1@6       equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 11:46:17' prior: 50647454!
test09NorthOneLeftCommandPointsWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover giveCommands: 'l'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Oeste equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 11:46:17' prior: 50647466!
test02EmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover giveCommands: ''.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 11:46:17' prior: 50647478!
test04TwoForwardCommandsMovesTwoForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover giveCommands: 'ff'.
	
	self assert: 1@3       equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 11:46:17' prior: 50647490!
test10NorthTwoLeftCommandsPointsSouth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover giveCommands: 'll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Sur equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 11:46:17' prior: 50647502!
test07TwoBackwardCommandsMovesTwoBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover giveCommands: 'bb'.
	
	self assert: 1@-1    equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 11:46:17' prior: 50647514!
test03OneForwardCommandMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover giveCommands: 'f'.
	
	self assert: 1@2       equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 11:46:17' prior: 50647748!
test11NorthThreeLeftCommandsPointsEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover giveCommands: 'lll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #East equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 11:46:17' prior: 50647538!
test06OneBackwardCommandMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@0       equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 11:46:48'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 11:46:50'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 11:46:50'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 11:46:50'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 11:46:50'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 11:46:50'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 11:46:50'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 11:46:50'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 11:46:50'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 11:46:50'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 11:46:50'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 11:46:50'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 11:46:50'!
PASSED!

#North!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 11:48:42' prior: 50647730!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		].
		command = $b ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y-1).
		]
	].

	aCommandSequence = 'l' ifTrue: [
		pointing := West new
	].
	aCommandSequence = 'll' ifTrue: [
		pointing := South new
	].
	aCommandSequence = 'lll' ifTrue: [
		pointing := East new
	].

! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:49:22' prior: 50647772!
test01NewRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: North new.
	
	
	
	self assert: 1@1            equals: marsRover position.
	self assert: North new equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:07' prior: 50647946!
test01NewRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: #North.
	
	
	
	self assert: 1@1       equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45'!
north

	^ #North! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50647957!
test01NewRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	
	
	self assert: 1@1       equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50647971!
test01NewRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	
	
	self assert: 1@1       equals: marsRover position.
	self assert: self north equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50647783!
test05ManyForwardCommandsMovesManyForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'fffff'.
	
	self assert: 1@6       equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50647993!
test05ManyForwardCommandsMovesManyForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'fffff'.
	
	self assert: 1@6       equals: marsRover position.
	self assert: self north equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50647795!
test09NorthOneLeftCommandPointsWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'l'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Oeste equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50647806!
test02EmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: ''.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50648026!
test02EmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: ''.
	
	self assert: 1@1       equals: marsRover position.
	self assert: self north equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50647817!
test04TwoForwardCommandsMovesTwoForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'ff'.
	
	self assert: 1@3       equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50648048!
test04TwoForwardCommandsMovesTwoForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'ff'.
	
	self assert: 1@3       equals: marsRover position.
	self assert: self north equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50647828!
test10NorthTwoLeftCommandsPointsSouth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #Sur equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50647839!
test07TwoBackwardCommandsMovesTwoBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'bb'.
	
	self assert: 1@-1    equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50648081!
test07TwoBackwardCommandsMovesTwoBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'bb'.
	
	self assert: 1@-1    equals: marsRover position.
	self assert: self north equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50647850!
test03OneForwardCommandMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'f'.
	
	self assert: 1@2       equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50648103!
test03OneForwardCommandMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'f'.
	
	self assert: 1@2       equals: marsRover position.
	self assert: self north equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50647861!
test11NorthThreeLeftCommandsPointsEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: #East equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50647872!
test06OneBackwardCommandMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@0       equals: marsRover position.
	self assert: #North equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:50:45' prior: 50648136!
test06OneBackwardCommandMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@0       equals: marsRover position.
	self assert: self north equals: marsRover pointing.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:51:06' prior: 50647967!
north

	^ North new! !

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 11:51:43'!
FAILURE!

marsRover pointing!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 11:55:51' prior: 50647613!
test08ManyBackwardCommandsMovesManyBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'bbbbb'.
	
	self assert: 1@-4      equals: marsRover position.
	self assert: self north equals: marsRover pointing.
	
	! !

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 11:55:59'!
FAILURE!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 11:56:41'!
FAILURE!

self north!

marsRover pointing .!

norte1 := North new.!

norte2 := North new.!

norte1 = norte2.!

norte1 == norte2.!

rover1 := MarsRover  new.!

rover2 := MarsRover new.!

rover1 = rover2.!

norte1 = norte2.!
!CardinalDirection methodsFor: 'no messages' stamp: 'WAL 5/13/2023 12:06:00'!
isWest

	^false! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:06:05'!
isEast

	^false! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:06:08'!
isNorth

	^false! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:06:12' prior: 50648191!
isWest

	^false! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:06:19'!
isSouth

	^false! !
!East methodsFor: 'no messages' stamp: 'WAL 5/13/2023 12:06:47' overrides: 50648195!
isEast

	^true! !
!North methodsFor: 'no messages' stamp: 'WAL 5/13/2023 12:07:00' overrides: 50648199!
isNorth

	^true! !
!South methodsFor: 'no messages' stamp: 'WAL 5/13/2023 12:07:09' overrides: 50648207!
isSouth

	^true! !
!West methodsFor: 'no messages' stamp: 'WAL 5/13/2023 12:07:26' overrides: 50648203!
isWest

	^true! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:08:00' prior: 50647982!
test01NewRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	
	
	self assert: 1@1       equals: marsRover position.
	self assert: marsRover pointing isNorth.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:08:05' prior: 50648037!
test02EmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: ''.
	
	self assert: 1@1       equals: marsRover position.
	self assert: marsRover pointing isNorth
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:08:09' prior: 50648114!
test03OneForwardCommandMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'f'.
	
	self assert: 1@2       equals: marsRover position.
	self assert: marsRover pointing isNorth
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:08:20' prior: 50648059!
test04TwoForwardCommandsMovesTwoForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'ff'.
	
	self assert: 1@3       equals: marsRover position.
	self assert: marsRover pointing isNorth
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:08:24' prior: 50648004!
test05ManyForwardCommandsMovesManyForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'fffff'.
	
	self assert: 1@6       equals: marsRover position.
	self assert: marsRover pointing isNorth
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:08:27' prior: 50648147!
test06OneBackwardCommandMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'b'.
	
	self assert: 1@0       equals: marsRover position.
	self assert: marsRover pointing isNorth
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:08:31' prior: 50648092!
test07TwoBackwardCommandsMovesTwoBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'bb'.
	
	self assert: 1@-1    equals: marsRover position.
	self assert: marsRover pointing isNorth
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:08:38' prior: 50648166!
test08ManyBackwardCommandsMovesManyBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'bbbbb'.
	
	self assert: 1@-4      equals: marsRover position.
	self assert: marsRover pointing isNorth
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:08:49' prior: 50648015!
test09NorthOneLeftCommandPointsWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'l'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: marsRover pointing isWest
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:08:59' prior: 50648070!
test10NorthTwoLeftCommandsPointsSouth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: marsRover pointing isSouth
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:09:08' prior: 50648125!
test11NorthThreeLeftCommandsPointsEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lll'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: marsRover pointing isEast
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:11:21'!
assertRover: marsRover

	self assert: 1@1       equals: marsRover position.
	self assert: marsRover pointing isNorth! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:11:21' prior: 50648237!
test02EmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: ''.
	
	self assertRover: marsRover
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:11:21' prior: 50648227!
test01NewRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	
	
	self assertRover: marsRover.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:12:29'!
assertRover: marsRover at: aPosition 

	self assert: 1@1       equals: marsRover position.
	self assert: marsRover pointing isNorth! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:12:29' prior: 50648353!
test02EmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: ''.
	
	self assertRover: marsRover at: 1@1
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:12:29' prior: 50648362!
test01NewRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	
	
	self assertRover: marsRover at: 1@1.
	
	! !

!methodRemoval: MarsRoverTest #assertRover: stamp: 'WAL 5/13/2023 12:12:29'!
assertRover: marsRover

	self assert: 1@1       equals: marsRover position.
	self assert: marsRover pointing isNorth!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:12:29' prior: 50648370!
assertRover: marsRover at: aPosition 

	self assert: aPosition       equals: marsRover position.
	self assert: marsRover pointing isNorth! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:16:51'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:16:51'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:16:51'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:16:51'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:16:51'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:16:51'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:16:51'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:16:51'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:16:51'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:16:51'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:16:51'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 12:21:13' prior: 50647928!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y+1).
		].
		command = $b ifTrue: [ | x y |
			x := position x.
			y := position y.
			position := x@(y-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
	].

! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 12:21:57' prior: 50648447!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + 0@1.
		].
		command = $b ifTrue: [
			position := position + 0@-1.
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
	].

! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:21:58'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:21:58'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:21:58'!
ERROR!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:21:58'!
ERROR!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:21:58'!
ERROR!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:21:58'!
ERROR!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:21:58'!
ERROR!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:21:58'!
ERROR!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:21:58'!
ERROR!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:21:58'!
ERROR!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:21:58'!
ERROR!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:22:18'!
ERROR!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 12:22:34' prior: 50648461!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + (0@1).
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
	].

! !

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:22:43'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:22:43'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:22:44'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:22:44'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:22:44'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:22:44'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:22:44'!
ERROR!
!East methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:23:05'!
left

	^North new! !
!North methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:23:22'!
left

	^West new! !
!South methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:23:33'!
left

	^East new! !
!West methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:23:45'!
left

	^South new! !

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:24:18'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:24:18'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:24:18'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:24:18'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:24:18'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:24:18'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:24:18'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:24:18'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:24:18'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:24:18'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:24:18'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:24:18'!
PASSED!

!classRenamed: #CardinalDirection as: #PointingDirection stamp: 'WAL 5/13/2023 12:26:32'!
Smalltalk renameClassNamed: #CardinalDirection as: #PointingDirection!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:28:19'!
test09NorthOneRightCommandPointsEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'r'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: marsRover pointing isEast
	
	! !

!testRun: #MarsRoverTest #test09NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:28:26'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:31:51'!
assertRover: marsRover at: aPosition pointing: aPointingDirection

	self assert: aPosition                            equals: marsRover position.
	self assert: aPointingDirection isNorth equals: marsRover pointing isNorth.
	self assert: aPointingDirection isWest equals: marsRover pointing isWest.
	self assert: aPointingDirection isSouth equals: marsRover pointing isSouth.
	self assert: aPointingDirection isEast equals: marsRover pointing isEast.! !

!methodRemoval: MarsRoverTest #assertRover:at: stamp: 'WAL 5/13/2023 12:31:58'!
assertRover: marsRover at: aPosition 

	self assert: aPosition       equals: marsRover position.
	self assert: marsRover pointing isNorth!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:32:25' prior: 50648387!
test01NewRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	
	
	self assertRover: marsRover at: 1@1 pointing: self north.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:32:52' prior: 50648378!
test02EmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: ''.
	
	self assertRover: marsRover at: 1@1 pointing: self north.
	
	! !

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:32:54'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:32:54'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:32:54'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:32:54'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:32:54'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:32:54'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:32:54'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:32:54'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:32:54'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:32:54'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:32:54'!
FAILURE!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:32:54'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:32:54'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:32:54'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:33:15' prior: 50648248!
test03OneForwardCommandMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'f'.

	self assertRover: marsRover at: 1@2 pointing: self north.	
	
	! !

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:33:15'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:33:15'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:33:15'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:33:15'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:33:15'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:33:15'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:33:15'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:33:15'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:33:15'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:33:15'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:33:15'!
FAILURE!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:33:15'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:33:15'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:33:15'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:33:28' prior: 50648259!
test04TwoForwardCommandsMovesTwoForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'ff'.
	
	self assertRover: marsRover at: 1@3 pointing: self north.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:33:38' prior: 50648270!
test05ManyForwardCommandsMovesManyForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'fffff'.
	
	self assertRover: marsRover at: 1@6 pointing: self north.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:33:47' prior: 50648281!
test06OneBackwardCommandMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'b'.
	
	self assertRover: marsRover at: 1@0 pointing: self north.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:33:55' prior: 50648292!
test07TwoBackwardCommandsMovesTwoBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'bb'.
	
	self assertRover: marsRover at: 1@-1 pointing: self north.
	
	! !

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:33:57'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:33:57'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:33:57'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:33:57'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:33:57'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:33:57'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:33:57'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:33:57'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:33:57'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:33:57'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:33:57'!
FAILURE!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:33:57'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:33:57'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:33:57'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:34:10' prior: 50648303!
test08ManyBackwardCommandsMovesManyBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'bbbbb'.
	
	self assertRover: marsRover at: 1@-4 pointing: self north.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:34:31' prior: 50648620!
assertRover: marsRover at: aPosition pointing: aPointingDirection

	self assert: aPosition                            equals: marsRover position.
	self assert: aPointingDirection isNorth equals: marsRover pointing isNorth.
	self assert: aPointingDirection isWest  equals: marsRover pointing isWest.
	self assert: aPointingDirection isSouth equals: marsRover pointing isSouth.
	self assert: aPointingDirection isEast   equals: marsRover pointing isEast.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:34:52'!
test12NorthOneRightCommandPointsEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'r'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: marsRover pointing isEast
	
	! !

!methodRemoval: MarsRoverTest #test09NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:34:52'!
test09NorthOneRightCommandPointsEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'r'.
	
	self assert: 1@1       equals: marsRover position.
	self assert: marsRover pointing isEast
	
	!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:34:55'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:36:01' prior: 50648314!
test09NorthOneLeftCommandPointsWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'l'.
	
	self assertRover: marsRover at: 1@1 pointing: self west.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:36:14'!
west

	^ West new! !
!MarsRoverTest methodsFor: 'pointing directions' stamp: 'WAL 5/13/2023 12:37:10'!
east

	^ East new! !
!MarsRoverTest methodsFor: 'pointing directions' stamp: 'WAL 5/13/2023 12:37:22'!
south

	^ South new! !

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:37:35'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:37:39'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:37:39'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:37:39'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:37:39'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:37:39'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:37:39'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:37:39'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:37:39'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:37:39'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:37:39'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:37:39'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:37:39'!
FAILURE!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:37:39'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:38:06' prior: 50648325!
test10NorthTwoLeftCommandsPointsSouth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'll'.
	
	self assertRover: marsRover at: 1@1 pointing: self south.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:38:15' prior: 50648336!
test11NorthThreeLeftCommandsPointsEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lll'.
	
	self assertRover: marsRover at: 1@1 pointing: self east.
	
	! !

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:38:16'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:38:16'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:38:16'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:38:16'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:38:16'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:38:16'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:38:16'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:38:16'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:38:16'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:38:16'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:38:16'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:38:16'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:38:16'!
FAILURE!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:38:16'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:38:33' prior: 50648881!
test12NorthOneRightCommandPointsEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'r'.
	
	self assertRover: marsRover at: 1@1 pointing: self east.
	
	! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 12:39:46' prior: 50648513!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + (0@1).
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
	].

	aCommandSequence = 'r' isTrue: [
		pointing := East new.
	].
! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:39:48'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:39:48'!
ERROR!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:39:48'!
ERROR!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:39:48'!
ERROR!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:39:48'!
ERROR!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:39:48'!
ERROR!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:39:48'!
ERROR!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:39:48'!
ERROR!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:39:48'!
ERROR!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:39:48'!
ERROR!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:39:48'!
ERROR!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:39:48'!
ERROR!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:39:58'!
ERROR!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 12:40:15' prior: 50649051!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + (0@1).
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
	].

	aCommandSequence = 'r' ifTrue: [
		pointing := East new.
	].
! !

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:40:18'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:40:18'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:40:19'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:40:19'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:40:19'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:40:19'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:40:19'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:40:19'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:40:20'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:40:20'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:40:20'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:40:53'!
test13NorthTwoRightCommandPointsSouth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'rr'.
	
	self assertRover: marsRover at: 1@1 pointing: self south.
	
	! !

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 12:40:55'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 12:41:16' prior: 50649108!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + (0@1).
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
	].

	aCommandSequence = 'r' ifTrue: [
		pointing := East new.
	].

	aCommandSequence = 'rr' ifTrue: [
		pointing := South new.
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:41:18'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:41:18'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:41:18'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:41:18'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:41:18'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:41:18'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:41:18'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:41:18'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:41:18'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:41:18'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:41:18'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:41:18'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 12:41:18'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:41:57'!
test14NorthThreeRightCommandPointsWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'rrr'.
	
	self assertRover: marsRover at: 1@1 pointing: self west.
	
	! !

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 12:41:59'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 12:42:35' prior: 50649171!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + (0@1).
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
	].

	aCommandSequence = 'r' ifTrue: [
		pointing := East new.
	].

	aCommandSequence = 'rr' ifTrue: [
		pointing := South new.
	].

	aCommandSequence = 'rrr' ifTrue: [
		pointing := West new.
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:42:36'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:42:36'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:42:36'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:42:36'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:42:36'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:42:36'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:42:36'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:42:36'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:42:36'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:42:36'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:42:36'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:42:36'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 12:42:36'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 12:42:36'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 12:43:08' prior: 50649243!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + (0@1).
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
		command = $r ifTrue: [ 
			pointing := pointing right.
		].
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:43:13'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:43:13'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:43:13'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:43:13'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:43:13'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:43:13'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:43:13'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:43:13'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:43:13'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:43:13'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:43:13'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:43:13'!
ERROR!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 12:43:13'!
ERROR!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 12:43:13'!
ERROR!
!PointingDirection methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:43:33'!
left

	self subclassResponsibility ! !
!PointingDirection methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:43:41'!
right

	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:43:53' overrides: 50649373!
right

	^South new! !
!North methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:44:02' overrides: 50649373!
right

	^East new! !
!South methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:44:40' overrides: 50649373!
right

	^West new! !
!West methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 12:45:07' overrides: 50649373!
right

	^North new! !

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 12:45:15'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:50:18'!
test15NorthOneForwardOneLeftCommandsMovesOneForwardPointsWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'fl'.

	self assertRover: marsRover at: 1@2 pointing: self west.	
	
	! !

!testRun: #MarsRoverTest #test15NorthOneForwardOneLeftCommandsMovesOneForwardPointsWest stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneForwardOneLeftCommandsMovesOneForwardPointsWest stamp: 'WAL 5/13/2023 12:50:21'!
PASSED!

----SNAPSHOT----(13 May 2023 12:54:07) CuisUniversity-5706.image priorSource: 10113002!