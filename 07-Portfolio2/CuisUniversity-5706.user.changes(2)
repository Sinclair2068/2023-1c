

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (13 May 2023 12:55:34) as /home/a/s/sw/smalltalk2/CuisUniversity-5706.image!


----End fileIn of /home/a/s/sw/smalltalk1/MarsRoverEjercicio.st----!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneForwardOneLeftCommandsMovesOneForwardPointsWest stamp: 'WAL 5/13/2023 12:56:44'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:57:30' prior: 50604110!
test15NorthOneForwardOneLeftCommandsMovesOneForwardPointsWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lf'.

	self assertRover: marsRover at: 1@2 pointing: self west.	
	
	! !

!testRun: #MarsRoverTest #test15NorthOneForwardOneLeftCommandsMovesOneForwardPointsWest stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneForwardOneLeftCommandsMovesOneForwardPointsWest stamp: 'WAL 5/13/2023 12:57:33'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:58:27' prior: 50604362!
test15NorthOneForwardOneLeftCommandsMovesOneForwardPointsWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lf'.

	self assertRover: marsRover at: 0@1 pointing: self west.	
	
	! !

!testRun: #MarsRoverTest #test15NorthOneForwardOneLeftCommandsMovesOneForwardPointsWest stamp: 'WAL 5/13/2023 12:58:29'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 12:59:35'!
test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lf'.

	self assertRover: marsRover at: 0@1 pointing: self west.	
	
	! !

!methodRemoval: MarsRoverTest #test15NorthOneForwardOneLeftCommandsMovesOneForwardPointsWest stamp: 'WAL 5/13/2023 12:59:35'!
test15NorthOneForwardOneLeftCommandsMovesOneForwardPointsWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lf'.

	self assertRover: marsRover at: 0@1 pointing: self west.	
	
	!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 13:04:10' prior: 50604138!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			pointing isNorth ifTrue: [
				position := position + (0@1).
			].
			pointing isWest ifTrue: [
				position := position + (-1@0).
			].
			pointing isSouth ifTrue: [
				position := position + (0@-1).
			].
			pointing isEast ifTrue: [
				position := position + (1@0).
			].
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
		command = $r ifTrue: [ 
			pointing := pointing right.
		].
	].! !

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward stamp: 'WAL 5/13/2023 13:04:26'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward stamp: 'WAL 5/13/2023 13:04:29'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 13:06:34'!
test16NorthOneLeftOneBackwardCommandsPointsWestMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lb'.

	self assertRover: marsRover at: 2@1 pointing: self west.	
	
	! !

!testRun: #MarsRoverTest #test16NorthOneLeftOneBackwardCommandsPointsWestMovesOneBackward stamp: 'WAL 5/13/2023 13:06:40'!
FAILURE!

!testRun: #MarsRoverTest #test16NorthOneLeftOneBackwardCommandsPointsWestMovesOneBackward stamp: 'WAL 5/13/2023 13:07:14'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 13:09:47' prior: 50604464!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			pointing isNorth ifTrue: [
				position := position + (0@1).
			].
			pointing isWest ifTrue: [
				position := position + (-1@0).
			].
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
		command = $r ifTrue: [ 
			pointing := pointing right.
		].
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward stamp: 'WAL 5/13/2023 13:09:49'!
PASSED!

!testRun: #MarsRoverTest #test16NorthOneLeftOneBackwardCommandsPointsWestMovesOneBackward stamp: 'WAL 5/13/2023 13:09:49'!
FAILURE!

!testRun: #MarsRoverTest #test16NorthOneLeftOneBackwardCommandsPointsWestMovesOneBackward stamp: 'WAL 5/13/2023 13:09:49'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 13:12:56'!
test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lb'.

	self assertRover: marsRover at: 2@1 pointing: self west.	
	
	! !

!methodRemoval: MarsRoverTest #test16NorthOneLeftOneBackwardCommandsPointsWestMovesOneBackward stamp: 'WAL 5/13/2023 13:12:56'!
test16NorthOneLeftOneBackwardCommandsPointsWestMovesOneBackward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lb'.

	self assertRover: marsRover at: 2@1 pointing: self west.	
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 13:13:30' prior: 50604635!
test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'llf'.

	self assertRover: marsRover at: 1@0 pointing: self south.	
	
	! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward stamp: 'WAL 5/13/2023 13:14:10'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneForward stamp: 'WAL 5/13/2023 13:14:10'!
FAILURE!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneForward stamp: 'WAL 5/13/2023 13:14:10'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 13:14:20' prior: 50604559!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			pointing isNorth ifTrue: [
				position := position + (0@1).
			].
			pointing isWest ifTrue: [
				position := position + (-1@0).
			].
			pointing isSouth ifTrue: [
				position := position + (0@-1).
			].
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
		command = $r ifTrue: [ 
			pointing := pointing right.
		].
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneForward stamp: 'WAL 5/13/2023 13:14:25'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 13:18:29'!
test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lllf'.

	self assertRover: marsRover at: 2@1 pointing: self south.	
	
	! !

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 13:18:30'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 13:18:44' prior: 50604727!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			pointing isNorth ifTrue: [
				position := position + (0@1).
			].
			pointing isWest ifTrue: [
				position := position + (-1@0).
			].
			pointing isSouth ifTrue: [
				position := position + (0@-1).
			].
			pointing isEast ifTrue: [
				position := position + (1@0).
			].
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
		command = $r ifTrue: [ 
			pointing := pointing right.
		].
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneForward stamp: 'WAL 5/13/2023 13:18:46'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 13:18:46'!
FAILURE!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 13:18:46'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 13:19:03' prior: 50604801!
test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lllf'.

	self assertRover: marsRover at: 2@1 pointing: self east.	
	
	! !

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneForward stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 13:19:04'!
PASSED!
!East methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 13:21:33'!
asVersor

	^1@0! !
!North methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 13:21:53'!
asVersor

	^0@1! !
!South methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 13:22:02'!
asVersor

	^0@-1! !
!West methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 13:22:17'!
asVersor

	^-1@0! !
!PointingDirection methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 13:22:53'!
asVersor

	self subclassResponsibility ! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 13:26:39' prior: 50604816!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			pointing := pointing + pointing asVersor
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
		command = $r ifTrue: [ 
			pointing := pointing right.
		].
	].! !

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 13:27:13'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 13:27:16'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 13:27:16'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 13:27:16'!
ERROR!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 13:27:16'!
ERROR!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 13:27:16'!
ERROR!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 13:27:16'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 13:27:16'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 13:27:16'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 13:27:16'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 13:27:16'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 13:27:16'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 13:27:16'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 13:27:16'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 13:27:16'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward stamp: 'WAL 5/13/2023 13:27:16'!
ERROR!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneForward stamp: 'WAL 5/13/2023 13:27:16'!
ERROR!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 13:27:16'!
ERROR!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 13:18:44' prior: 50604992!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			pointing isNorth ifTrue: [
				position := position + (0@1).
			].
			pointing isWest ifTrue: [
				position := position + (-1@0).
			].
			pointing isSouth ifTrue: [
				position := position + (0@-1).
			].
			pointing isEast ifTrue: [
				position := position + (1@0).
			].
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
		command = $r ifTrue: [ 
			pointing := pointing right.
		].
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneForward stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 13:28:06'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 14:00:45' prior: 50605068!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			
			
			pointing isNorth ifTrue: [
				position := position + (0@1).
			].
			pointing isWest ifTrue: [
				position := position + (-1@0).
			].
			pointing isSouth ifTrue: [
				position := position + (0@-1).
			].
			pointing isEast ifTrue: [
				position := position + (1@0).
			].
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
		command = $r ifTrue: [ 
			pointing := pointing right.
		].
	].! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 14:01:21' prior: 50605148!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			
			pointing := pointing + pointing asVersor
			"pointing isNorth ifTrue: [
				position := position + (0@1).
			].
			pointing isWest ifTrue: [
				position := position + (-1@0).
			].
			pointing isSouth ifTrue: [
				position := position + (0@-1).
			].
			pointing isEast ifTrue: [
				position := position + (1@0).
			]."
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
		command = $r ifTrue: [ 
			pointing := pointing right.
		].
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 14:01:25'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 14:01:25'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 14:01:25'!
ERROR!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 14:01:25'!
ERROR!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 14:01:25'!
ERROR!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 14:01:25'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 14:01:25'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 14:01:25'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 14:01:25'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 14:01:25'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 14:01:25'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 14:01:25'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 14:01:25'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 14:01:25'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward stamp: 'WAL 5/13/2023 14:01:25'!
ERROR!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneForward stamp: 'WAL 5/13/2023 14:01:25'!
ERROR!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 14:01:25'!
ERROR!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 14:01:40'!
ERROR!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 14:02:16' prior: 50605169!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
		command = $r ifTrue: [ 
			pointing := pointing right.
		].
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneForward stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 14:02:19'!
PASSED!
!PointingDirection methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 14:03:25'!
rotateLeft

	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 14:03:25' overrides: 50605327!
rotateLeft

	^North new! !
!North methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 14:03:25' overrides: 50605327!
rotateLeft

	^West new! !
!South methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 14:03:25' overrides: 50605327!
rotateLeft

	^East new! !
!West methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 14:03:25' overrides: 50605327!
rotateLeft

	^South new! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 14:03:25' prior: 50605254!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing rotateLeft.
		].
		command = $r ifTrue: [ 
			pointing := pointing right.
		].
	].! !

!methodRemoval: PointingDirection #left stamp: 'WAL 5/13/2023 14:03:26'!
left

	self subclassResponsibility !

!methodRemoval: East #left stamp: 'WAL 5/13/2023 14:03:26'!
left

	^North new!

!methodRemoval: North #left stamp: 'WAL 5/13/2023 14:03:26'!
left

	^West new!

!methodRemoval: South #left stamp: 'WAL 5/13/2023 14:03:26'!
left

	^East new!

!methodRemoval: West #left stamp: 'WAL 5/13/2023 14:03:26'!
left

	^South new!
!PointingDirection methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 14:03:38'!
rotateRight

	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 14:03:38' overrides: 50605375!
rotateRight

	^South new! !
!North methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 14:03:38' overrides: 50605375!
rotateRight

	^East new! !
!South methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 14:03:38' overrides: 50605375!
rotateRight

	^West new! !
!West methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 14:03:38' overrides: 50605375!
rotateRight

	^North new! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 14:03:38' prior: 50605348!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position := position + (0@-1).
		].
		command = $l ifTrue: [ 
			pointing := pointing rotateLeft.
		].
		command = $r ifTrue: [ 
			pointing := pointing rotateRight.
		].
	].! !

!methodRemoval: PointingDirection #right stamp: 'WAL 5/13/2023 14:03:38'!
right

	self subclassResponsibility !

!methodRemoval: East #right stamp: 'WAL 5/13/2023 14:03:38'!
right

	^South new!

!methodRemoval: North #right stamp: 'WAL 5/13/2023 14:03:38'!
right

	^East new!

!methodRemoval: South #right stamp: 'WAL 5/13/2023 14:03:38'!
right

	^West new!

!methodRemoval: West #right stamp: 'WAL 5/13/2023 14:03:38'!
right

	^North new!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneForward stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 14:03:45'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 14:04:32'!
test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'llf'.

	self assertRover: marsRover at: 1@0 pointing: self south.	
	
	! !

!methodRemoval: MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneForward stamp: 'WAL 5/13/2023 14:04:32'!
test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'llf'.

	self assertRover: marsRover at: 1@0 pointing: self south.	
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 14:04:47'!
test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lf'.

	self assertRover: marsRover at: 0@1 pointing: self west.	
	
	! !

!methodRemoval: MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward stamp: 'WAL 5/13/2023 14:04:47'!
test15NorthOneLeftOneForwardCommandsPointsWestMovesOneForward

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lf'.

	self assertRover: marsRover at: 0@1 pointing: self west.	
	
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 14:08:25'!
test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lb'.

	self assertRover: marsRover at: 2@1 pointing: self west.	
	
	! !

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 14:08:26'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 14:10:02' prior: 50605396!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position isNorth ifTrue: [
				position := position + (0@-1).
			].
			position isWest ifTrue: [
				position := position + (-1@0).
			]
		].
		command = $l ifTrue: [ 
			pointing := pointing rotateLeft.
		].
		command = $r ifTrue: [ 
			pointing := pointing rotateRight.
		].
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 14:10:03'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 14:10:03'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 14:10:03'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 14:10:03'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 14:10:03'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 14:10:03'!
ERROR!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 14:10:03'!
ERROR!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 14:10:03'!
ERROR!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 14:10:03'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 14:10:03'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 14:10:03'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 14:10:03'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 14:10:03'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 14:10:03'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 14:10:03'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 14:10:03'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 14:10:03'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 14:10:03'!
ERROR!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 14:10:32' prior: 50605539!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			pointing isNorth ifTrue: [
				position := position + (0@-1).
			].
			pointing isWest ifTrue: [
				position := position + (-1@0).
			]
		].
		command = $l ifTrue: [ 
			pointing := pointing rotateLeft.
		].
		command = $r ifTrue: [ 
			pointing := pointing rotateRight.
		].
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 14:10:33'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 14:10:33'!
FAILURE!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 14:10:33'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 14:11:12' prior: 50605619!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			pointing isNorth ifTrue: [
				position := position + (0@-1).
			].
			pointing isWest ifTrue: [
				position := position + (1@0).
			]
		].
		command = $l ifTrue: [ 
			pointing := pointing rotateLeft.
		].
		command = $r ifTrue: [ 
			pointing := pointing rotateRight.
		].
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 14:11:13'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 14:12:11'!
test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'llb'.

	self assertRover: marsRover at: 1@2 pointing: self south.	
	
	! !

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 14:12:13'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 14:12:46' prior: 50605704!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			pointing isNorth ifTrue: [
				position := position + (0@-1).
			].
			pointing isWest ifTrue: [
				position := position + (1@0).
			].
			pointing isSouth ifTrue: [
				position := position + (0@1).
			].
		].
		command = $l ifTrue: [ 
			pointing := pointing rotateLeft.
		].
		command = $r ifTrue: [ 
			pointing := pointing rotateRight.
		].
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 14:12:49'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 14:13:44'!
test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'llb'.

	self assertRover: marsRover at: 0@1 pointing: self east.	
	
	! !

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 14:13:45'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 14:14:15' prior: 50605799!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			pointing isNorth ifTrue: [
				position := position + (0@-1).
			].
			pointing isWest ifTrue: [
				position := position + (1@0).
			].
			pointing isSouth ifTrue: [
				position := position + (0@1).
			].
			pointing isEast ifTrue: [
				position := position + (-1@0).
			].
		].
		command = $l ifTrue: [ 
			pointing := pointing rotateLeft.
		].
		command = $r ifTrue: [ 
			pointing := pointing rotateRight.
		].
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 14:14:16'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 14:14:16'!
FAILURE!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 14:14:16'!
FAILURE!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 14:14:32'!
FAILURE!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 14:14:32'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 14:14:45' prior: 50605885!
test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'lllb'.

	self assertRover: marsRover at: 0@1 pointing: self east.	
	
	! !

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 14:14:46'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 14:15:15' prior: 50605900!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position := position - pointing asVersor.
		].
		command = $l ifTrue: [ 
			pointing := pointing rotateLeft.
		].
		command = $r ifTrue: [ 
			pointing := pointing rotateRight.
		].
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 14:15:16'!
PASSED!

----SNAPSHOT----(13 May 2023 14:16:08) CuisUniversity-5706.image priorSource: 8713034!

----SNAPSHOT----(13 May 2023 14:23:53) CuisUniversity-5706.image priorSource: 8784820!

----STARTUP---- (13 May 2023 16:10:51) as /home/a/s/sw/smalltalk2/CuisUniversity-5706.image!


East class
	instanceVariableNames: 'uniqueInstance'!

!classDefinition: 'East class' category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 16:11:50'!
East class
	instanceVariableNames: 'uniqueInstance'!
!East class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 16:13:08' overrides: 16785646!
new

	uniqueInstance ifNil: [ uniqueInstance := self basicNew ].
	^uniqueInstance! !

!classDefinition: 'North class' category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 16:13:57'!
North class
	instanceVariableNames: 'uniqueInstance'!
!North class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 16:13:53' overrides: 16785646!
new

	uniqueInstance ifNil: [ uniqueInstance := self basicNew ].
	^uniqueInstance! !

!classDefinition: 'South class' category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 16:14:06'!
South class
	instanceVariableNames: 'uniqueInstance'!
!South class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 16:14:04' overrides: 16785646!
new

	uniqueInstance ifNil: [ uniqueInstance := self basicNew ].
	^uniqueInstance! !

!classDefinition: 'West class' category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 16:14:16'!
West class
	instanceVariableNames: 'uniqueInstance'!
!West class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 16:14:14' overrides: 16785646!
new

	uniqueInstance ifNil: [ uniqueInstance := self basicNew ].
	^uniqueInstance! !
!PointingDirection methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:48'!
left

	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:48' overrides: 50606231!
left

	^North new! !
!North methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:48' overrides: 50606231!
left

	^West new! !
!South methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:48' overrides: 50606231!
left

	^East new! !
!West methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:48' overrides: 50606231!
left

	^South new! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:48' prior: 50606091!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position := position - pointing asVersor.
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
		command = $r ifTrue: [ 
			pointing := pointing rotateRight.
		].
	].! !

!methodRemoval: PointingDirection #rotateLeft stamp: 'WAL 5/13/2023 16:15:48'!
rotateLeft

	self subclassResponsibility !

!methodRemoval: East #rotateLeft stamp: 'WAL 5/13/2023 16:15:48'!
rotateLeft

	^North new!

!methodRemoval: North #rotateLeft stamp: 'WAL 5/13/2023 16:15:48'!
rotateLeft

	^West new!

!methodRemoval: South #rotateLeft stamp: 'WAL 5/13/2023 16:15:48'!
rotateLeft

	^East new!

!methodRemoval: West #rotateLeft stamp: 'WAL 5/13/2023 16:15:48'!
rotateLeft

	^South new!
!PointingDirection methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:55'!
right

	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:55' overrides: 50606282!
right

	^South new! !
!North methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:55' overrides: 50606282!
right

	^East new! !
!South methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:55' overrides: 50606282!
right

	^West new! !
!West methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:55' overrides: 50606282!
right

	^North new! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:55' prior: 50606252!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position := position - pointing asVersor.
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
		command = $r ifTrue: [ 
			pointing := pointing right.
		].
	].! !

!methodRemoval: PointingDirection #rotateRight stamp: 'WAL 5/13/2023 16:15:55'!
rotateRight

	self subclassResponsibility !

!methodRemoval: East #rotateRight stamp: 'WAL 5/13/2023 16:15:55'!
rotateRight

	^South new!

!methodRemoval: North #rotateRight stamp: 'WAL 5/13/2023 16:15:55'!
rotateRight

	^East new!

!methodRemoval: South #rotateRight stamp: 'WAL 5/13/2023 16:15:55'!
rotateRight

	^West new!

!methodRemoval: West #rotateRight stamp: 'WAL 5/13/2023 16:15:55'!
rotateRight

	^North new!

!methodRemoval: East #isEast stamp: 'WAL 5/13/2023 16:16:24'!
isEast

	^true!
!MarsRoverTest methodsFor: 'assertions' stamp: 'WAL 5/13/2023 16:16:45' prior: 50603951!
assertRover: marsRover at: aPosition pointing: aPointingDirection

	self assert: aPosition                            equals: marsRover position.
	self assert: aPointingDirection equals: marsRover pointing.! !
!MarsRoverTest methodsFor: 'assertions' stamp: 'WAL 5/13/2023 16:16:57' prior: 50606335!
assertRover: marsRover at: aPosition pointing: aPointingDirection

	self assert: aPosition                equals: marsRover position.
	self assert: aPointingDirection equals: marsRover pointing.! !

!methodRemoval: North #isNorth stamp: 'WAL 5/13/2023 16:17:06'!
isNorth

	^true!

!methodRemoval: South #isSouth stamp: 'WAL 5/13/2023 16:17:09'!
isSouth

	^true!

!methodRemoval: West #isWest stamp: 'WAL 5/13/2023 16:17:12'!
isWest

	^true!

!methodRemoval: PointingDirection #isEast stamp: 'WAL 5/13/2023 16:17:19'!
isEast

	^false!

!methodRemoval: PointingDirection #isSouth stamp: 'WAL 5/13/2023 16:17:20'!
isSouth

	^false!

!methodRemoval: PointingDirection #isNorth stamp: 'WAL 5/13/2023 16:17:21'!
isNorth

	^false!

!methodRemoval: PointingDirection #isWest stamp: 'WAL 5/13/2023 16:17:22'!
isWest

	^false!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 16:17:31'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 16:19:23' prior: 50606303!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position := position - pointing asVersor
		].
		command = $l ifTrue: [ 
			pointing := pointing left
		].
		command = $r ifTrue: [ 
			pointing := pointing right
		].
	].! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 16:29:54' prior: 50606445!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position := position - pointing asVersor
		].
		command = $l ifTrue: [ 
			pointing := pointing left
		].
		command = $r ifTrue: [ 
			pointing := pointing right
		].
	
	
			
		"(self class methods) do: [ : method |
			
			]"
		
	].! !

	rover := MarsRover new.!

	rover := MarsRover startOn: 1@1 facing: self north.!

	rover := MarsRover startOn: 1@1 facing: North new.!

rover class methods.!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 16:33:24' prior: 50606459!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position := position - pointing asVersor
		].
		command = $l ifTrue: [ 
			pointing := pointing left
		].
		command = $r ifTrue: [ 
			pointing := pointing right
		].
	].! !

Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Command category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 16:33:41'!
Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

Command subclass: #Forward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Forward category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 16:34:06'!
Command subclass: #Forward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

Command subclass: #Backward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Backward category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 16:34:11'!
Command subclass: #Backward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

Command subclass: #Left
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Left category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 16:34:26'!
Command subclass: #Left
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

Command subclass: #Right
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Right category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 16:34:29'!
Command subclass: #Right
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

----End fileIn of /home/a/s/sw/smalltalk2/Pre-Numeros-Ejercicio-Solu.st----!

!classRemoval: #Fraccion stamp: 'WAL 5/13/2023 16:38:17'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 5/13/2023 16:38:17'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 5/13/2023 16:38:18'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 5/13/2023 16:38:18'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/a/s/sw/smalltalk2/Numero-Exercise.st----!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 16:51:22' prior: 50606480!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		commandCharacter = $f ifTrue: [
			position := position + pointing asVersor
		].
		commandCharacter = $b ifTrue: [
			position := position - pointing asVersor
		].
		commandCharacter = $l ifTrue: [ 
			pointing := pointing left
		].
		commandCharacter = $r ifTrue: [ 
			pointing := pointing right
		].
	].! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 16:59:05' prior: 50608037!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		| command |
		
		command := Command for: commandCharacter.
		
		"command executeOn: self."
		
		commandCharacter = $f ifTrue: [
			position := position + pointing asVersor
		].
		commandCharacter = $b ifTrue: [
			position := position - pointing asVersor
		].
		commandCharacter = $l ifTrue: [ 
			pointing := pointing left
		].
		commandCharacter = $r ifTrue: [ 
			pointing := pointing right
		].
	].! !
!Command class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 16:59:58'!
for: aCommandCharacter

	^ self allSubclasses anySatisfy: [ : subclass | subclass handles: aCommandCharacter]! !
!Backward class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:02:25' overrides: 16902133!
handles: aCommandCharacter

	^aCommandCharacter = $b! !
!Forward class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:02:34' overrides: 16902133!
handles: aCommandCharacter

	^aCommandCharacter = $f! !
!Left class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:02:44' overrides: 16902133!
handles: aCommandCharacter

	^aCommandCharacter = $l! !
!Right class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:02:51' overrides: 16902133!
handles: aCommandCharacter

	^aCommandCharacter = $r! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:04:03' prior: 50608052!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		| command |
		
		command := Command for: commandCharacter.
		
		command executeOn: self.
		
		commandCharacter = $f ifTrue: [
			position := position + pointing asVersor
		].
		commandCharacter = $b ifTrue: [
			position := position - pointing asVersor
		].
		commandCharacter = $l ifTrue: [ 
			pointing := pointing left
		].
		commandCharacter = $r ifTrue: [ 
			pointing := pointing right
		].
	].! !
!Backward methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:05:19'!
executeOn: aMarsRover.
		
	aMarsRover moveBackwards.! !
!Forward methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:05:34'!
executeOn: aMarsRover.
		
	aMarsRover moveForwards.! !
!Left methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:05:53'!
executeOn: aMarsRover.
		
	aMarsRover rotateLeft.! !
!Right methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:06:12'!
executeOn: aMarsRover.
		
	aMarsRover rotateRight.! !
!MarsRover methodsFor: 'private' stamp: 'WAL 5/13/2023 17:08:29'!
moveForwards

	position := position + pointing asVersor! !
!MarsRover methodsFor: 'private' stamp: 'WAL 5/13/2023 17:08:43'!
moveForward

	position := position + pointing asVersor! !
!Forward methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 17:08:43' prior: 50608119!
executeOn: aMarsRover.
		
	aMarsRover moveForward.! !

!methodRemoval: MarsRover #moveForwards stamp: 'WAL 5/13/2023 17:08:43'!
moveForwards

	position := position + pointing asVersor!
!MarsRover methodsFor: 'private' stamp: 'WAL 5/13/2023 17:09:09'!
moveBackwards

	position := position - pointing asVersor! !
!MarsRover methodsFor: 'private' stamp: 'WAL 5/13/2023 17:09:20'!
moveBackward

	position := position - pointing asVersor! !
!Backward methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 17:09:20' prior: 50608115!
executeOn: aMarsRover.
		
	aMarsRover moveBackward.! !

!methodRemoval: MarsRover #moveBackwards stamp: 'WAL 5/13/2023 17:09:20'!
moveBackwards

	position := position - pointing asVersor!
!MarsRover methodsFor: 'private' stamp: 'WAL 5/13/2023 17:09:45'!
rotateLeft

	pointing := pointing left! !
!MarsRover methodsFor: 'private' stamp: 'WAL 5/13/2023 17:10:05'!
rotateRight

	pointing := pointing right! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:10:23' prior: 50608097!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		| command |
		
		command := Command for: commandCharacter.
		
		command executeOn: self.
		
		"commandCharacter = $f ifTrue: [
			position := position + pointing asVersor
		].
		commandCharacter = $b ifTrue: [
			position := position - pointing asVersor
		].
		commandCharacter = $l ifTrue: [ 
			pointing := pointing left
		].
		commandCharacter = $r ifTrue: [ 
			pointing := pointing right
		]."
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:10:24'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:10:24'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:10:24'!
ERROR!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:10:33'!
ERROR!

	rover := MarsRover startOn: 1@1 facing: North new.!

	Command for: 'f'.!

	Command for: 'f'.!

----STARTUP---- (13 May 2023 17:18:45) as /home/a/s/sw/smalltalk2/CuisUniversity-5706.image!


!classDefinition: 'East class' category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
East class
	instanceVariableNames: 'uniqueInstance'!

!classDefinition: 'East class' category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
East class
	instanceVariableNames: 'uniqueInstance'!
!East class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 16:13:08' overrides: 16785646!
new

	uniqueInstance ifNil: [ uniqueInstance := self basicNew ].
	^uniqueInstance! !

!classDefinition: 'North class' category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
North class
	instanceVariableNames: 'uniqueInstance'!
!North class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 16:13:53' overrides: 16785646!
new

	uniqueInstance ifNil: [ uniqueInstance := self basicNew ].
	^uniqueInstance! !

!classDefinition: 'South class' category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
South class
	instanceVariableNames: 'uniqueInstance'!
!South class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 16:14:04' overrides: 16785646!
new

	uniqueInstance ifNil: [ uniqueInstance := self basicNew ].
	^uniqueInstance! !

!classDefinition: 'West class' category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
West class
	instanceVariableNames: 'uniqueInstance'!
!West class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 16:14:14' overrides: 16785646!
new

	uniqueInstance ifNil: [ uniqueInstance := self basicNew ].
	^uniqueInstance! !
!PointingDirection methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:48'!
left

	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:48' overrides: 50608320!
left

	^North new! !
!North methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:48' overrides: 50608320!
left

	^West new! !
!South methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:48' overrides: 50608320!
left

	^East new! !
!West methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:48' overrides: 50608320!
left

	^South new! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:48' prior: 50606091!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position := position - pointing asVersor.
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
		command = $r ifTrue: [ 
			pointing := pointing rotateRight.
		].
	].! !

!methodRemoval: PointingDirection #rotateLeft stamp: 'WAL 5/13/2023 17:18:51'!
rotateLeft

	self subclassResponsibility !

!methodRemoval: East #rotateLeft stamp: 'WAL 5/13/2023 17:18:51'!
rotateLeft

	^North new!

!methodRemoval: North #rotateLeft stamp: 'WAL 5/13/2023 17:18:51'!
rotateLeft

	^West new!

!methodRemoval: South #rotateLeft stamp: 'WAL 5/13/2023 17:18:51'!
rotateLeft

	^East new!

!methodRemoval: West #rotateLeft stamp: 'WAL 5/13/2023 17:18:51'!
rotateLeft

	^South new!
!PointingDirection methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:55'!
right

	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:55' overrides: 50608371!
right

	^South new! !
!North methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:55' overrides: 50608371!
right

	^East new! !
!South methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:55' overrides: 50608371!
right

	^West new! !
!West methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:55' overrides: 50608371!
right

	^North new! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 16:15:55' prior: 50608341!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position := position - pointing asVersor.
		].
		command = $l ifTrue: [ 
			pointing := pointing left.
		].
		command = $r ifTrue: [ 
			pointing := pointing right.
		].
	].! !

!methodRemoval: PointingDirection #rotateRight stamp: 'WAL 5/13/2023 17:18:51'!
rotateRight

	self subclassResponsibility !

!methodRemoval: East #rotateRight stamp: 'WAL 5/13/2023 17:18:51'!
rotateRight

	^South new!

!methodRemoval: North #rotateRight stamp: 'WAL 5/13/2023 17:18:51'!
rotateRight

	^East new!

!methodRemoval: South #rotateRight stamp: 'WAL 5/13/2023 17:18:51'!
rotateRight

	^West new!

!methodRemoval: West #rotateRight stamp: 'WAL 5/13/2023 17:18:51'!
rotateRight

	^North new!

!methodRemoval: East #isEast stamp: 'WAL 5/13/2023 17:18:51'!
isEast

	^true!
!MarsRoverTest methodsFor: 'assertions' stamp: 'WAL 5/13/2023 16:16:45' prior: 50603951!
assertRover: marsRover at: aPosition pointing: aPointingDirection

	self assert: aPosition                            equals: marsRover position.
	self assert: aPointingDirection equals: marsRover pointing.! !
!MarsRoverTest methodsFor: 'assertions' stamp: 'WAL 5/13/2023 16:16:57' prior: 50608424!
assertRover: marsRover at: aPosition pointing: aPointingDirection

	self assert: aPosition                equals: marsRover position.
	self assert: aPointingDirection equals: marsRover pointing.! !

!methodRemoval: North #isNorth stamp: 'WAL 5/13/2023 17:18:51'!
isNorth

	^true!

!methodRemoval: South #isSouth stamp: 'WAL 5/13/2023 17:18:51'!
isSouth

	^true!

!methodRemoval: West #isWest stamp: 'WAL 5/13/2023 17:18:51'!
isWest

	^true!

!methodRemoval: PointingDirection #isEast stamp: 'WAL 5/13/2023 17:18:51'!
isEast

	^false!

!methodRemoval: PointingDirection #isSouth stamp: 'WAL 5/13/2023 17:18:51'!
isSouth

	^false!

!methodRemoval: PointingDirection #isNorth stamp: 'WAL 5/13/2023 17:18:51'!
isNorth

	^false!

!methodRemoval: PointingDirection #isWest stamp: 'WAL 5/13/2023 17:18:51'!
isWest

	^false!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 16:19:23' prior: 50608392!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position := position - pointing asVersor
		].
		command = $l ifTrue: [ 
			pointing := pointing left
		].
		command = $r ifTrue: [ 
			pointing := pointing right
		].
	].! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 16:29:54' prior: 50608463!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position := position - pointing asVersor
		].
		command = $l ifTrue: [ 
			pointing := pointing left
		].
		command = $r ifTrue: [ 
			pointing := pointing right
		].
	
	
			
		"(self class methods) do: [ : method |
			
			]"
		
	].! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 16:33:24' prior: 50608477!
giveCommands: aCommandSequence

	aCommandSequence do: [ : command |
		command = $f ifTrue: [
			position := position + pointing asVersor
		].
		command = $b ifTrue: [
			position := position - pointing asVersor
		].
		command = $l ifTrue: [ 
			pointing := pointing left
		].
		command = $r ifTrue: [ 
			pointing := pointing right
		].
	].! !

!classDefinition: #Command category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Command category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Forward category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
Command subclass: #Forward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Forward category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
Command subclass: #Forward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Backward category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
Command subclass: #Backward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Backward category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
Command subclass: #Backward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Left category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
Command subclass: #Left
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Left category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
Command subclass: #Left
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Right category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
Command subclass: #Right
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #Right category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:18:51'!
Command subclass: #Right
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:51'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:51'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/24/2020 02:50:52' overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := Fraccion with: one over: two.
	oneFifth := Fraccion with: one over: five.
	twoFifth := Fraccion with: two over: five.
	twoTwentyfifth := Fraccion with: two over: (Entero with: 25).
	fiveHalfs := Fraccion with: five over: two.
	negativeOneHalf := Fraccion with: negativeOne over: two.
	! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:08:06'!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:09:48'!
test02isCeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:09:55'!
test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:10:04'!
test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:10:14'!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:10:25'!
test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 23:05:07'!
test07FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := Fraccion with: (Entero with: 7) over: (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:11:26'!
test08FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 23:05:17'!
test09AparentFraccionesAreEqual

	self assert: oneHalf equals: (Fraccion with: two over: four)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:12:46'!
test10AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:26:23'!
test11MultiplyingFraccionesCanReturnAnEntero

	self assert: (twoFifth) * (fiveHalfs) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:13:21'!
test12AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:13:30'!
test13AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:14:16'!
test14NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/24/2020 02:51:13'!
test15NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: negativeOneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 23:05:37'!
test16SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (Fraccion with: negativeOne over: negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 23:05:42'!
test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (Fraccion with: one over: negativeTwo)! !

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:51'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:51'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/8/2019 22:57:14'!
* aMultiplier 

	^self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/8/2019 22:57:00'!
+ anAdder 
	
	^self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/8/2019 23:00:35'!
negated

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'NR 9/8/2019 23:00:04'!
isNegative

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'NR 9/8/2019 23:00:14'!
isOne

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'NR 9/8/2019 23:00:22'!
isZero

	self subclassResponsibility ! !

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:51'!
Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:51'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 17:02:08'!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero!!!!!!'! !

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:51'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:51'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'initialization' stamp: 'NR 9/8/2019 22:32:50'!
initializeWith: aValue
	
	value := aValue! !
!Entero methodsFor: 'comparing' stamp: 'NR 9/8/2019 22:58:12' overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ value = anObject integerValue ]! !
!Entero methodsFor: 'comparing' stamp: 'NR 9/8/2019 22:42:34' overrides: 16901788!
hash

	^value hash.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NR 9/8/2019 22:54:29' overrides: 50608733!
* aMultiplier 
	
	^self class with: value * aMultiplier integerValue
		
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NR 9/8/2019 22:55:15' overrides: 50608737!
+ anAdder 
	
	^self class with: value + anAdder integerValue 
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NR 9/8/2019 22:56:37'!
// aDivisor 

	 ^self class with: value // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NR 9/8/2019 22:52:04'!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (value gcd: anEntero integerValue)! !
!Entero methodsFor: 'arithmetic operations' stamp: 'NR 9/8/2019 23:07:58' overrides: 50608741!
negated
	
	^self * (self class with: -1)
	! !
!Entero methodsFor: 'printing' stamp: 'NR 9/8/2019 22:29:40' overrides: 16902975!
printOn: aStream
	
	 aStream print: value.
	! !
!Entero methodsFor: 'value' stamp: 'NR 9/8/2019 22:39:05'!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !
!Entero methodsFor: 'testing' stamp: 'NR 9/8/2019 22:36:29' overrides: 50608745!
isNegative

	^value < 0! !
!Entero methodsFor: 'testing' stamp: 'NR 9/8/2019 22:37:27' overrides: 50608749!
isOne
	
	^value = 1
! !
!Entero methodsFor: 'testing' stamp: 'NR 9/8/2019 22:38:23' overrides: 50608753!
isZero
	
	^value = 0
	! !

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:51'!
Entero class
	instanceVariableNames: ''!

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:51'!
Entero class
	instanceVariableNames: ''!
!Entero class methodsFor: 'as yet unclassified' stamp: 'NR 9/8/2019 22:32:02'!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initializeWith: aValue! !

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:51'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:51'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fraccion methodsFor: 'accessing' stamp: 'NR 9/8/2019 22:39:29'!
denominator

	^denominator! !
!Fraccion methodsFor: 'accessing' stamp: 'NR 9/8/2019 22:40:00'!
numerator

	^numerator! !
!Fraccion methodsFor: 'initialization' stamp: 'NR 9/8/2019 22:33:11'!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].

	numerator := aNumerator.
	denominator := aDenominator ! !
!Fraccion methodsFor: 'comparing' stamp: 'NR 9/8/2019 22:58:37' overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ (numerator * anObject denominator) = (denominator * anObject numerator) ]! !
!Fraccion methodsFor: 'comparing' stamp: 'NR 9/8/2019 22:43:08' overrides: 16901788!
hash

	^(numerator hash / denominator hash) hash! !
!Fraccion methodsFor: 'testing' stamp: 'NR 9/8/2019 22:36:50' overrides: 50608745!
isNegative

	^denominator < 0! !
!Fraccion methodsFor: 'testing' stamp: 'NR 9/8/2019 22:37:42' overrides: 50608749!
isOne
	
	^false! !
!Fraccion methodsFor: 'testing' stamp: 'NR 9/8/2019 22:38:37' overrides: 50608753!
isZero

	^false! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NR 9/8/2019 23:03:16' overrides: 50608733!
* aMultiplier 
		
	^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator)
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NR 9/8/2019 22:55:40' overrides: 50608737!
+ anAdder 
	
	| newNumerator newDenominator |
	
	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	
	^ self class with: newNumerator over: newDenominator 
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'NR 9/8/2019 23:08:35' overrides: 50608741!
negated
	
	 ^self class with: numerator * (Entero with: -1) over: denominator .! !
!Fraccion methodsFor: 'printing' stamp: 'NR 9/8/2019 22:30:07' overrides: 16902975!
printOn: aStream

	aStream 
		print: numerator;
		nextPut: $/;
		print: denominator .! !

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:51'!
Fraccion class
	instanceVariableNames: ''!

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:51'!
Fraccion class
	instanceVariableNames: ''!
!Fraccion class methodsFor: 'as yet unclassified' stamp: 'NR 9/8/2019 23:10:10'!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !

!classRemoval: #Fraccion stamp: 'WAL 5/13/2023 17:18:51'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'WAL 5/13/2023 17:18:51'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'WAL 5/13/2023 17:18:52'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'WAL 5/13/2023 17:18:52'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:11'!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:12'!
test02isCeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:14'!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:18'!
test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:20'!
test07EnteroDividesEnteroCorrectly

	self assert: two / two equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:38'!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:52'!
test09FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:56'!
test10FraccionDividesFraccionCorrectly
"
    La division de fracciones es:
	 
	(a/b) / (c/d) = (a.d) / (b.c)
"

	self assert: oneHalf / oneFifth equals: fiveHalfs! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:50'!
test13EnteroMultipliesFraccionCorrectly

	self assert: two * oneFifth equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:52'!
test14FraccionMultipliesEnteroCorrectly

	self assert: oneFifth * two equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:57'!
test15EnteroDividesFraccionCorrectly

	self assert: one / twoFifth equals: fiveHalfs  ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:59'!
test16FraccionDividesEnteroCorrectly

	self assert: twoFifth / five equals: twoTwentyfifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:38'!
test17AFraccionCanBeEqualToAnEntero

	self assert: two equals: four / two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:39'!
test18AparentFraccionesAreEqual

	self assert: oneHalf equals: two / four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:40'!
test19AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test20MultiplyingFraccionesCanReturnAnEntero

	self assert: (two/five) * (five/two) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test21DividingFraccionesCanReturnAnEntero

	self assert: oneHalf / oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:43'!
test22DividingEnterosCanReturnAFraccion

	self assert: two / four equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test23CanNotDivideEnteroByZero

	self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test24CanNotDivideFraccionByZero

	self 
		should: [ oneHalf / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test25AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test26AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 4/15/2021 16:45:35'!
test27EnteroSubstractsEnteroCorrectly

	self assert: four - one equals: three! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:47:41'!
test28FraccionSubstractsFraccionCorrectly
	
	self assert: twoFifth - oneFifth equals: oneFifth.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:00'!
test29EnteroSubstractsFraccionCorrectly

	self assert: one - oneHalf equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:05'!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:08'!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:48'!
test32SubstractingSameEnterosReturnsZero

	self assert: one - one equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:01'!
test33SubstractingSameFraccionesReturnsZero

	self assert: oneHalf - oneHalf equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:14'!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:23'!
test35FibonacciZeroIsOne

	self assert: zero fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:32'!
test36FibonacciOneIsOne

	self assert: one fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:39'!
test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros

	self assert: four fibonacci equals: five.
	self assert: three fibonacci equals: three. 
	self assert: five fibonacci equals: four fibonacci + three fibonacci.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:47'!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:55'!
test39NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:03'!
test40NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: negativeOne / two.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:11'!
test41SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (negativeOne / negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:17'!
test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (one / negativeTwo)! !
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/23/2018 23:46:28' overrides: 16961394!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
* aMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
+ anAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 22:21:28'!
- aSubtrahend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
/ aDivisor

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:19:28'!
addEntero: unEntero
	
	self subclassResponsibility.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:19:01'!
addFraccion: unaFraccion 
	
	self subclassResponsibility.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:27:32'!
divideAFraccion: unaFraccion
	
	self subclassResponsibility! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:27:40'!
divideAnEntero: unaFraccion
	
	self subclassResponsibility! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
invalidNumberType

	self error: self class invalidNumberTypeErrorDescription! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:28:05'!
multiplyWithEntero: unNumero

	self subclassResponsibility! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:28:14'!
multiplyWithFraccion: unaFraccion 
	
	self subclassResponsibility.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:37:13'!
negated
	
	^self * (Entero with: -1)! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:28:25'!
substractToEntero: unEntero
	
	self subclassResponsibility.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:28:33'!
substractToFraccion: unaFraccion
	
	self subclassResponsibility.! !
!Numero methodsFor: 'testing' stamp: 'NR 9/23/2018 23:36:49'!
isNegative

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isOne

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isZero

	self subclassResponsibility ! !

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:02'!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero!!!!!!'! !
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:09'!
invalidNumberTypeErrorDescription
	
	^ 'Tipo de número inválido!!!!!!'! !

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:24:34' overrides: 50609330!
* aMultiplier 
	
	^aMultiplier multiplyWithEntero: self.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:19:21' overrides: 50609335!
+ anAdder 
	
	^anAdder addEntero: self.
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:25:26' overrides: 50609339!
- aSubtrahend

	^ aSubtrahend substractToEntero: self.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:21:09' overrides: 50609344!
/ aDivisor 

	^aDivisor divideAnEntero: self.
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/17/2023 21:32:24'!
// aDivisor 
	
	^self class with: self integerValue // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:26:11' overrides: 50609348!
addEntero: unEntero 
	
	^self class with: self integerValue + unEntero integerValue.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:25:56' overrides: 50609353!
addFraccion: unaFraccion
	
	^unaFraccion addEntero: self.
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:23:05'!
divideANumerator: aNumerator
	
	^Fraccion new initializeWith: aNumerator over: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:21:14' overrides: 50609363!
divideAnEntero: unEntero

	 self subclassResponsibility ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:07:51'!
fibonacci

	self subclassResponsibility 
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'WAL 4/17/2023 21:32:44'!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (self integerValue gcd: anEntero integerValue)! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:24:43' overrides: 50609373!
multiplyWithEntero: unEntero
	
	^self class with: self integerValue * unEntero integerValue
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:24:34' overrides: 50609378!
multiplyWithFraccion: unaFraccion 
	
	^unaFraccion multiplyWithEntero: self.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:25:35' overrides: 50609387!
substractToEntero: unEntero

	^ self class with: unEntero integerValue - self integerValue.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:25:11' overrides: 50609392!
substractToFraccion: unaFraccion

	^ Fraccion
			with: unaFraccion numerator - (self * unaFraccion denominator)
			over: unaFraccion denominator! !
!Entero methodsFor: 'comparing' stamp: 'AS 4/18/2023 22:30:32' overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ self integerValue = anObject integerValue ]! !
!Entero methodsFor: 'comparing' stamp: 'AS 4/19/2023 19:10:01' overrides: 16901788!
hash

	^ self integerValue hash! !
!Entero methodsFor: 'initialization' stamp: 'AS 4/19/2023 19:20:30' overrides: 50609358!
divideAFraccion: unaFraccion
	
	^Fraccion with: unaFraccion numerator over: unaFraccion denominator * self! !
!Entero methodsFor: 'initialization' stamp: 'AS 4/19/2023 19:10:45'!
initializeWith: aValue 
	
	self subclassResponsibility ! !
!Entero methodsFor: 'value' stamp: 'AS 4/19/2023 19:11:03'!
integerValue

	self subclassResponsibility ! !
!Entero methodsFor: 'printing' stamp: 'WAL 4/18/2023 18:01:59' overrides: 16902975!
printOn: aStream

	aStream print: self integerValue ! !
!Entero methodsFor: 'testing' stamp: 'AS 4/19/2023 19:11:15' overrides: 50609397!
isNegative
	
	self subclassResponsibility ! !
!Entero methodsFor: 'testing' stamp: 'AS 4/19/2023 19:11:21' overrides: 50609401!
isOne
	
	self subclassResponsibility ! !
!Entero methodsFor: 'testing' stamp: 'AS 4/19/2023 19:11:26' overrides: 50609405!
isZero
	
	self subclassResponsibility ! !

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Entero class
	instanceVariableNames: ''!

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Entero class
	instanceVariableNames: ''!
!Entero class methodsFor: 'error descriptions' stamp: 'AS 4/19/2023 19:12:20'!
negativeFibonacciErrorDescription

	^ ' Fibonacci no está definido aquí para Enteros Negativos!!!!!!'! !
!Entero class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 19:11:55'!
isConstructedWith: aValue 
	
	self subclassResponsibility 
! !
!Entero class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 19:13:00'!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^(Entero subclasses detect: [:enteroSubclass | enteroSubclass isConstructedWith: aValue]) initializeWith: aValue

! !

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Cero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:55:04' overrides: 50609558!
isNegative
	
	^false! !
!Cero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:54:15' overrides: 50609562!
isOne
	
	^false! !
!Cero methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:27:35' overrides: 50609566!
isZero
	
	^true! !
!Cero methodsFor: 'value' stamp: 'WAL 4/17/2023 21:17:24' overrides: 50609548!
integerValue

	^0! !
!Cero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:28:47' overrides: 50609485!
divideAnEntero: unEntero

	self error: Numero canNotDivideByZeroErrorDescription! !
!Cero methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:07:13' overrides: 50609490!
fibonacci
	
	^ Uno new! !

!classDefinition: 'Cero class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Cero class
	instanceVariableNames: ''!

!classDefinition: 'Cero class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Cero class
	instanceVariableNames: ''!
!Cero class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 13:42:01'!
initializeWith: aValue
	
	^Cero new! !
!Cero class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 18:55:34' overrides: 50609585!
isConstructedWith: aValue
	
	^ aValue = 0! !

!classDefinition: #EnteroSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Entero subclass: #EnteroSalvoCeroNiUno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!EnteroSalvoCeroNiUno methodsFor: 'initialization' stamp: 'WAL 4/18/2023 20:16:39' overrides: 50609544!
initializeWith: aValue 
	
	value := aValue! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/18/2023 19:09:14' overrides: 50609548!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'AS 4/19/2023 19:13:54' overrides: 50609558!
isNegative
	
	self subclassResponsibility ! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:54:27' overrides: 50609562!
isOne
	
	^false! !
!EnteroSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:27:42' overrides: 50609566!
isZero
	
	^false! !
!EnteroSalvoCeroNiUno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:28:58' overrides: 50609485!
divideAnEntero: unEntero
	
	self subclassResponsibility ! !
!EnteroSalvoCeroNiUno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:06:52' overrides: 50609490!
fibonacci
	
	self subclassResponsibility ! !

!classDefinition: 'EnteroSalvoCeroNiUno class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
EnteroSalvoCeroNiUno class
	instanceVariableNames: ''!

!classDefinition: 'EnteroSalvoCeroNiUno class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
EnteroSalvoCeroNiUno class
	instanceVariableNames: ''!
!EnteroSalvoCeroNiUno class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 18:55:34'!
initializeWith: aValue
	
	"Estamos asumiendo que ninguna subclase tiene subclases y por eso usamos el new.
	 Podríamos ser mas genéricos si quitamos el new y cada subclase se crea en initializeWith,
	 pero en este caso ambas subclases tendrian el mismo código."
	
	^(self subclasses detect: [:subclass | subclass isConstructedWith: aValue]) new initializeWith: aValue
! !
!EnteroSalvoCeroNiUno class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 18:55:34' overrides: 50609585!
isConstructedWith: aValue

	^ self subclasses anySatisfy: [:subclass | subclass isConstructedWith: aValue]! !

!classDefinition: #EnteroNegativoSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
EnteroSalvoCeroNiUno subclass: #EnteroNegativoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroNegativoSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
EnteroSalvoCeroNiUno subclass: #EnteroNegativoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!EnteroNegativoSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:56:00' overrides: 50609690!
isNegative
	
	^true! !
!EnteroNegativoSalvoCeroNiUno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:29:29' overrides: 50609704!
divideAnEntero: unEntero

	^unEntero negated / self negated! !
!EnteroNegativoSalvoCeroNiUno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:06:33' overrides: 50609710!
fibonacci
	
	self error: Entero negativeFibonacciErrorDescription! !

!classDefinition: 'EnteroNegativoSalvoCeroNiUno class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
EnteroNegativoSalvoCeroNiUno class
	instanceVariableNames: ''!

!classDefinition: 'EnteroNegativoSalvoCeroNiUno class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
EnteroNegativoSalvoCeroNiUno class
	instanceVariableNames: ''!
!EnteroNegativoSalvoCeroNiUno class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 18:55:34' overrides: 50609741!
isConstructedWith: aValue
	
	^ aValue < 0! !

!classDefinition: #EnteroPositivoSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
EnteroSalvoCeroNiUno subclass: #EnteroPositivoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroPositivoSalvoCeroNiUno category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
EnteroSalvoCeroNiUno subclass: #EnteroPositivoSalvoCeroNiUno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!EnteroPositivoSalvoCeroNiUno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:56:33' overrides: 50609690!
isNegative
	
	^false! !
!EnteroPositivoSalvoCeroNiUno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:57:36' overrides: 50609704!
divideAnEntero: unEntero

	| greatestCommonDivisor numerator denominator |
	
	greatestCommonDivisor := unEntero greatestCommonDivisorWith: self. 
	numerator := unEntero // greatestCommonDivisor.
	denominator := self // greatestCommonDivisor.

	^denominator divideANumerator: numerator
	
	"Si el denominador es 1, debe devolver un Entero, en caso contrario debe devolver una fracción
	Para quitar el if, hicimos un nuevo mensaje (divideANumerator) que diferencie entre el 1 y los demás enteros."
	
"	(denominator isOne)	 ifTrue: [^numerator].
	^Fraccion new initializeWith: numerator over: denominator"

	
	
! !
!EnteroPositivoSalvoCeroNiUno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:05:40' overrides: 50609710!
fibonacci

	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	^ (self - one) fibonacci + (self - two) fibonacci! !

!classDefinition: 'EnteroPositivoSalvoCeroNiUno class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
EnteroPositivoSalvoCeroNiUno class
	instanceVariableNames: ''!

!classDefinition: 'EnteroPositivoSalvoCeroNiUno class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
EnteroPositivoSalvoCeroNiUno class
	instanceVariableNames: ''!
!EnteroPositivoSalvoCeroNiUno class methodsFor: 'as yet unclassified' stamp: 'AS 4/19/2023 18:55:34' overrides: 50609741!
isConstructedWith: aValue
	
	^ aValue > 1! !

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Uno methodsFor: 'value' stamp: 'WAL 4/17/2023 21:17:32' overrides: 50609548!
integerValue

	^1! !
!Uno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:56:43' overrides: 50609558!
isNegative
	
	^false! !
!Uno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:54:34' overrides: 50609562!
isOne
	
	^true! !
!Uno methodsFor: 'testing' stamp: 'WAL 4/17/2023 21:27:48' overrides: 50609566!
isZero
	
	^false! !
!Uno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:23:05' overrides: 50609479!
divideANumerator: aNumerator
	
	^aNumerator! !
!Uno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:30:16' overrides: 50609485!
divideAnEntero: unEntero

	^ unEntero! !
!Uno methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:07:32' overrides: 50609490!
fibonacci
	
	^ Uno new! !

!classDefinition: 'Uno class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Uno class
	instanceVariableNames: ''!

!classDefinition: 'Uno class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Uno class
	instanceVariableNames: ''!
!Uno class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 13:42:33'!
initializeWith: aValue
	
	^ Uno new! !
!Uno class methodsFor: 'instance creation' stamp: 'AS 4/19/2023 18:55:34' overrides: 50609585!
isConstructedWith: aValue
	
	^ aValue = 1! !

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:52'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:53'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:24:05' overrides: 50609330!
* aMultiplier 
	
	^aMultiplier multiplyWithFraccion: self.
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:18:20' overrides: 50609335!
+ anAdder 
	
	^anAdder addFraccion: self.
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:24:59' overrides: 50609339!
- aSubtrahend 

	^ aSubtrahend substractToFraccion: self.
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:19:58' overrides: 50609344!
/ aDivisor 

	^aDivisor divideAFraccion: self.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:30:43' overrides: 50609348!
addEntero: unEntero 
	
	| nuevoNumerador |
	
	nuevoNumerador := (unEntero * self denominator) + self numerator .
	
	^self class with: nuevoNumerador over: self denominator.
	
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:31:00' overrides: 50609353!
addFraccion: unaFraccion 

	| newNumerator newDenominator |
	
	newNumerator := (numerator * unaFraccion denominator) + (denominator * unaFraccion numerator).
	newDenominator := denominator * unaFraccion denominator.
	
	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:31:19' overrides: 50609358!
divideAFraccion: unaFraccion
	
	^Fraccion with: unaFraccion numerator * self denominator over: unaFraccion denominator * self numerator

! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:31:32' overrides: 50609363!
divideAnEntero: unEntero
	
	^Fraccion with: unEntero * self denominator over: self numerator

! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:32:32'!
divideByEntero: unEntero
	
	^numerator / (denominator * unEntero integerValue)! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:32:09'!
divideByFraccion: unaFraccion
	
	^(numerator * unaFraccion denominator) / (denominator * unaFraccion numerator)! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:32:43' overrides: 50609373!
multiplyWithEntero: unEntero
	
	^self class with: self numerator * unEntero over: self denominator 
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:33:25' overrides: 50609378!
multiplyWithFraccion: unaFraccion
	
	^(self numerator * unaFraccion numerator) / (self denominator * unaFraccion denominator)
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:33:51' overrides: 50609387!
substractToEntero: unEntero

	^ self class
			with: unEntero * self denominator - self numerator
			over: self denominator
	
	
	

! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'AS 4/19/2023 19:34:06' overrides: 50609392!
substractToFraccion: unaFraccion

	^ self class
			with: unaFraccion numerator * self denominator - (self numerator * unaFraccion denominator)
			over: unaFraccion denominator * self denominator
	
	
	

! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:42' overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ (numerator * anObject denominator) = (denominator * anObject numerator) ]! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:50' overrides: 16901788!
hash

	^(numerator hash / denominator hash) hash! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56'!
denominator

	^ denominator! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56'!
numerator

	^ numerator! !
!Fraccion methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 22:54'!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	numerator := aNumerator.
	denominator := aDenominator ! !
!Fraccion methodsFor: 'testing' stamp: 'NR 9/23/2018 23:41:38' overrides: 50609397!
isNegative
	
	^numerator < 0! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' overrides: 50609401!
isOne
	
	^false! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' overrides: 50609405!
isZero
	
	^false! !
!Fraccion methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:54:46' overrides: 16902975!
printOn: aStream

	aStream 
		print: numerator;
		nextPut: $/;
		print: denominator ! !

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:53'!
Fraccion class
	instanceVariableNames: ''!

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'WAL 5/13/2023 17:18:53'!
Fraccion class
	instanceVariableNames: ''!
!Fraccion class methodsFor: 'intance creation' stamp: 'AS 4/19/2023 19:21:09'!
with: aDividend over: aDivisor

	^ aDivisor divideAnEntero: aDividend
! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 16:51:22' prior: 50608493!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		commandCharacter = $f ifTrue: [
			position := position + pointing asVersor
		].
		commandCharacter = $b ifTrue: [
			position := position - pointing asVersor
		].
		commandCharacter = $l ifTrue: [ 
			pointing := pointing left
		].
		commandCharacter = $r ifTrue: [ 
			pointing := pointing right
		].
	].! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 16:59:05' prior: 50610110!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		| command |
		
		command := Command for: commandCharacter.
		
		"command executeOn: self."
		
		commandCharacter = $f ifTrue: [
			position := position + pointing asVersor
		].
		commandCharacter = $b ifTrue: [
			position := position - pointing asVersor
		].
		commandCharacter = $l ifTrue: [ 
			pointing := pointing left
		].
		commandCharacter = $r ifTrue: [ 
			pointing := pointing right
		].
	].! !
!Command class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 16:59:58'!
for: aCommandCharacter

	^ self allSubclasses anySatisfy: [ : subclass | subclass handles: aCommandCharacter]! !
!Backward class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:02:25' overrides: 16902133!
handles: aCommandCharacter

	^aCommandCharacter = $b! !
!Forward class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:02:34' overrides: 16902133!
handles: aCommandCharacter

	^aCommandCharacter = $f! !
!Left class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:02:44' overrides: 16902133!
handles: aCommandCharacter

	^aCommandCharacter = $l! !
!Right class methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:02:51' overrides: 16902133!
handles: aCommandCharacter

	^aCommandCharacter = $r! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:04:03' prior: 50610125!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		| command |
		
		command := Command for: commandCharacter.
		
		command executeOn: self.
		
		commandCharacter = $f ifTrue: [
			position := position + pointing asVersor
		].
		commandCharacter = $b ifTrue: [
			position := position - pointing asVersor
		].
		commandCharacter = $l ifTrue: [ 
			pointing := pointing left
		].
		commandCharacter = $r ifTrue: [ 
			pointing := pointing right
		].
	].! !
!Backward methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:05:19'!
executeOn: aMarsRover.
		
	aMarsRover moveBackwards.! !
!Forward methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:05:34'!
executeOn: aMarsRover.
		
	aMarsRover moveForwards.! !
!Left methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:05:53'!
executeOn: aMarsRover.
		
	aMarsRover rotateLeft.! !
!Right methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:06:12'!
executeOn: aMarsRover.
		
	aMarsRover rotateRight.! !
!MarsRover methodsFor: 'private' stamp: 'WAL 5/13/2023 17:08:29'!
moveForwards

	position := position + pointing asVersor! !
!MarsRover methodsFor: 'private' stamp: 'WAL 5/13/2023 17:08:43'!
moveForward

	position := position + pointing asVersor! !
!Forward methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 17:08:43' prior: 50610192!
executeOn: aMarsRover.
		
	aMarsRover moveForward.! !

!methodRemoval: MarsRover #moveForwards stamp: 'WAL 5/13/2023 17:18:53'!
moveForwards

	position := position + pointing asVersor!
!MarsRover methodsFor: 'private' stamp: 'WAL 5/13/2023 17:09:09'!
moveBackwards

	position := position - pointing asVersor! !
!MarsRover methodsFor: 'private' stamp: 'WAL 5/13/2023 17:09:20'!
moveBackward

	position := position - pointing asVersor! !
!Backward methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 17:09:20' prior: 50610188!
executeOn: aMarsRover.
		
	aMarsRover moveBackward.! !

!methodRemoval: MarsRover #moveBackwards stamp: 'WAL 5/13/2023 17:18:53'!
moveBackwards

	position := position - pointing asVersor!
!MarsRover methodsFor: 'private' stamp: 'WAL 5/13/2023 17:09:45'!
rotateLeft

	pointing := pointing left! !
!MarsRover methodsFor: 'private' stamp: 'WAL 5/13/2023 17:10:05'!
rotateRight

	pointing := pointing right! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:10:23' prior: 50610170!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		| command |
		
		command := Command for: commandCharacter.
		
		command executeOn: self.
		
		"commandCharacter = $f ifTrue: [
			position := position + pointing asVersor
		].
		commandCharacter = $b ifTrue: [
			position := position - pointing asVersor
		].
		commandCharacter = $l ifTrue: [ 
			pointing := pointing left
		].
		commandCharacter = $r ifTrue: [ 
			pointing := pointing right
		]."
	].! !
!Command class methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 17:19:49' prior: 50610143!
for: aCommandCharacter

	^ Command allSubclasses anySatisfy: [ : subclass | subclass handles: aCommandCharacter]! !

Command allSubclasses .!

Forward handles: 'f'.!

Forward handles: $f. !
!Command class methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 17:22:04' prior: 50610265!
for: aCommandCharacter

	^ Command allSubclasses detect: [ : subclass | subclass handles: aCommandCharacter]! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:22:22'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:22:22'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:22:22'!
ERROR!

Command for: $f.!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:23:09'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:23:11'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:23:13'!
ERROR!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:23:13'!
ERROR!
!Command class methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 17:24:15' prior: 50610274!
for: aCommandCharacter

	^ (Command allSubclasses detect: [ : subclass | subclass handles: aCommandCharacter]) new! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:24:25'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:24:28'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:24:31'!
PASSED!

----SNAPSHOT----(13 May 2023 17:24:43) CuisUniversity-5706.image priorSource: 8784908!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:25:09' prior: 50610246!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		| command |
		
		command := Command for: commandCharacter.
		
		command executeOn: self.
		
	].! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 17:26:40'!
test21InvalidCharShouldRaiseError

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'x'.

	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 17:28:44' prior: 50610462!
test21InvalidCharShouldRaiseError

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	

	self
		should: [ marsRover giveCommands: 'x'. ]
		raise: Error
		withExceptionDo: [
			
		].

	"self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]"
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 17:29:02' prior: 50610470!
test21InvalidCharShouldRaiseError

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	

	self
		should: [ marsRover giveCommands: 'x'. ]
		raise: Error
		withExceptionDo: [
			self assertRover: marsRover at: 1@1 pointing: self north.
		].

	"self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]"
	
	! !

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:29:07'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 17:29:53' prior: 50610485!
test21InvalidCharShouldRaiseError

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	

	self
		should: [ marsRover giveCommands: 'x'. ]
		raise: Error
		withExceptionDo: [
			:anError | self assertRover: marsRover at: 1@1 pointing: self north.
		].

	"self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]"
	
	! !

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:29:54'!
PASSED!

	marsRover := MarsRover startOn: 1@1 facing: self north.!

	marsRover := MarsRover startOn: 1@1 facing: North new.!

	marsRover giveCommands: 'x'.!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 17:31:48' prior: 50610505!
test21InvalidCharShouldRaiseError

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.
	
	marsRover giveCommands: 'x'. 

	self
		should: [ marsRover giveCommands: 'x'. ]
		raise: Error
		withExceptionDo: [
			: anError | self assertRover: marsRover at: 1@1 pointing: self north.
		].
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 17:31:59' prior: 50610605!
test21InvalidCharShouldRaiseError

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.

	self
		should: [ marsRover giveCommands: 'x'. ]
		raise: Error
		withExceptionDo: [
			: anError | self assertRover: marsRover at: 1@1 pointing: self north.
		].
	! !

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:32:01'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position pointing commands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!

!classDefinition: #MarsRover category: 'MarsRoverEjercicio' stamp: 'WAL 5/13/2023 17:36:11'!
Object subclass: #MarsRover
	instanceVariableNames: 'position pointing commands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverEjercicio'!
!MarsRover methodsFor: 'initialize' stamp: 'WAL 5/13/2023 17:37:51' prior: 50604132!
initializeStartOn: aPoint facing: aDirection 

	position := aPoint.
	pointing := aDirection.
	commands := Set with: Forward new with: Backward new with: Left new with: Right new! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:44:18' prior: 50610454!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		"| command |
		
		command := Command for: commandCharacter.
		
		command executeOn: self."
		
		| command |
		
		command := commands detect: [ : each | each handles: commandCharacter ].
		
		command ifNotNil: [
			command executeOn: self.
		]
	].! !

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:44:33'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:44:33'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:44:33'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:44:33'!
ERROR!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:44:33'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:44:50'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:44:50'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:44:50'!
ERROR!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:44:50'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:44:58'!
ERROR!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:45:49' prior: 50610730!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		"| command |
		
		command := Command for: commandCharacter.
		
		command executeOn: self."
		
		| command |
		
		command := commands detect: [ : each | each handles: commandCharacter ]  ifNone: [].
		
		command ifNotNil: [
			command executeOn: self.
		]
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:45:52'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:45:52'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:46:15'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:46:15'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:46:15'!
FAILURE!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:46:18'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:47:09' prior: 50610898!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		"| command |
		
		command := Command for: commandCharacter.
		
		command executeOn: self."
		
		| command |
		
		command := commands detect: [ : each | each handles: commandCharacter ].
		
		command ifNotNil: [
			command executeOn: self.
		]
	].! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:47:25' prior: 50611066!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		"| command |
		
		command := Command for: commandCharacter.
		
		command executeOn: self."
		
		| command |
		
		command := commands detect: [ : each | each class handles: commandCharacter ].
		
		command ifNotNil: [
			command executeOn: self.
		]
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:47:30'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:47:59' prior: 50611079!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		"| command |
		
		command := Command for: commandCharacter.
		
		command executeOn: self."
		
		| command |
		
		command := commands detect: [ : each | each class handles: commandCharacter ]  ifNone: [].
		
		command ifNotNil: [
			command executeOn: self.
		]
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:48:04'!
PASSED!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:48:04'!
FAILURE!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:48:04'!
FAILURE!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:48:47'!
PASSED!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:48:47'!
FAILURE!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:48:47'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:49:59' prior: 50611167!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		
		| command |
		
		command := commands detect: [ : each | each class handles: commandCharacter ]  ifNone: [
			self error: 'Invalid command.'
		].
		
		command ifNotNil: [
			command executeOn: self.
		]
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:50:04'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:50:27' prior: 50611337!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		
		| command |
		
		command := commands detect: [ : each | each class handles: commandCharacter ]  ifNone: [
			self error: 'Invalid command.'
		].
		
		
		command executeOn: self.
		
	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:50:29'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:51:13' prior: 50611424!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		| command |
		
		command := commands detect: [ : each | each class handles: commandCharacter ]  ifNone: [
			self error: 'Invalid command.'
		].
		
		command executeOn: self.

	].! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:51:27'!
commandForCharacter: commandCharacter

	^ commands detect: [ : each | each class handles: commandCharacter ]  ifNone: [
			self error: 'Invalid command.'
		]! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:51:27' prior: 50611510!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		| command |
		
		command := self commandForCharacter: commandCharacter.
		
		command executeOn: self.

	].! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:52:13' prior: 50611529!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		
		( self commandForCharacter: commandCharacter ) 	executeOn: self.

	].! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:52:14'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:52:21' prior: 50611538!
giveCommands: aCommandSequence

	aCommandSequence do: [ : commandCharacter |
		( self commandForCharacter: commandCharacter ) 	executeOn: self
	].! !
!Backward methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 17:52:42' overrides: 16902133!
handles: aCommandCharacter

	^aCommandCharacter = $b! !

!methodRemoval: Backward class #handles: stamp: 'WAL 5/13/2023 17:52:51'!
handles: aCommandCharacter

	^aCommandCharacter = $b!
!Forward methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 17:53:10' overrides: 16902133!
handles: aCommandCharacter

	^aCommandCharacter = $f! !
!Left methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 17:53:20' overrides: 16902133!
handles: aCommandCharacter

	^aCommandCharacter = $l! !
!Right methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 17:53:31' overrides: 16902133!
handles: aCommandCharacter

	^aCommandCharacter = $r! !

!methodRemoval: Right class #handles: stamp: 'WAL 5/13/2023 17:53:38'!
handles: aCommandCharacter

	^aCommandCharacter = $r!

!methodRemoval: Left class #handles: stamp: 'WAL 5/13/2023 17:53:42'!
handles: aCommandCharacter

	^aCommandCharacter = $l!

!methodRemoval: Forward class #handles: stamp: 'WAL 5/13/2023 17:53:45'!
handles: aCommandCharacter

	^aCommandCharacter = $f!

!methodRemoval: Command class #for: stamp: 'WAL 5/13/2023 17:53:57'!
for: aCommandCharacter

	^ (Command allSubclasses detect: [ : subclass | subclass handles: aCommandCharacter]) new!
!Command methodsFor: 'no messages' stamp: 'WAL 5/13/2023 17:55:06'!
executeOn: aMarsRover.
	
	self subclassResponsibility ! !
!Command methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 17:55:22' overrides: 16902133!
handles: aCommandCharacter

	self subclassResponsibility ! !

----SNAPSHOT----(13 May 2023 17:56:19) CuisUniversity-5706.image priorSource: 8921603!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:56:37' prior: 50611521!
commandForCharacter: commandCharacter

	^ commands detect: [ : each | each handles: commandCharacter ]  ifNone: [
			self error: 'Invalid command.'
	]! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 17:56:39'!
PASSED!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:56:48' prior: 50611683!
commandForCharacter: commandCharacter

	^ commands detect: [ : command | command handles: commandCharacter ]  ifNone: [
		self error: 'Invalid command.'
	]! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:57:07' prior: 50611765!
commandForCharacter: character

	^ commands detect: [ : command | command handles: character ]  ifNone: [
		self error: 'Invalid command.'
	]! !
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 17:58:49' prior: 50611773!
commandForCharacter: character

	^ commands detect: [ : command | command handles: character ]  ifNone: [
		self error: self class invalidCommandErrorDescription
	]! !
!MarsRover class methodsFor: 'instance creation' stamp: 'WAL 5/13/2023 17:59:25'!
InvalidCommandErrorDescription

	^'Invalid command.'! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 18:00:16'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:01:38' prior: 50610618!
test21InvalidCharShouldRaiseError

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.

	self
		should: [ marsRover giveCommands: 'x'. ]
		raise: Error
		withExceptionDo: [
			: anError |
				self assert: anError messageText equals: MarsRover InvalidCommandErrorDescription.
				self assertRover: marsRover at: 1@1 pointing: self north.
		].
	! !

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 18:01:40'!
FAILURE!
!MarsRover methodsFor: 'control' stamp: 'WAL 5/13/2023 18:02:59' prior: 50611781!
commandForCharacter: character

	^ commands detect: [ : command | command handles: character ]  ifNone: [
		self error: self class InvalidCommandErrorDescription.
	]! !

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 18:03:02'!
PASSED!
!MarsRover class methodsFor: 'error descriptions' stamp: 'WAL 5/13/2023 18:03:23'!
invalidCommandErrorDescription

	^'Invalid command.'! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 18:03:23' prior: 50611886!
commandForCharacter: character

	^ commands detect: [ : command | command handles: character ]  ifNone: [
		self error: self class invalidCommandErrorDescription.
	]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 18:03:23' prior: 50611868!
test21InvalidCharShouldRaiseError

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.

	self
		should: [ marsRover giveCommands: 'x'. ]
		raise: Error
		withExceptionDo: [
			: anError |
				self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
				self assertRover: marsRover at: 1@1 pointing: self north.
		].
	! !

!methodRemoval: MarsRover class #InvalidCommandErrorDescription stamp: 'WAL 5/13/2023 18:03:23'!
InvalidCommandErrorDescription

	^'Invalid command.'!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:03:54'!
test21InvalidCharShouldRaiseInvalidCommandError

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.

	self
		should: [ marsRover giveCommands: 'x'. ]
		raise: Error
		withExceptionDo: [
			: anError |
				self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
				self assertRover: marsRover at: 1@1 pointing: self north.
		].
	! !

!methodRemoval: MarsRoverTest #test21InvalidCharShouldRaiseError stamp: 'WAL 5/13/2023 18:03:54'!
test21InvalidCharShouldRaiseError

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.

	self
		should: [ marsRover giveCommands: 'x'. ]
		raise: Error
		withExceptionDo: [
			: anError |
				self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
				self assertRover: marsRover at: 1@1 pointing: self north.
		].
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:11:29'!
test22InvalidCharStopsCommandsExecutionLeavingRoverAtPositionBeforeError

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.

	self
		should: [ marsRover giveCommands: 'frxff'. ]
		raise: Error
		withExceptionDo: [
			: anError |
				self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
				self assertRover: marsRover at: 1@2 pointing: self east.
		].
	! !

!testRun: #MarsRoverTest #test22InvalidCharStopsCommandsExecutionLeavingRoverAtPositionBeforeError stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test01NewRowerStartsAtDefinedPositionAndPointing stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test02EmptyCommandSequenceDoesNothing stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test04TwoForwardCommandsMovesTwoForward stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test05ManyForwardCommandsMovesManyForward stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test06OneBackwardCommandMovesOneBackward stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test07TwoBackwardCommandsMovesTwoBackward stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test08ManyBackwardCommandsMovesManyBackward stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test09NorthOneLeftCommandPointsWest stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test10NorthTwoLeftCommandsPointsSouth stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test11NorthThreeLeftCommandsPointsEast stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test12NorthOneRightCommandPointsEast stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test13NorthTwoRightCommandPointsSouth stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test14NorthThreeRightCommandPointsWest stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test21InvalidCharShouldRaiseInvalidCommandError stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!

!testRun: #MarsRoverTest #test22InvalidCharStopsCommandsExecutionLeavingRoverAtPositionBeforeError stamp: 'WAL 5/13/2023 18:11:31'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:12:17'!
test22InvalidCommandStopsCommandSequenceLeavingRoverAtPositionBeforeInvalidCommand

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.

	self
		should: [ marsRover giveCommands: 'frxff'. ]
		raise: Error
		withExceptionDo: [
			: anError |
				self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
				self assertRover: marsRover at: 1@2 pointing: self east.
		].
	! !

!methodRemoval: MarsRoverTest #test22InvalidCharStopsCommandsExecutionLeavingRoverAtPositionBeforeError stamp: 'WAL 5/13/2023 18:12:24'!
test22InvalidCharStopsCommandsExecutionLeavingRoverAtPositionBeforeError

	| marsRover |

	marsRover := MarsRover startOn: 1@1 facing: self north.

	self
		should: [ marsRover giveCommands: 'frxff'. ]
		raise: Error
		withExceptionDo: [
			: anError |
				self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
				self assertRover: marsRover at: 1@2 pointing: self east.
		].
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02'!
marsRoverStartingOn1At1FacingNorth

	^ MarsRover startOn: 1@1 facing: self north! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50612130!
test22InvalidCommandStopsCommandSequenceLeavingRoverAtPositionBeforeInvalidCommand

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.

	self
		should: [ marsRover giveCommands: 'frxff'. ]
		raise: Error
		withExceptionDo: [
			: anError |
				self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
				self assertRover: marsRover at: 1@2 pointing: self east.
		].
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50612002!
test21InvalidCharShouldRaiseInvalidCommandError

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.

	self
		should: [ marsRover giveCommands: 'x'. ]
		raise: Error
		withExceptionDo: [
			: anError |
				self assert: anError messageText equals: MarsRover invalidCommandErrorDescription.
				self assertRover: marsRover at: 1@1 pointing: self north.
		].
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50603992!
test02EmptyCommandSequenceDoesNothing

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: ''.
	
	self assertRover: marsRover at: 1@1 pointing: self north.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50604010!
test04TwoForwardCommandsMovesTwoForward

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'ff'.
	
	self assertRover: marsRover at: 1@3 pointing: self north.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50604083!
test12NorthOneRightCommandPointsEast

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'r'.
	
	self assertRover: marsRover at: 1@1 pointing: self east.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50605504!
test15NorthOneLeftOneForwardCommandsPointsWestMovesOneWest

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'lf'.

	self assertRover: marsRover at: 0@1 pointing: self west.	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50604037!
test07TwoBackwardCommandsMovesTwoBackward

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'bb'.
	
	self assertRover: marsRover at: 1@-1 pointing: self north.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50606005!
test20NorthThreeLeftOneBackwardCommandsPointsEastMovesOneWest

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'lllb'.

	self assertRover: marsRover at: 0@1 pointing: self east.	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50605483!
test16NorthTwoLeftOneForwardCommandsPointsSouthMovesOneSouth

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'llf'.

	self assertRover: marsRover at: 1@0 pointing: self south.	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50605784!
test19NorthTwoLeftOneBackwardCommandsPointsWestMovesOneNorth

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'llb'.

	self assertRover: marsRover at: 1@2 pointing: self south.	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50605525!
test18NorthOneLeftOneBackwardCommandsPointsWestMovesOneEast

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'lb'.

	self assertRover: marsRover at: 2@1 pointing: self west.	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50604028!
test06OneBackwardCommandMovesOneBackward

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'b'.
	
	self assertRover: marsRover at: 1@0 pointing: self north.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50603983!
test01NewRowerStartsAtDefinedPositionAndPointing

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	
	
	self assertRover: marsRover at: 1@1 pointing: self north.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50604901!
test17NorthThreeLeftOneForwardCommandsPointsEastMovesOneEast

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'lllf'.

	self assertRover: marsRover at: 2@1 pointing: self east.	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50604019!
test05ManyForwardCommandsMovesManyForward

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'fffff'.
	
	self assertRover: marsRover at: 1@6 pointing: self north.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50604101!
test14NorthThreeRightCommandPointsWest

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'rrr'.
	
	self assertRover: marsRover at: 1@1 pointing: self west.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50604056!
test09NorthOneLeftCommandPointsWest

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'l'.
	
	self assertRover: marsRover at: 1@1 pointing: self west.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50604092!
test13NorthTwoRightCommandPointsSouth

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'rr'.
	
	self assertRover: marsRover at: 1@1 pointing: self south.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50604065!
test10NorthTwoLeftCommandsPointsSouth

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'll'.
	
	self assertRover: marsRover at: 1@1 pointing: self south.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50604001!
test03OneForwardCommandMovesOneForward

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'f'.

	self assertRover: marsRover at: 1@2 pointing: self north.	
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50604074!
test11NorthThreeLeftCommandsPointsEast

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'lll'.
	
	self assertRover: marsRover at: 1@1 pointing: self east.
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'WAL 5/13/2023 18:17:02' prior: 50604046!
test08ManyBackwardCommandsMovesManyBackward

	| marsRover |

	marsRover := self marsRoverStartingOn1At1FacingNorth.
	
	marsRover giveCommands: 'bbbbb'.
	
	self assertRover: marsRover at: 1@-4 pointing: self north.
	
	! !

----End fileIn of /home/a/s/e/c/is1/tp/03_OOStack/Solucion/Stack-Solution-1.st----!

----End fileIn of /home/a/s/e/c/is1/tp/03_OOStack/Solucion/Stack-Solution-2.st----!

----End fileIn of /home/a/s/e/c/is1/tp/03_OOStack/Solucion/Stack-Solution-3_caja_gris.st----!

sfbp := SentenceFinderByPrefix new.!

sfbp find.!
!MarsRover methodsFor: 'initialize' stamp: 'WAL 5/13/2023 18:31:48'!
initializeStartingOn: aPoint facing: aDirection 

	position := aPoint.
	pointing := aDirection.
	commands := Set with: Forward new with: Backward new with: Left new with: Right new! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'WAL 5/13/2023 18:31:48' prior: 50604167!
startOn: aPoint facing: aDirection
	
	^self new initializeStartingOn: aPoint facing: aDirection! !

!methodRemoval: MarsRover #initializeStartOn:facing: stamp: 'WAL 5/13/2023 18:31:48'!
initializeStartOn: aPoint facing: aDirection 

	position := aPoint.
	pointing := aDirection.
	commands := Set with: Forward new with: Backward new with: Left new with: Right new!
!MarsRover methodsFor: 'initialize' stamp: 'WAL 5/13/2023 18:32:58' overrides: 16920235!
initialize

	self error: 'No inicializado'.! !

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 18:33:01'!
ERROR!

!testRun: #MarsRoverTest #test03OneForwardCommandMovesOneForward stamp: 'WAL 5/13/2023 18:33:01'!
ERROR!

self position!

!methodRemoval: MarsRover #initialize stamp: 'WAL 5/13/2023 18:33:49'!
initialize

	self error: 'No inicializado'.!

----SNAPSHOT----(13 May 2023 18:35:39) CuisUniversity-5706.image priorSource: 8960924!

----SNAPSHOT----(13 May 2023 19:22:54) CuisUniversity-5706.image priorSource: 9017703!

----STARTUP---- (17 May 2023 22:15:16) as /home/a/s/sw/smalltalk2/CuisUniversity-5706.image!


----End fileIn of /home/a/s/sw/smalltalk2/Portfolio-Ejercicio-c.st----!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/17/2023 22:15:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/17/2023 22:15:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/17/2023 22:15:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/17/2023 22:15:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/17/2023 22:15:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/17/2023 22:15:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/17/2023 22:15:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/17/2023 22:15:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/17/2023 22:15:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/17/2023 22:15:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/17/2023 22:15:53'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 22:15:53'!
FAILURE!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 22:15:53'!
FAILURE!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 22:16:03'!
FAILURE!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 22:16:03'!
FAILURE!

childPortfolio isNil!

parentPortfolio1 isNil!

parentPortfolio1 isNil !

	parentPortfolio1 := Portfolio new.!

	parentPortfolio2 := Portfolio new.!

	childPortfolio := Portfolio new.!

	parentPortfolio1 addPortfolio: childPortfolio.!

	parentPortfolio2 addPortfolio: childPortfolio.!

childPortfolio parent!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/17/2023 23:01:02' prior: 50613653!
test12PortfolioCanHaveTwoParents

	| parentPortfolio1 parentPortfolio2 childPortfolio |
			
	parentPortfolio1 := Portfolio new.
	parentPortfolio2 := Portfolio new.
	
	childPortfolio := Portfolio new.
	
	parentPortfolio1 addPortfolio: childPortfolio.
	
	parentPortfolio2 addPortfolio: childPortfolio.
			
	self assert: 	childPortfolio parents includes: parentPortfolio1.
	self assert: 	childPortfolio parents includes: parentPortfolio2.
! !

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 23:01:03'!
ERROR!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/17/2023 23:01:25' prior: 50614076!
test12PortfolioCanHaveTwoParents

	| parentPortfolio1 parentPortfolio2 childPortfolio |
			
	parentPortfolio1 := Portfolio new.
	parentPortfolio2 := Portfolio new.
	
	childPortfolio := Portfolio new.
	
	parentPortfolio1 addPortfolio: childPortfolio.
	
	parentPortfolio2 addPortfolio: childPortfolio.
			
	self assert: 	(childPortfolio parents includes: parentPortfolio1).
	self assert: 	(childPortfolio parents includes: parentPortfolio2).
! !

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 23:01:26'!
ERROR!

!methodRemoval: Portfolio #parent stamp: 'WAL 5/17/2023 23:02:19'!
parent

	^parent	
	!
!Portfolio methodsFor: 'private' stamp: 'WAL 5/17/2023 23:05:00' prior: 50613951!
parents

	| returnedParents | 
	
	returnedParents :=  OrderedCollection new.
	
	parent1 ifNotNil: [	returnedParents add: parent1 ].
	parent2 ifNotNil: [	returnedParents add: parent2 ].
	
	^returnedParents! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/17/2023 23:05:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/17/2023 23:05:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/17/2023 23:05:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/17/2023 23:05:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/17/2023 23:05:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/17/2023 23:05:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/17/2023 23:05:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/17/2023 23:05:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/17/2023 23:05:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/17/2023 23:05:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/17/2023 23:05:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 23:05:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 23:17:01'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/17/2023 23:17:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/17/2023 23:17:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/17/2023 23:17:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/17/2023 23:17:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/17/2023 23:17:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/17/2023 23:17:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/17/2023 23:17:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/17/2023 23:17:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/17/2023 23:17:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/17/2023 23:17:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/17/2023 23:17:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 23:17:01'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/17/2023 23:22:06'!
test13PortfolioCanHaveManyParents

	| parentPortfolio1 parentPortfolio2 parentPortfolio3 childPortfolio |
			
	parentPortfolio1 := Portfolio new.
	parentPortfolio2 := Portfolio new.
	parentPortfolio3 := Portfolio new.
	
	childPortfolio := Portfolio new.
	
	parentPortfolio1 addPortfolio: childPortfolio.
	parentPortfolio2 addPortfolio: childPortfolio.
	parentPortfolio3 addPortfolio: childPortfolio.
			
	self assert: 	(childPortfolio parents includes: parentPortfolio1).
	self assert: 	(childPortfolio parents includes: parentPortfolio2).
	self assert: 	(childPortfolio parents includes: parentPortfolio3).
! !

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/17/2023 23:22:09'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/17/2023 23:22:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/17/2023 23:22:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/17/2023 23:22:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/17/2023 23:22:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/17/2023 23:22:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/17/2023 23:22:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/17/2023 23:22:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/17/2023 23:22:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/17/2023 23:22:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/17/2023 23:22:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/17/2023 23:22:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 23:22:55'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/17/2023 23:22:55'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/17/2023 23:22:55'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/17/2023 23:23:00'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/17/2023 23:23:00'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'WAL 5/17/2023 23:23:13'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'WAL 5/17/2023 23:23:37' prior: 50613880 overrides: 16920235!
initialize
	
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	parents := OrderedCollection new.
	! !
!Portfolio methodsFor: 'private' stamp: 'WAL 5/17/2023 23:24:42'!
addParent: aPortfolio

	(parent1 isNil)
		ifTrue: [ parent1 := aPortfolio ] 
		ifFalse: [ parent2 := aPortfolio]
		
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/17/2023 23:24:42' prior: 50613900!
addPortfolio: aPortfolio 
	
	portfolios add: aPortfolio.
	aPortfolio addParent: self.! !

!methodRemoval: Portfolio #parent: stamp: 'WAL 5/17/2023 23:24:42'!
parent: aPortfolio

	(parent1 isNil)
		ifTrue: [ parent1 := aPortfolio ] 
		ifFalse: [ parent2 := aPortfolio]
		
	!
!Portfolio methodsFor: 'private' stamp: 'WAL 5/17/2023 23:25:29' prior: 50614327!
addParent: aPortfolio

	parents add: aPortfolio ! !
!Portfolio methodsFor: 'private' stamp: 'WAL 5/17/2023 23:29:07' prior: 50613932!
addRootsTo: aRootCollection
	
	parents do: [ : parent | parent addRootsTo: aRootCollection ] .
	
	parents ifEmpty: [aRootCollection add: self].
	! !
!Portfolio methodsFor: 'private' stamp: 'WAL 5/17/2023 23:29:52' prior: 50614351!
addRootsTo: aRootCollection
	
	parents do: [ : parent | parent addRootsTo: aRootCollection ] .
	
	parents ifEmpty: [ aRootCollection add: self ].
	! !
!Portfolio methodsFor: 'private' stamp: 'WAL 5/17/2023 23:30:14' prior: 50614119!
parents

	^parents! !

!methodRemoval: Portfolio #root stamp: 'WAL 5/17/2023 23:30:47'!
root
	
	parent ifNil: [ ^self ].
	^parent root!
!Portfolio methodsFor: 'private' stamp: 'WAL 5/17/2023 23:32:54' prior: 50613960!
roots
	
	| aRootCollection |
	
	aRootCollection := OrderedCollection new.
	
	parents do: [ : parent | parent addRootsTo: aRootCollection ] .
	
	parents ifEmpty: [ aRootCollection add: self ].
	
	^aRootCollection
	
	
	
	! !

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/17/2023 23:33:25'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/17/2023 23:33:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 23:33:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/17/2023 23:33:33'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/17/2023 23:33:44'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/17/2023 23:33:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/17/2023 23:33:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/17/2023 23:33:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/17/2023 23:33:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/17/2023 23:33:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/17/2023 23:33:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/17/2023 23:33:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/17/2023 23:33:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/17/2023 23:33:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/17/2023 23:33:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/17/2023 23:33:46'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 23:33:46'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/17/2023 23:33:46'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/17/2023 23:35:31'!
test14PortfolioCantHaveRepeatedPortfolios

	| portfolioChild portfolio |
	
	portfolioChild := Portfolio new.	
		
	portfolio := Portfolio new.
	portfolio addPortfolio: portfolioChild.
	
	self 
		should: [ 	portfolio addPortfolio: portfolioChild ]
		raise: Error
! !

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/17/2023 23:35:32'!
FAILURE!
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/17/2023 23:39:10' prior: 50614334!
addPortfolio: aPortfolio 

	(self roots anySatisfy: [ :root | root hasPortfolio: aPortfolio ])
		ifTrue: [ self error: 'El portfolio ya pertenece al portfolio' ].
	
	portfolios add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/17/2023 23:40:34'!
hasPortfolio: aPortfolio 
	
	^(portfolios includes: aPortfolio) or: 	(portfolios anySatisfy: [ :portfolio | portfolio hasPortfolio: aPortfolio ])
			! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/17/2023 23:41:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/17/2023 23:41:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/17/2023 23:41:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/17/2023 23:41:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/17/2023 23:41:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/17/2023 23:41:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/17/2023 23:41:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/17/2023 23:41:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/17/2023 23:41:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/17/2023 23:41:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/17/2023 23:41:31'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 23:41:31'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/17/2023 23:41:31'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/17/2023 23:41:31'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/17/2023 23:44:37'!
test15PortfolioCantHaveTheSamePortfolioInChildPortfolio

	| childPortfolio2 parentPortfolio childPortfolio |
	
	childPortfolio2 := ReceptiveAccount new.	
		
	parentPortfolio := Portfolio new.
	parentPortfolio addAccount: childPortfolio2.
	
	childPortfolio := Portfolio new.
	parentPortfolio addPortfolio: childPortfolio.
		
	self 
		should: [ 	childPortfolio addAccount: childPortfolio2 ]
		raise: Error
! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/17/2023 23:44:42' prior: 50614533!
test15PortfolioCantHaveTheSamePortfolioInChildPortfolio

	| childPortfolio1 parentPortfolio childPortfolio |
	
	childPortfolio1 := ReceptiveAccount new.	
		
	parentPortfolio := Portfolio new.
	parentPortfolio addAccount: childPortfolio1.
	
	childPortfolio := Portfolio new.
	parentPortfolio addPortfolio: childPortfolio.
		
	self 
		should: [ 	childPortfolio addAccount: childPortfolio1 ]
		raise: Error
! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/17/2023 23:44:48' prior: 50614549!
test15PortfolioCantHaveTheSamePortfolioInChildPortfolio

	| childPortfolio1 parentPortfolio childPortfolio2 |
	
	childPortfolio1 := ReceptiveAccount new.	
		
	parentPortfolio := Portfolio new.
	parentPortfolio addAccount: childPortfolio1.
	
	childPortfolio2 := Portfolio new.
	parentPortfolio addPortfolio: childPortfolio2.
		
	self 
		should: [ 	childPortfolio2 addAccount: childPortfolio1 ]
		raise: Error
! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/17/2023 23:46:23' prior: 50614565!
test15PortfolioCantHaveTheSamePortfolioInChildPortfolio

	| childPortfolio1 parentPortfolio childPortfolio2 |
	
	childPortfolio1 := Portfolio new.
		
	parentPortfolio := Portfolio new.
	parentPortfolio addPortfolio: childPortfolio1.
	
	childPortfolio2 := Portfolio new.
	parentPortfolio addPortfolio: childPortfolio2.
		
	self 
		should: [ 	childPortfolio2 addPortfolio: childPortfolio1 ]
		raise: Error
! !

!testRun: #PortfolioTest #test15PortfolioCantHaveTheSamePortfolioInChildPortfolio stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantHaveTheSamePortfolioInChildPortfolio stamp: 'WAL 5/17/2023 23:46:32'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/17/2023 23:47:36'!
test16PortfolioCantHaveTheSamePortfolioInParentPortfolio

	| account parentPortfolio childPortfolio|
	
	account := ReceptiveAccount new.	
		
	parentPortfolio := Portfolio new.
	
	childPortfolio := Portfolio new.
	parentPortfolio addPortfolio: childPortfolio.
	childPortfolio addAccount: account.
		
	self 
		should: [ 	parentPortfolio addAccount: account ]
		raise: Error
! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/17/2023 23:47:47' prior: 50614656!
test16PortfolioCantHaveTheSamePortfolioInParentPortfolio

	| childPortfolio2 parentPortfolio childPortfolio|
	
	childPortfolio2 := ReceptiveAccount new.	
		
	parentPortfolio := Portfolio new.
	
	childPortfolio := Portfolio new.
	parentPortfolio addPortfolio: childPortfolio.
	childPortfolio addAccount: childPortfolio2.
		
	self 
		should: [ 	parentPortfolio addAccount: childPortfolio2 ]
		raise: Error
! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/17/2023 23:47:51' prior: 50614671!
test16PortfolioCantHaveTheSamePortfolioInParentPortfolio

	| childPortfolio2 parentPortfolio childPortfolio |
	
	childPortfolio2 := ReceptiveAccount new.	
		
	parentPortfolio := Portfolio new.
	
	childPortfolio := Portfolio new.
	parentPortfolio addPortfolio: childPortfolio.
	childPortfolio addAccount: childPortfolio2.
		
	self 
		should: [ 	parentPortfolio addAccount: childPortfolio2 ]
		raise: Error
! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/17/2023 23:47:56' prior: 50614687!
test16PortfolioCantHaveTheSamePortfolioInParentPortfolio

	| childPortfolio2 parentPortfolio childPortfolio1 |
	
	childPortfolio2 := ReceptiveAccount new.	
		
	parentPortfolio := Portfolio new.
	
	childPortfolio1 := Portfolio new.
	parentPortfolio addPortfolio: childPortfolio1.
	childPortfolio1 addAccount: childPortfolio2.
		
	self 
		should: [ 	parentPortfolio addAccount: childPortfolio2 ]
		raise: Error
! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/17/2023 23:48:08' prior: 50614703!
test16PortfolioCantHaveTheSamePortfolioInParentPortfolio

	| childPortfolio2 parentPortfolio childPortfolio1 |
	
	childPortfolio2 := Portfolio new.
		
	parentPortfolio := Portfolio new.
	
	childPortfolio1 := Portfolio new.
	parentPortfolio addPortfolio: childPortfolio1.
	childPortfolio1 addPortfolio: childPortfolio2.
		
	self 
		should: [ 	parentPortfolio addPortfolio: childPortfolio2 ]
		raise: Error
! !

!testRun: #PortfolioTest #test16PortfolioCantHaveTheSamePortfolioInParentPortfolio stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCantHaveTheSamePortfolioInChildPortfolio stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCantHaveTheSamePortfolioInParentPortfolio stamp: 'WAL 5/17/2023 23:48:12'!
PASSED!

!methodRemoval: PortfolioTest #test15PortfolioCantHaveTheSamePortfolioInChildPortfolio stamp: 'WAL 5/17/2023 23:48:42'!
test15PortfolioCantHaveTheSamePortfolioInChildPortfolio

	| childPortfolio1 parentPortfolio childPortfolio2 |
	
	childPortfolio1 := Portfolio new.
		
	parentPortfolio := Portfolio new.
	parentPortfolio addPortfolio: childPortfolio1.
	
	childPortfolio2 := Portfolio new.
	parentPortfolio addPortfolio: childPortfolio2.
		
	self 
		should: [ 	childPortfolio2 addPortfolio: childPortfolio1 ]
		raise: Error
!

!methodRemoval: PortfolioTest #test16PortfolioCantHaveTheSamePortfolioInParentPortfolio stamp: 'WAL 5/17/2023 23:48:44'!
test16PortfolioCantHaveTheSamePortfolioInParentPortfolio

	| childPortfolio2 parentPortfolio childPortfolio1 |
	
	childPortfolio2 := Portfolio new.
		
	parentPortfolio := Portfolio new.
	
	childPortfolio1 := Portfolio new.
	parentPortfolio addPortfolio: childPortfolio1.
	childPortfolio1 addPortfolio: childPortfolio2.
		
	self 
		should: [ 	parentPortfolio addPortfolio: childPortfolio2 ]
		raise: Error
!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/17/2023 23:52:15'!
test15

	| portfolioParent portfolioChild account  |
	
	account := ReceptiveAccount new.
	
	portfolioChild := Portfolio new.	
	portfolioParent := Portfolio new.	
		
	portfolioChild addAccount: account.
	portfolioParent addAccount: account.
	
	self 
		should: [ 	portfolioParent addPortfolio: portfolioChild ]
		raise: Error
! !

!testRun: #PortfolioTest #test15 stamp: 'WAL 5/17/2023 23:52:18'!
FAILURE!
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/17/2023 23:57:45' prior: 50614464!
addPortfolio: aPortfolio 

	(self roots anySatisfy: [ :root | root hasPortfolio: aPortfolio ])
		ifTrue: [ self error: 'El portfolio ya pertenece al portfolio' ].
	
	aPortfolio accounts do: [ : anAccount | 
		(self roots anySatisfy: [ :root | root hasAccount: anAccount ])
				ifTrue: [ self error: 'Alguna cuenta ya pertenece al portfolio' ].
	].
	
	portfolios add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/17/2023 23:59:55'!
accounts

	^accounts ! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'WAL 5/17/2023 23:59:56'!
PASSED!
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/18/2023 00:00:09' prior: 50614862!
accounts

	! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/18/2023 00:00:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/18/2023 00:00:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/18/2023 00:00:10'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/18/2023 00:00:10'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/18/2023 00:00:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/18/2023 00:00:10'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/18/2023 00:00:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/18/2023 00:00:10'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/18/2023 00:00:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/18/2023 00:00:10'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/18/2023 00:00:10'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/18/2023 00:00:10'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/18/2023 00:00:10'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/18/2023 00:00:10'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'WAL 5/18/2023 00:00:10'!
PASSED!
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/18/2023 00:00:27' prior: 50614920!
accounts

	^accounts! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'WAL 5/18/2023 00:00:28'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/18/2023 00:02:21'!
test16

	| portfolioParent portfolioChild portfolioGrandchild account  |
	
	account := ReceptiveAccount new.
	
	portfolioGrandchild := Portfolio new.	
	portfolioChild := Portfolio new.	
	portfolioParent := Portfolio new.	
		
	portfolioGrandchild addAccount: account.
	portfolioParent addAccount: account.
	portfolioParent addPortfolio: portfolioChild.
	
	self 
		should: [ 	portfolioChild addPortfolio: portfolioGrandchild ]
		raise: Error
! !

!testRun: #PortfolioTest #test16 stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'WAL 5/18/2023 00:02:27'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/18/2023 00:03:55' prior: 50615036!
test16

	| portfolioParent portfolioChild portfolioGrandchild account  |
	
	account := ReceptiveAccount new.
	
	portfolioGrandchild := Portfolio new.	
	portfolioChild := Portfolio new.	
	portfolioParent := Portfolio new.	
		
	portfolioGrandchild addAccount: account.
	portfolioParent addAccount: account.
	portfolioChild addPortfolio: portfolioGrandchild.
	
	self 
		should: [ 	portfolioParent addPortfolio: portfolioChild ]
		raise: Error
! !

!testRun: #PortfolioTest #test16 stamp: 'WAL 5/18/2023 00:03:57'!
FAILURE!
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/18/2023 00:07:46' prior: 50614978!
accounts

	| allAccounts |

	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	
	portfolios do: [ : portfolio | allAccounts addAll: portfolio accounts ].

	^allAccounts! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'WAL 5/18/2023 00:07:54'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/18/2023 00:13:48'!
test15CannotAddPortfolioWithRepeatedAccount

	| portfolioParent portfolioChild account  |
	
	account := ReceptiveAccount new.
	
	portfolioChild := Portfolio new.	
	portfolioParent := Portfolio new.	
		
	portfolioChild addAccount: account.
	portfolioParent addAccount: account.
	
	self 
		should: [ 	portfolioParent addPortfolio: portfolioChild ]
		raise: Error
! !

!methodRemoval: PortfolioTest #test15 stamp: 'WAL 5/18/2023 00:13:48'!
test15

	| portfolioParent portfolioChild account  |
	
	account := ReceptiveAccount new.
	
	portfolioChild := Portfolio new.	
	portfolioParent := Portfolio new.	
		
	portfolioChild addAccount: account.
	portfolioParent addAccount: account.
	
	self 
		should: [ 	portfolioParent addPortfolio: portfolioChild ]
		raise: Error
!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/18/2023 00:14:46'!
test15CannotAddPortfolioWithRepeatedAccountOnParent

	| portfolioParent portfolioChild account  |
	
	account := ReceptiveAccount new.
	
	portfolioChild := Portfolio new.	
	portfolioParent := Portfolio new.	
		
	portfolioChild addAccount: account.
	portfolioParent addAccount: account.
	
	self 
		should: [ 	portfolioParent addPortfolio: portfolioChild ]
		raise: Error
! !

!methodRemoval: PortfolioTest #test15CannotAddPortfolioWithRepeatedAccount stamp: 'WAL 5/18/2023 00:14:46'!
test15CannotAddPortfolioWithRepeatedAccount

	| portfolioParent portfolioChild account  |
	
	account := ReceptiveAccount new.
	
	portfolioChild := Portfolio new.	
	portfolioParent := Portfolio new.	
		
	portfolioChild addAccount: account.
	portfolioParent addAccount: account.
	
	self 
		should: [ 	portfolioParent addPortfolio: portfolioChild ]
		raise: Error
!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/18/2023 00:15:56'!
test16CannotAddPortfolioWithRepeatedAccountOnGrandchild

	| portfolioParent portfolioChild portfolioGrandchild account  |
	
	account := ReceptiveAccount new.
	
	portfolioGrandchild := Portfolio new.	
	portfolioChild := Portfolio new.	
	portfolioParent := Portfolio new.	
		
	portfolioGrandchild addAccount: account.
	portfolioParent addAccount: account.
	portfolioChild addPortfolio: portfolioGrandchild.
	
	self 
		should: [ 	portfolioParent addPortfolio: portfolioChild ]
		raise: Error
! !

!methodRemoval: PortfolioTest #test16 stamp: 'WAL 5/18/2023 00:15:56'!
test16

	| portfolioParent portfolioChild portfolioGrandchild account  |
	
	account := ReceptiveAccount new.
	
	portfolioGrandchild := Portfolio new.	
	portfolioChild := Portfolio new.	
	portfolioParent := Portfolio new.	
		
	portfolioGrandchild addAccount: account.
	portfolioParent addAccount: account.
	portfolioChild addPortfolio: portfolioGrandchild.
	
	self 
		should: [ 	portfolioParent addPortfolio: portfolioChild ]
		raise: Error
!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/18/2023 00:16:05'!
test15CannotAddPortfolioWithRepeatedAccountOnChild

	| portfolioParent portfolioChild account  |
	
	account := ReceptiveAccount new.
	
	portfolioChild := Portfolio new.	
	portfolioParent := Portfolio new.	
		
	portfolioChild addAccount: account.
	portfolioParent addAccount: account.
	
	self 
		should: [ 	portfolioParent addPortfolio: portfolioChild ]
		raise: Error
! !

!methodRemoval: PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnParent stamp: 'WAL 5/18/2023 00:16:05'!
test15CannotAddPortfolioWithRepeatedAccountOnParent

	| portfolioParent portfolioChild account  |
	
	account := ReceptiveAccount new.
	
	portfolioChild := Portfolio new.	
	portfolioParent := Portfolio new.	
		
	portfolioChild addAccount: account.
	portfolioParent addAccount: account.
	
	self 
		should: [ 	portfolioParent addPortfolio: portfolioChild ]
		raise: Error
!

----SNAPSHOT----(18 May 2023 00:17:10) CuisUniversity-5706.image priorSource: 9017791!

----SNAPSHOT----(18 May 2023 00:33:42) CuisUniversity-5706.image priorSource: 9077243!

----SNAPSHOT----(18 May 2023 00:43:55) CuisUniversity-5706.image priorSource: 9077331!

----STARTUP---- (20 May 2023 14:31:47) as /home/a/s/sw/smalltalk2/CuisUniversity-5706.image!


!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 14:32:31'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 14:32:36'!
PASSED!

Object subclass: #PortfolioOrAccount
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioOrAccount category: 'Portfolio-Ejercicio' stamp: 'WAL 5/20/2023 14:35:07'!
Object subclass: #PortfolioOrAccount
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioOrAccount subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'WAL 5/20/2023 14:35:21'!
PortfolioOrAccount subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioOrAccount subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'WAL 5/20/2023 14:35:32'!
PortfolioOrAccount subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioOrAccount methodsFor: 'no messages' stamp: 'WAL 5/20/2023 14:36:00'!
balance

	self subclassResponsibility ! !
!PortfolioOrAccount methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 14:36:34'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!PortfolioOrAccount methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 14:37:02'!
transactions

	self subclassResponsibility ! !

PortfolioOrAccount subclass: #Portfolio
	instanceVariableNames: 'contents accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'WAL 5/20/2023 14:39:23'!
PortfolioOrAccount subclass: #Portfolio
	instanceVariableNames: 'contents accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 14:41:11' prior: 50613892!
addAccount: anAccount 
	
	(self roots anySatisfy: [ :root | root hasAccount: anAccount ])
		ifTrue: [ self error: 'La cuenta ya pertenece al portfolio' ].
		
	contents add: anAccount
			! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 14:41:51' prior: 50614847!
addPortfolio: aPortfolio 

	(self roots anySatisfy: [ :root | root hasPortfolio: aPortfolio ])
		ifTrue: [ self error: 'El portfolio ya pertenece al portfolio' ].
	
	aPortfolio accounts do: [ : anAccount | 
		(self roots anySatisfy: [ :root | root hasAccount: anAccount ])
				ifTrue: [ self error: 'Alguna cuenta ya pertenece al portfolio' ].
	].
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !
!PortfolioOrAccount methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 14:47:50'!
contents

	self subclassResponsibility ! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 14:58:53' prior: 50615467!
addPortfolio: aPortfolio 

	"(self roots anySatisfy: [ :root | root hasPortfolio: aPortfolio ])
		ifTrue: [ self error: 'El portfolio ya pertenece al portfolio' ].
	
	aPortfolio accounts do: [ : anAccount | 
		(self roots anySatisfy: [ :root | root hasAccount: anAccount ])
				ifTrue: [ self error: 'Alguna cuenta ya pertenece al portfolio' ].
	]."
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 14:59:15'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'WAL 5/20/2023 15:00:39' prior: 50613885 overrides: 50615429!
balance
			
	^ (contents sum: [ :element | element balance ] ifEmpty: [0])
! !
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 15:01:25' prior: 50613912 overrides: 50615434!
hasRegistered: aTransaction 
		
	^(contents anySatisfy: [ :element | element hasRegistered: aTransaction ]) 
	! !
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 15:02:20' prior: 50613921 overrides: 50615439!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	transactions addAll: (contents do: [ :element | ^element transactions ]).
		
	^transactions.
		! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 15:05:15'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 15:05:22'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'WAL 5/20/2023 15:07:06' prior: 50614320 overrides: 16920235!
initialize
	
	contents := OrderedCollection new.
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	parents := OrderedCollection new.
	! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 15:07:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 15:07:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 15:07:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 15:07:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 15:07:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 15:07:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 15:07:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 15:07:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 15:07:10'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 15:07:10'!
FAILURE!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 15:07:10'!
FAILURE!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 15:07:10'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 15:07:10'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 15:07:10'!
FAILURE!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 15:07:10'!
FAILURE!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 15:07:10'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 15:08:02'!
FAILURE!
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 15:22:19'!
allContents

	| allAccounts |

	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	
	portfolios do: [ : portfolio | allAccounts addAll: portfolio accounts ].

	^allAccounts! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 15:22:25' prior: 50615719!
allContents

	| allContents |

	allContents := OrderedCollection new.
	allContents addAll: accounts.
	
	portfolios do: [ : portfolio | allContents addAll: portfolio accounts ].

	^allContents! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 15:27:10' prior: 50615728!
allContents

	| allContents |

	allContents := OrderedCollection new.
	allContents add: self.
	
	contents do: [ : element | element addMySelfTo: allContents ].

	^allContents! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 15:27:40'!
addMySelfTo: aCollection

	| allContents |

	allContents := OrderedCollection new.
	allContents add: self.
	
	contents do: [ : element | element addMySelfTo: allContents ].

	^allContents! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 15:28:26' prior: 50615745!
addMySelfTo: aCollection

	aCollection add: self.
	
	contents do: [ : element | element addMySelfTo: aCollection ].! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'WAL 5/20/2023 15:28:43'!
addMySelfTo: aCollection

	aCollection add: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 15:30:33'!
addMyselfTo: aCollection

	aCollection add: self.
	
	contents do: [ : element | element addMySelfTo: aCollection ].! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'WAL 5/20/2023 15:30:33'!
addMyselfTo: aCollection

	aCollection add: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 15:30:33' prior: 50615754!
addMySelfTo: aCollection

	aCollection add: self.
	
	contents do: [ : element | element addMyselfTo: aCollection ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 15:30:33' prior: 50615737!
allContents

	| allContents |

	allContents := OrderedCollection new.
	allContents add: self.
	
	contents do: [ : element | element addMyselfTo: allContents ].

	^allContents! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 15:30:33' prior: 50615764!
addMyselfTo: aCollection

	aCollection add: self.
	
	contents do: [ : element | element addMyselfTo: aCollection ].! !

!methodRemoval: Portfolio #addMySelfTo: stamp: 'WAL 5/20/2023 15:30:33'!
addMySelfTo: aCollection

	aCollection add: self.
	
	contents do: [ : element | element addMyselfTo: aCollection ].!

!methodRemoval: ReceptiveAccount #addMySelfTo: stamp: 'WAL 5/20/2023 15:30:33'!
addMySelfTo: aCollection

	aCollection add: self.!
!PortfolioOrAccount methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 15:30:51'!
addMyselfTo: aCollection

	self subclassResponsibility ! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 15:35:24' prior: 50613905!
hasAccount: anAccount 
	
	^ self allContents includes: anAccount.
	
	"^(accounts includes: anAccount) or: 	(portfolios anySatisfy: [ :portfolio | portfolio hasAccount: anAccount ])"
			! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 15:35:40' prior: 50614474!
hasPortfolio: aPortfolio 

	^ self allContents includes: aPortfolio.
	
	"^(portfolios includes: aPortfolio) or: 	(portfolios anySatisfy: [ :portfolio | portfolio hasPortfolio: aPortfolio ])"
			! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 15:53:24' prior: 50615487!
addPortfolio: aPortfolio 

	| sourceElements destinationRootElements |

	(self roots anySatisfy: [ :root | root hasPortfolio: aPortfolio ])
		ifTrue: [ self error: 'El portfolio ya pertenece al portfolio' ].
	
	aPortfolio accounts do: [ : anAccount | 
		(self roots anySatisfy: [ :root | root hasAccount: anAccount ])
				ifTrue: [ self error: 'Alguna cuenta ya pertenece al portfolio' ].
	].	

	sourceElements := aPortfolio allContents.
	
	destinationRootElements := OrderedCollection  new.
	self roots do: [ : root | destinationRootElements addAll: root allContents ].
	
	
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 15:54:27' prior: 50615831!
addPortfolio: aPortfolio 

	| sourceElements destinationRootElements |

	"(self roots anySatisfy: [ :root | root hasPortfolio: aPortfolio ])
		ifTrue: [ self error: 'El portfolio ya pertenece al portfolio' ].
	
	aPortfolio accounts do: [ : anAccount | 
		(self roots anySatisfy: [ :root | root hasAccount: anAccount ])
				ifTrue: [ self error: 'Alguna cuenta ya pertenece al portfolio' ].
	].	"

	sourceElements := aPortfolio allContents.
	
	destinationRootElements := OrderedCollection  new.
	self roots do: [ : root | destinationRootElements addAll: root allContents ].
	
	
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 15:55:14' prior: 50615854!
addPortfolio: aPortfolio 

	| sourceElements destinationRootElements |

	"(self roots anySatisfy: [ :root | root hasPortfolio: aPortfolio ])
		ifTrue: [ self error: 'El portfolio ya pertenece al portfolio' ].
	
	aPortfolio accounts do: [ : anAccount | 
		(self roots anySatisfy: [ :root | root hasAccount: anAccount ])
				ifTrue: [ self error: 'Alguna cuenta ya pertenece al portfolio' ].
	].	"

	sourceElements := aPortfolio allContents.
	
	destinationRootElements := OrderedCollection  new.
	self roots do: [ : root | destinationRootElements addAll: root allContents ].
	
	destinationRootElements includesAnyOf: sourceElements.
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 15:58:08' prior: 50615877!
addPortfolio: aPortfolio 

	| sourceElements destinationRootElements |

	"(self roots anySatisfy: [ :root | root hasPortfolio: aPortfolio ])
		ifTrue: [ self error: 'El portfolio ya pertenece al portfolio' ].
	
	aPortfolio accounts do: [ : anAccount | 
		(self roots anySatisfy: [ :root | root hasAccount: anAccount ])
				ifTrue: [ self error: 'Alguna cuenta ya pertenece al portfolio' ].
	].	"

	sourceElements := aPortfolio allContents.
	
	destinationRootElements := OrderedCollection  new.
	self roots do: [ : root | destinationRootElements addAll: root allContents ].
	
	(destinationRootElements includesAnyOf: sourceElements) ifTrue: [
		self error: 'El portfolio no puede agregarse, porque o bien este mismo o una de sus cuentas ya está incluido.'
	].
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 15:58:34'!
PASSED!
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 15:58:58' prior: 50615902!
addPortfolio: aPortfolio 

	| sourceElements destinationRootElements |

	sourceElements := aPortfolio allContents.
	
	destinationRootElements := OrderedCollection  new.
	self roots do: [ : root | destinationRootElements addAll: root allContents ].
	
	(destinationRootElements includesAnyOf: sourceElements) ifTrue: [
		self error: 'El portfolio no puede agregarse, porque o bien este mismo o una de sus cuentas ya está incluido.'
	].
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:00:38' prior: 50615990!
addPortfolio: aPortfolio 

	| sourceElements destinationRootElements |

	sourceElements := aPortfolio allContents.
	
	destinationRootElements := OrderedCollection  new.
	self roots do: [ : root | destinationRootElements addAll: root allContents ].
	
	(destinationRootElements includesAnyOf: sourceElements) ifTrue: [
		self error: 'El elemento no puede agregarse.'
	].
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:02:16' prior: 50616009!
addPortfolio: aPortfolio 

	| sourceElements destinationRootElements |

	sourceElements := aPortfolio allContents.
	
	destinationRootElements := OrderedCollection  new.
	self roots do: [ : root | destinationRootElements addAll: root allContents ].
	
	
	(destinationRootElements includesAnyOf: sourceElements) ifTrue: [
		self error: 'El elemento no puede agregarse.'
	].
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:02:36' prior: 50616026!
addPortfolio: aPortfolio 

	| sourceElements destinationRootElements |

	sourceElements := aPortfolio allContents.
	
	destinationRootElements := OrderedCollection  new.
	self roots do: [ : root | destinationRootElements addAll: root allContents ]
	.
	
	
	(destinationRootElements includesAnyOf: sourceElements) ifTrue: [
		self error: 'El elemento no puede agregarse.'
	].
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:02:55' prior: 50616043!
addPortfolio: aPortfolio 

	| sourceElements destinationRootElements |

	sourceElements := aPortfolio allContents.
	
	destinationRootElements :=OrderedCollection  new.
	self roots do: [ : root | destinationRootElements addAll: root allContents ]
	.
	
	
	(destinationRootElements includesAnyOf: sourceElements) ifTrue: [
		self error: 'El elemento no puede agregarse.'
	].
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:02:58' prior: 50616060!
addPortfolio: aPortfolio 

	| sourceElements destinationRootElements |

	sourceElements := aPortfolio allContents.
	
	destinationRootElements := OrderedCollection  new.
	self roots do: [ : root | destinationRootElements addAll: root allContents ]
	.
	
	
	(destinationRootElements includesAnyOf: sourceElements) ifTrue: [
		self error: 'El elemento no puede agregarse.'
	].
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:05:14' prior: 50616077!
addPortfolio: aPortfolio 

	| sourceElements destinationRootElements |

		
	destinationRootElements := OrderedCollection  new.
	self roots do: [ : root | destinationRootElements addAll: root allContents ]
	.
	sourceElements := aPortfolio allContents.

	
	(destinationRootElements includesAnyOf: sourceElements) ifTrue: [
		self error: 'El elemento no puede agregarse.'
	].
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'balance' stamp: 'WAL 5/20/2023 16:08:54'!
allRootsElements

	| allRootsElements |
	
	allRootsElements := OrderedCollection  new.
	self roots do: [ : root | allRootsElements addAll: root allContents ].
	
	^allRootsElements! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:09:33' prior: 50616094!
addPortfolio: aPortfolio 

	| sourceElements destinationRootElements |

	destinationRootElements := self allRootsElements 
	.
	sourceElements := aPortfolio allContents.

	
	(destinationRootElements includesAnyOf: sourceElements) ifTrue: [
		self error: 'El elemento no puede agregarse.'
	].
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:09:39' prior: 50616119!
addPortfolio: aPortfolio 

	| sourceElements destinationRootsElements |

	destinationRootsElements := self allRootsElements 
	.
	sourceElements := aPortfolio allContents.

	
	(destinationRootsElements includesAnyOf: sourceElements) ifTrue: [
		self error: 'El elemento no puede agregarse.'
	].
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:10:46' prior: 50616133!
addPortfolio: aPortfolio 

	(self allRootsElements includesAnyOf: aPortfolio allContents) ifTrue: [
		self error: 'El elemento no puede agregarse.'
	].
	
	contents add: aPortfolio.
	aPortfolio addParent: self.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'WAL 5/20/2023 16:11:23'!
PortfolioOrAccount subclass: #Portfolio
	instanceVariableNames: 'elements accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 16:11:23' prior: 50615569 overrides: 50615434!
hasRegistered: aTransaction 
		
	^(elements anySatisfy: [ :element | element hasRegistered: aTransaction ]) 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 16:11:23' prior: 50615576 overrides: 50615439!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	transactions addAll: (elements do: [ :element | ^element transactions ]).
		
	^transactions.
		! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 16:11:23' prior: 50615648 overrides: 16920235!
initialize
	
	elements := OrderedCollection new.
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.
	parents := OrderedCollection new.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 16:11:23' prior: 50615563 overrides: 50615429!
balance
			
	^ (elements sum: [ :element | element balance ] ifEmpty: [0])
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 16:11:23' prior: 50615458!
addAccount: anAccount 
	
	(self roots anySatisfy: [ :root | root hasAccount: anAccount ])
		ifTrue: [ self error: 'La cuenta ya pertenece al portfolio' ].
		
	elements add: anAccount
			! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 16:11:23' prior: 50615791 overrides: 50615808!
addMyselfTo: aCollection

	aCollection add: self.
	
	elements do: [ : element | element addMyselfTo: aCollection ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 16:11:23' prior: 50615782!
allContents

	| allContents |

	allContents := OrderedCollection new.
	allContents add: self.
	
	elements do: [ : element | element addMyselfTo: allContents ].

	^allContents! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 16:11:23' prior: 50616147!
addPortfolio: aPortfolio 

	(self allRootsElements includesAnyOf: aPortfolio allContents) ifTrue: [
		self error: 'El elemento no puede agregarse.'
	].
	
	elements add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:11:40'!
allElements

	| allContents |

	allContents := OrderedCollection new.
	allContents add: self.
	
	elements do: [ : element | element addMyselfTo: allContents ].

	^allContents! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 16:11:40' prior: 50616225!
addPortfolio: aPortfolio 

	(self allRootsElements includesAnyOf: aPortfolio allElements) ifTrue: [
		self error: 'El elemento no puede agregarse.'
	].
	
	elements add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 16:11:40' prior: 50615822!
hasPortfolio: aPortfolio 

	^ self allElements includes: aPortfolio.
	
	"^(portfolios includes: aPortfolio) or: 	(portfolios anySatisfy: [ :portfolio | portfolio hasPortfolio: aPortfolio ])"
			! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 16:11:40' prior: 50615813!
hasAccount: anAccount 
	
	^ self allElements includes: anAccount.
	
	"^(accounts includes: anAccount) or: 	(portfolios anySatisfy: [ :portfolio | portfolio hasAccount: anAccount ])"
			! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 16:11:40' prior: 50616110!
allRootsElements

	| allRootsElements |
	
	allRootsElements := OrderedCollection  new.
	self roots do: [ : root | allRootsElements addAll: root allElements ].
	
	^allRootsElements! !

!methodRemoval: Portfolio #allContents stamp: 'WAL 5/20/2023 16:11:40'!
allContents

	| allContents |

	allContents := OrderedCollection new.
	allContents add: self.
	
	elements do: [ : element | element addMyselfTo: allContents ].

	^allContents!
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:11:50' prior: 50616234!
allElements

	| allElements |

	allElements := OrderedCollection new.
	allElements add: self.
	
	elements do: [ : element | element addMyselfTo: allElements ].

	^allElements! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:11:57'!
PASSED!
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:12:10' prior: 50616253!
hasPortfolio: aPortfolio 

	^ self allElements includes: aPortfolio.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:12:15' prior: 50616263!
hasAccount: anAccount 
	
	^ self allElements includes: anAccount.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:12:44' prior: 50616289!
allElements

	| allElements |

	allElements := OrderedCollection new with: self.
	
	elements do: [ : element | element addMyselfTo: allElements ].

	^allElements! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:12:45'!
ERROR!
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:12:58' prior: 50616367!
allElements

	| allElements |

	allElements := OrderedCollection with: self.
	
	elements do: [ : element | element addMyselfTo: allElements ].

	^allElements! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:12:59'!
PASSED!

!methodRemoval: Portfolio #hasPortfolio: stamp: 'WAL 5/20/2023 16:13:56'!
hasPortfolio: aPortfolio 

	^ self allElements includes: aPortfolio.!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:14:07'!
PASSED!

----SNAPSHOT----(20 May 2023 16:16:35) CuisUniversity-5706.image priorSource: 9077419!
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:18:53' prior: 50616243!
addPortfolio: aPortfolio 

	(self allRootsElements includesAnyOf: aPortfolio allElements) ifTrue: [
		self error: 'El portfolio no puede agregarse.'
	].
	
	elements add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:19:41' prior: 50616199!
addAccount: anAccount 
	
	
	(self allRootsElements includes: anAccount)
		ifTrue: [ self error: 'La cuenta ya pertenece al portfolio' ].
		
	elements add: anAccount
			! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:19:58' prior: 50616568!
addPortfolio: aPortfolio 

	(self allRootsElements includesAnyOf: aPortfolio allElements)
		ifTrue: [ 	self error: 'El portfolio no puede agregarse.' 	].
	
	elements add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:21:03'!
assertNoCommonElementsWith: aPortfolio

	^ (self allRootsElements includesAnyOf: aPortfolio allElements)
		ifTrue: [ 	self error: 'El portfolio no puede agregarse.' 	]! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:21:03' prior: 50616586!
addPortfolio: aPortfolio 

	self assertNoCommonElementsWith: aPortfolio.
	
	elements add: aPortfolio.
	aPortfolio addParent: self.! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:21:20' prior: 50616578!
addAccount: anAccount 
	
	(self allRootsElements includes: anAccount)
		ifTrue: [ self error: 'La cuenta ya pertenece al portfolio' ].
		
	elements add: anAccount
			! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:21:50'!
assertDoesNotContainAccount: anAccount

	^ (self allRootsElements includes: anAccount)
		ifTrue: [ self error: 'La cuenta ya pertenece al portfolio' ]! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:21:50' prior: 50616610!
addAccount: anAccount 
	
	self assertDoesNotContainAccount: anAccount.
		
	elements add: anAccount
			! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:22:04'!
PASSED!

!methodRemoval: Portfolio #accounts stamp: 'WAL 5/20/2023 16:22:26'!
accounts

	| allAccounts |

	allAccounts := OrderedCollection new.
	allAccounts addAll: accounts.
	
	portfolios do: [ : portfolio | allAccounts addAll: portfolio accounts ].

	^allAccounts!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:22:31'!
PASSED!

!methodRemoval: Portfolio #hasAccount: stamp: 'WAL 5/20/2023 16:24:21'!
hasAccount: anAccount 
	
	^ self allElements includes: anAccount.!
!Portfolio methodsFor: 'initialization' stamp: 'WAL 5/20/2023 16:25:11' prior: 50616184 overrides: 16920235!
initialize
	
	elements := OrderedCollection new.
	parents := OrderedCollection new.
	! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:25:13'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'WAL 5/20/2023 16:25:46'!
PortfolioOrAccount subclass: #Portfolio
	instanceVariableNames: 'elements portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'WAL 5/20/2023 16:25:46'!
PortfolioOrAccount subclass: #Portfolio
	instanceVariableNames: 'elements parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:25:55'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 16:26:32' prior: 50616166 overrides: 50615434!
hasRegistered: aTransaction 
		
	^elements anySatisfy: [ :element | element hasRegistered: aTransaction ]
	! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:26:33'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 16:33:56' prior: 50614096!
test12PortfolioCanHaveTwoParents

	| parentPortfolio1 parentPortfolio2 childPortfolio |
			
	parentPortfolio1 := Portfolio new.
	parentPortfolio2 := Portfolio new.
	
	childPortfolio := Portfolio new.
	
	parentPortfolio1 addPortfolio: childPortfolio.
	
	self assert: 	(childPortfolio parents includes: parentPortfolio1).
	self assert: 	(childPortfolio parents includes: parentPortfolio2).
! !
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 16:41:05' prior: 50616174 overrides: 50615439!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	"transactions addAll: (elements do: [ :element | ^element transactions ])."
	
	self addTransactionsTo: transactions.
	
	elements do: [ :element | element addTransactionsTo: transactions ].
		
	^transactions.
		! !
!Portfolio methodsFor: 'accounts' stamp: 'WAL 5/20/2023 16:42:14'!
addTransactionsTo: aTransactionsCollection.
	
	elements do: [ :element | element addTransactionsTo: aTransactionsCollection ].! !
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 16:44:22' prior: 50616989 overrides: 50615439!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	"transactions addAll: (elements do: [ :element | ^element transactions ])."
	
	self addTransactionsTo: transactions.
	
	"elements do: [ :element | element addTransactionsTo: transactions ]."
		
	^transactions.
		! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'WAL 5/20/2023 16:47:02'!
addTransactionsTo: aTransactionsCollection.
	
	aTransactionsCollection addAll: transactions copy! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:48:45'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:48:45'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:48:45'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 16:50:09' prior: 50617009 overrides: 50615439!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	"transactions addAll: (elements do: [ :element | ^element transactions ])."
	
	self addTransactionsTo: transactions.
	
	elements do: [ :element | element addTransactionsTo: transactions ].
		
	^transactions.
		! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:50:10'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:50:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:50:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:50:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:50:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:50:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:50:10'!
FAILURE!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:50:10'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:50:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:50:10'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:50:10'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:50:10'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:50:10'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:50:10'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:50:10'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:50:10'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:50:14'!
FAILURE!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:50:14'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:50:14'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:50:14'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:50:14'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 16:50:23' prior: 50617091 overrides: 50615439!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	"transactions addAll: (elements do: [ :element | ^element transactions ])."
	
	self addTransactionsTo: transactions.
	
	"elements do: [ :element | element addTransactionsTo: transactions ]."
		
	^transactions.
		! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:50:24'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:50:24'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:50:24'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:50:40'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:50:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:50:40'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 16:51:00' prior: 50617223 overrides: 50615439!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	"transactions addAll: (elements do: [ :element | ^element transactions ])."
	
	self addTransactionsTo: transactions.
	
	elements do: [ :element | element addTransactionsTo: transactions ].
		
	^transactions.
		! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:51:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:51:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:51:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:51:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:51:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:51:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:51:01'!
FAILURE!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:51:01'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:51:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:51:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:51:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:51:01'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:51:01'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:51:01'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:51:01'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:51:01'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 16:51:17' prior: 50617361 overrides: 50615439!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	"transactions addAll: (elements do: [ :element | ^element transactions ])."
	
	self addTransactionsTo: transactions.
	
	"elements do: [ :element | element addTransactionsTo: transactions ]."
		
	^transactions.
		! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:51:19'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:51:19'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:51:19'!
FAILURE!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 16:51:45' prior: 50616973!
test12PortfolioCanHaveTwoParents

	| parentPortfolio1 parentPortfolio2 childPortfolio |
			
	parentPortfolio1 := Portfolio new.
	parentPortfolio2 := Portfolio new.
	
	childPortfolio := Portfolio new.
	
	parentPortfolio1 addPortfolio: childPortfolio.
	parentPortfolio2 addPortfolio: childPortfolio.
	
	self assert: 	(childPortfolio parents includes: parentPortfolio1).
	self assert: 	(childPortfolio parents includes: parentPortfolio2).
! !

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:51:58'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:52:03'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:52:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:52:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:52:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:52:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:52:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:52:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:52:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:52:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:52:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:52:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:52:04'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:52:04'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:52:04'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:52:04'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:52:04'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 16:52:16' prior: 50617434 overrides: 50615439!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	self addTransactionsTo: transactions.
		
	^transactions.
		! !
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 16:53:19' prior: 50617589 overrides: 50615439!
transactions
	
	^self addTransactionsTo: OrderedCollection new.
		! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:53:21'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:53:21'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:53:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:53:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:53:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:53:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:53:21'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:53:21'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:53:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:53:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:53:21'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:53:21'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:53:21'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:53:21'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:53:21'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:53:21'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 16:53:33' prior: 50617597 overrides: 50615439!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	self addTransactionsTo: transactions.
		
	^transactions.
		! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:53:35'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 16:53:53' prior: 50617662 overrides: 50615439!
transactions
	
	^self addTransactionsTo: (OrderedCollection new).
		! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:53:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:53:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:53:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:53:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:53:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:53:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:53:54'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:53:54'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:53:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:53:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:53:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:53:54'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:53:54'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:53:54'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:53:54'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:53:54'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 16:54:08' prior: 50617730 overrides: 50615439!
transactions
	
	^(self addTransactionsTo: (OrderedCollection new)).
		! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:54:09'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:54:09'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:54:09'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:54:09'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'WAL 5/20/2023 16:54:57' prior: 50617796 overrides: 50615439!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	self addTransactionsTo: transactions.
		
	^transactions.
		! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 16:59:13' prior: 50613539!
test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance

	| portfolio childPortfolio1 childPortfolio2 accountPortfolio1 accountPortfolio2  |
	
	accountPortfolio1 := self accountWithDepositOf: 100.	
	childPortfolio1 := self portfolioWithAccounts: { accountPortfolio1 }.
		
	accountPortfolio2 := self accountWithDepositOf: 150.
	childPortfolio2 := self portfolioWithAccounts: { accountPortfolio2 }.
		
	portfolio := self portfolioWithPortfolios: { childPortfolio1. childPortfolio2 }.
	
	self 
		assert: childPortfolio1 balance + childPortfolio2 balance
		equals: portfolio balance.! !

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 16:59:15'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:02:37' prior: 50617869!
test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance

	| portfolio childPortfolio1 childPortfolio2 accountPortfolio2  |
	
	childPortfolio1 := self portfolioWithDepositOf: 100.
		
	accountPortfolio2 := self accountWithDepositOf: 150.
	childPortfolio2 := self portfolioWithAccounts: { accountPortfolio2 }.
		
	portfolio := self portfolioWithPortfolios: { childPortfolio1. childPortfolio2 }.
	
	self 
		assert: childPortfolio1 balance + childPortfolio2 balance
		equals: portfolio balance.! !
!PortfolioTest methodsFor: 'accounts' stamp: 'WAL 5/20/2023 17:04:06'!
portfolioWithDepositOf: anAmount
	
	| portfolio |

	portfolio := self portfolioWithAccounts: { self accountWithDepositOf: anAmount.	 }.
	! !
!PortfolioTest methodsFor: 'accounts' stamp: 'WAL 5/20/2023 17:04:24' prior: 50617972!
portfolioWithDepositOf: anAmount
	
	^ self portfolioWithAccounts: { self accountWithDepositOf: anAmount.	 }.
	! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 17:04:27'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 17:04:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 17:04:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 17:04:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 17:04:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 17:04:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 17:04:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 17:04:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 17:04:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 17:04:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 17:04:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 17:04:28'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 17:04:28'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 17:04:28'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 17:04:28'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 17:04:28'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:05:00' prior: 50617954!
test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance

	| portfolio childPortfolio1 childPortfolio2 |
	
	childPortfolio1 := self portfolioWithDepositOf: 100.
		
	childPortfolio2 := self portfolioWithDepositOf: 150.
		
	portfolio := self portfolioWithPortfolios: { childPortfolio1. childPortfolio2 }.
	
	self 
		assert: childPortfolio1 balance + childPortfolio2 balance
		equals: portfolio balance.! !

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 17:05:06'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:05:13' prior: 50618046!
test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance

	| portfolio childPortfolio1 childPortfolio2 |
	
	childPortfolio1 := self portfolioWithDepositOf: 100.
	childPortfolio2 := self portfolioWithDepositOf: 150.
		
	portfolio := self portfolioWithPortfolios: { childPortfolio1. childPortfolio2 }.
	
	self 
		assert: childPortfolio1 balance + childPortfolio2 balance
		equals: portfolio balance.! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:07:23' prior: 50613586!
test07PortfolioKnowsChildAccountsTransactions

	| portfolio account transaction |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	self assert: 1 equals: portfolio transactions size.
	self assert: (portfolio transactions includes: transaction).! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:07:57' prior: 50613572!
test06PortfolioHasRegisteredTransactionsInChildPortfolios

	| portfolio childPortfolio account transaction |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.	
	childPortfolio := self portfolioWithAccounts: { account }.
	
	portfolio := self portfolioWithPortfolios: { childPortfolio }.
	
	self assert: (portfolio hasRegistered: transaction)! !

----End fileIn of /home/a/s/sw/smalltalk1/ISW1-2022-1C-Parcial-1.st----!

!classRemoval: #Track stamp: 'WAL 5/20/2023 17:11:36'!
Object subclass: #Track
	instanceVariableNames: 'sectors driversDistanceFromBeginning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Sector stamp: 'WAL 5/20/2023 17:11:36'!
Object subclass: #Sector
	instanceVariableNames: 'cars length withTurbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #GrandPrix stamp: 'WAL 5/20/2023 17:11:36'!
Object subclass: #GrandPrix
	instanceVariableNames: 'track numberOfLaps'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneCar stamp: 'WAL 5/20/2023 17:11:37'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed turboActivated traveledDistance currentSector turboActivations'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneTest stamp: 'WAL 5/20/2023 17:11:37'!
TestCase subclass: #FormulaOneTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:20:37'!
whithGivenPortfolioDo

	| portfolio account transaction aBlock1 |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	aBlock1 := 	[ : transaction1 :portfolio1 | 
		self assert: 1 equals: portfolio1 transactions size.
		self assert: (portfolio1 transactions includes: transaction1).
        ] .
	
	aBlock1 value: transaction value: portfolio.
	
	
! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:20:56'!
test17whithGivenPortfolioDo

	| portfolio account transaction aBlock1 |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	aBlock1 := 	[ : transaction1 :portfolio1 | 
		self assert: 1 equals: portfolio1 transactions size.
		self assert: (portfolio1 transactions includes: transaction1).
        ] .
	
	aBlock1 value: transaction value: portfolio.
	
	
! !

!methodRemoval: PortfolioTest #whithGivenPortfolioDo stamp: 'WAL 5/20/2023 17:21:06'!
whithGivenPortfolioDo

	| portfolio account transaction aBlock1 |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	aBlock1 := 	[ : transaction1 :portfolio1 | 
		self assert: 1 equals: portfolio1 transactions size.
		self assert: (portfolio1 transactions includes: transaction1).
        ] .
	
	aBlock1 value: transaction value: portfolio.
	
	
!

!testRun: #PortfolioTest #test17whithGivenPortfolioDo stamp: 'WAL 5/20/2023 17:21:08'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:21:39' prior: 50619206!
test17whithGivenPortfolioDo

	| portfolio account transaction aBlock1 |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	aBlock1 := 	[ : transaction1 : portfolio1 | 
		self assert: 1 equals: portfolio1 transactions size.
		self assert: (portfolio1 transactions includes: transaction1).
        ] .
	
	aBlock1 value: transaction .
	
	
! !

!testRun: #PortfolioTest #test17whithGivenPortfolioDo stamp: 'WAL 5/20/2023 17:21:44'!
ERROR!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:21:49' prior: 50619243!
test17whithGivenPortfolioDo

	| portfolio account transaction aBlock1 |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	aBlock1 := 	[ : transaction1 : portfolio1 | 
		self assert: 1 equals: portfolio1 transactions size.
		self assert: (portfolio1 transactions includes: transaction1).
        ] .
	
	aBlock1 value: transaction value: portfolio.
	
	
! !

!testRun: #PortfolioTest #test17whithGivenPortfolioDo stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!

!testRun: #PortfolioTest #test17whithGivenPortfolioDo stamp: 'WAL 5/20/2023 17:21:51'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:22:07'!
whithGivenPortfolioDo

	| portfolio account transaction aBlock1 |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	aBlock1 := 	[ : transaction1 : portfolio1 | 
		self assert: 1 equals: portfolio1 transactions size.
		self assert: (portfolio1 transactions includes: transaction1).
        ] .
	
	aBlock1 value: transaction value: portfolio.
	
	
! !

!methodRemoval: PortfolioTest #test17whithGivenPortfolioDo stamp: 'WAL 5/20/2023 17:22:07'!
test17whithGivenPortfolioDo

	| portfolio account transaction aBlock1 |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	aBlock1 := 	[ : transaction1 : portfolio1 | 
		self assert: 1 equals: portfolio1 transactions size.
		self assert: (portfolio1 transactions includes: transaction1).
        ] .
	
	aBlock1 value: transaction value: portfolio.
	
	
!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:22:58'!
whithGivenPortfolioDo: aBlock

	| portfolio account transaction aBlock1 |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	aBlock1 := 	[ : transaction1 : portfolio1 | 
		self assert: 1 equals: portfolio1 transactions size.
		self assert: (portfolio1 transactions includes: transaction1).
        ] .
	
	aBlock1 value: transaction value: portfolio.
	
	
! !

!methodRemoval: PortfolioTest #whithGivenPortfolioDo stamp: 'WAL 5/20/2023 17:22:58'!
whithGivenPortfolioDo

	| portfolio account transaction aBlock1 |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	aBlock1 := 	[ : transaction1 : portfolio1 | 
		self assert: 1 equals: portfolio1 transactions size.
		self assert: (portfolio1 transactions includes: transaction1).
        ] .
	
	aBlock1 value: transaction value: portfolio.
	
	
!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:23:22' prior: 50619378!
whithGivenPortfolioDo: aBlock

	| portfolio account transaction |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	aBlock value: transaction value: portfolio.
	
	
! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:26:10' prior: 50618142!
test07PortfolioKnowsChildAccountsTransactions

	self withGivenPortfolioDo:
	[ : transaction1 : portfolio1 | 
		self assert: 1 equals: portfolio1 transactions size.
		self assert: (portfolio1 transactions includes: transaction1).
        ] .

	"| portfolio account transaction |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	self assert: 1 equals: portfolio transactions size.
	self assert: (portfolio transactions includes: transaction)."! !

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 17:26:19'!
ERROR!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:30:25' prior: 50619423!
test07PortfolioKnowsChildAccountsTransactions

	self withGivenPortfolioDo:
	[ : transaction1 : portfolio1 | 
		self assert: 1 equals: portfolio1 transactions size.
		self assert: (portfolio1 transactions includes: transaction1).
        ] .
! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:31:27' prior: 50619447!
test07PortfolioKnowsChildAccountsTransactions

	self whithGivenPortfolioDo:
	[ : transaction1 : portfolio1 | 
		self assert: 1 equals: portfolio1 transactions size.
		self assert: (portfolio1 transactions includes: transaction1).
        ] .
! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:31:41'!
withGivenPortfolioDo: aBlock

	| portfolio account transaction |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	aBlock value: transaction value: portfolio.
	
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 17:31:41' prior: 50619458!
test07PortfolioKnowsChildAccountsTransactions

	self withGivenPortfolioDo:
	[ : transaction1 : portfolio1 | 
		self assert: 1 equals: portfolio1 transactions size.
		self assert: (portfolio1 transactions includes: transaction1).
        ] .
! !

!methodRemoval: PortfolioTest #whithGivenPortfolioDo: stamp: 'WAL 5/20/2023 17:31:41'!
whithGivenPortfolioDo: aBlock

	| portfolio account transaction |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	aBlock value: transaction value: portfolio.
	
	
!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:31:50' prior: 50619480!
test07PortfolioKnowsChildAccountsTransactions

	self withGivenPortfolioDo:
		[ : transaction1 : portfolio1 | 
			self assert: 1 equals: portfolio1 transactions size.
			self assert: (portfolio1 transactions includes: transaction1).
	        ] .
! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:31:57' prior: 50619502!
test07PortfolioKnowsChildAccountsTransactions

	self withGivenPortfolioDo:
		[ : transaction : portfolio1 | 
			self assert: 1 equals: portfolio1 transactions size.
			self assert: (portfolio1 transactions includes: transaction).
	        ] .
! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:32:05' prior: 50619513!
test07PortfolioKnowsChildAccountsTransactions

	self withGivenPortfolioDo:
		[ : transaction : portfolio | 
			self assert: 1 equals: portfolio transactions size.
			self assert: (portfolio transactions includes: transaction).
	        ] .
! !

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 17:32:09'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:32:53' prior: 50613560!
test05PortfolioHasRegisteredTransactionsInChildAccounts

	self withGivenPortfolioDo:
		[ : transaction : portfolio | 
			self assert: (portfolio hasRegistered: transaction)
	        ] .! !

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 17:32:54'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:36:28'!
onPortfolioWithTransactionDo: aBlock

	| portfolio account transaction |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	aBlock value: transaction value: portfolio.
	
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 17:36:28' prior: 50619524!
test07PortfolioKnowsChildAccountsTransactions

	self onPortfolioWithTransactionDo:
		[ : transaction : portfolio | 
			self assert: 1 equals: portfolio transactions size.
			self assert: (portfolio transactions includes: transaction).
	        ] .
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'WAL 5/20/2023 17:36:28' prior: 50619598!
test05PortfolioHasRegisteredTransactionsInChildAccounts

	self onPortfolioWithTransactionDo:
		[ : transaction : portfolio | 
			self assert: (portfolio hasRegistered: transaction)
	        ] .! !

!methodRemoval: PortfolioTest #withGivenPortfolioDo: stamp: 'WAL 5/20/2023 17:36:28'!
withGivenPortfolioDo: aBlock

	| portfolio account transaction |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.		
	portfolio := self portfolioWithAccounts: { account }.
	
	aBlock value: transaction value: portfolio.
	
	
!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:37:38'!
onPortfolioWithTransactionInChildPortfolioDo: aBlock

	| portfolio childPortfolio account transaction |
	
	account := ReceptiveAccount new.	
	transaction := self depositOf: 100 on: account.	
	childPortfolio := self portfolioWithAccounts: { account }.
	
	portfolio := self portfolioWithPortfolios: { childPortfolio }.
	
	aBlock value: transaction value: portfolio.
	
	
! !
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:38:38' prior: 50618156!
test06PortfolioHasRegisteredTransactionsInChildPortfolios

	self onPortfolioWithTransactionInChildPortfolioDo:
		[ : transaction : portfolio | 
			self assert: (portfolio hasRegistered: transaction)
	        ] .! !

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 17:38:39'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:39:09' prior: 50613599!
test08PortfolioKnowsChildPortfoliosTransactions

	self onPortfolioWithTransactionInChildPortfolioDo:
		[ : transaction : portfolio | 
			self assert: 1 equals: portfolio transactions size.
			self assert: (portfolio transactions includes: transaction).
	        ] .! !

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 17:39:36'!
PASSED!
!PortfolioTest methodsFor: 'test' stamp: 'WAL 5/20/2023 17:40:47' prior: 50613625!
test10PortfolioCantHaveTheSameAccountsInChildPortfolio

	| account parentPortfolio childPortfolio |
	
	account := ReceptiveAccount new.	
		
	parentPortfolio := Portfolio new.
	parentPortfolio addAccount: account.
	
	childPortfolio := Portfolio new.
	parentPortfolio addPortfolio: childPortfolio.
		
	self 
		should: [ 	childPortfolio addAccount: account ]
		raise: Error
! !

----SNAPSHOT----(20 May 2023 17:44:16) CuisUniversity-5706.image priorSource: 9117265!

!methodRemoval: PortfolioOrAccount #contents stamp: 'WAL 5/20/2023 17:55:00'!
contents

	self subclassResponsibility !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 17:55:04'!
PASSED!
!PortfolioOrAccount methodsFor: 'transactions' stamp: 'WAL 5/20/2023 17:56:47'!
addTransactionsTo: aTransactionsCollection.
	
	self subclassResponsibility ! !

----SNAPSHOT----(20 May 2023 17:59:11) CuisUniversity-5706.image priorSource: 9223670!

	self subclassResponsibility !
!AccountTransaction methodsFor: 'value' stamp: 'WAL 5/20/2023 18:02:06'!
initializeFor: aValue

	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01PortfolioWithOneAccountShouldReturnAccountBalance stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioWithTwoAccountShouldReturnSumAccountsBalance stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithOnePortfolioShouldReturnPortfolioBalance stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithTwoPortfoliosShouldReturnSumPortfoliosBalance stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredTransactionsInChildAccounts stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioHasRegisteredTransactionsInChildPortfolios stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioKnowsChildAccountsTransactions stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioKnowsChildPortfoliosTransactions stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveRepeatedAccounts stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantHaveTheSameAccountsInChildPortfolio stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantHaveTheSameAccountsInParentPortfolio stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanHaveTwoParents stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCanHaveManyParents stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantHaveRepeatedPortfolios stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test15CannotAddPortfolioWithRepeatedAccountOnChild stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

!testRun: #PortfolioTest #test16CannotAddPortfolioWithRepeatedAccountOnGrandchild stamp: 'WAL 5/20/2023 18:02:50'!
PASSED!

----SNAPSHOT----(20 May 2023 18:02:59) CuisUniversity-5706.image priorSource: 9225966!

----STARTUP---- (25 May 2023 14:47:25) as /home/a/s/sw/smalltalk2/CuisUniversity-5706.image!


!classRemoval: #ReceptiveAccount stamp: 'WAL 5/25/2023 14:52:50'!
PortfolioOrAccount subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'WAL 5/25/2023 14:52:50'!
PortfolioOrAccount subclass: #Portfolio
	instanceVariableNames: 'elements parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioOrAccount stamp: 'WAL 5/25/2023 14:52:50'!
Object subclass: #PortfolioOrAccount
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'WAL 5/25/2023 14:52:50'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'WAL 5/25/2023 14:52:50'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'WAL 5/25/2023 14:52:51'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'WAL 5/25/2023 14:52:51'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'WAL 5/25/2023 14:52:51'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/a/s/e/c/is1/tp/06_Portfolio1/Portfolio-Solucion.st----!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'WAL 5/25/2023 14:53:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'WAL 5/25/2023 14:53:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'WAL 5/25/2023 14:53:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'WAL 5/25/2023 14:53:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'WAL 5/25/2023 14:53:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'WAL 5/25/2023 14:53:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'WAL 5/25/2023 14:53:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'WAL 5/25/2023 14:53:11'!
PASSED!

!classRemoval: #Withdraw stamp: 'WAL 5/25/2023 20:16:59'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'WAL 5/25/2023 20:16:59'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'WAL 5/25/2023 20:16:59'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'WAL 5/25/2023 20:16:59'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'WAL 5/25/2023 20:16:59'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'WAL 5/25/2023 20:17:00'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'WAL 5/25/2023 20:17:00'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'WAL 5/25/2023 20:17:00'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /home/a/s/sw/smalltalk2/Portfolio-Solucion-c.st----!
!ReportTest methodsFor: 'test' stamp: 'WAL 5/25/2023 20:22:10'!
test07TransferNetOnEmptyAccountShouldReturnOnlyBalanceLineWithZero

	| account report |
	
	account := ReceptiveAccount  new.

	report := TransferNet on: account.
	
	self assert: 1 equals: report lines size.	
	self assert: 'Neto de transferencias = 0' equals: (report lines at: 1)! !

!testRun: #ReportTest #test07TransferNetOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:22:14'!
ERROR!
!TransferNet class methodsFor: 'no messages' stamp: 'WAL 5/25/2023 20:25:30'!
on: anAccount
	
	^self new initializeOn: anAccount! !
!TransferNet methodsFor: 'no messages' stamp: 'WAL 5/25/2023 20:26:51'!
initializeOn: anAccount
	
	lines := OrderedCollection new.
	
	anAccount reportOn: self.
	
	lines add: 'Neto de transferencias = ', anAccount balance asString.
	! !

!testRun: #ReportTest #test01AccountSummaryOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:26:52'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOnAccountWithDepositShouldReturnDepositLines stamp: 'WAL 5/25/2023 20:26:52'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOnAccountWithWithdrawShouldReturnWithdrawLines stamp: 'WAL 5/25/2023 20:26:52'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:26:52'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOnEmptyPortfolioShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:26:52'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOnPortfolioShouldReturnAccountTransactions stamp: 'WAL 5/25/2023 20:26:52'!
PASSED!

!testRun: #ReportTest #test07TransferNetOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:26:52'!
PASSED!
!ReportTest methodsFor: 'test' stamp: 'WAL 5/25/2023 20:30:32'!
test08TransferNetOnAccountWithTransferShouldReturnTransferLines

	| sourceAccount destinationAccount sourceAccountReport destinationAccountReport |
	
	sourceAccount := ReceptiveAccount  new.
	destinationAccount := ReceptiveAccount  new.

	Transfer register: 100 from: sourceAccount to: destinationAccount.
		
	sourceAccountReport := TransferNet on: sourceAccount.
	destinationAccountReport := TransferNet on: destinationAccount.
	
	self assert: sourceAccountReport lines includes: 'Salida por transferencia de 100'.
	self assert: 'Balance = -100' equals: (sourceAccountReport lines at: 2).
	self assert: destinationAccountReport lines includes: 'Entrada por transferencia de 100'.
	self assert: 'Balance = 100' equals: (destinationAccountReport lines at: 2).	
! !
!ReportTest methodsFor: 'test' stamp: 'WAL 5/25/2023 20:30:43' prior: 50622080!
test08TransferNetOnAccountWithTransferShouldReturnTransferLines

	| account1 destinationAccount sourceAccountReport destinationAccountReport |
	
	account1 := ReceptiveAccount  new.
	destinationAccount := ReceptiveAccount  new.

	Transfer register: 100 from: account1 to: destinationAccount.
		
	sourceAccountReport := TransferNet on: account1.
	destinationAccountReport := TransferNet on: destinationAccount.
	
	self assert: sourceAccountReport lines includes: 'Salida por transferencia de 100'.
	self assert: 'Balance = -100' equals: (sourceAccountReport lines at: 2).
	self assert: destinationAccountReport lines includes: 'Entrada por transferencia de 100'.
	self assert: 'Balance = 100' equals: (destinationAccountReport lines at: 2).	
! !
!ReportTest methodsFor: 'test' stamp: 'WAL 5/25/2023 20:30:58' prior: 50622107!
test08TransferNetOnAccountWithTransferShouldReturnTransferLines

	| account1 account2 sourceAccountReport destinationAccountReport |
	
	account1 := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.

	Transfer register: 100 from: account1 to: account2.
		
	sourceAccountReport := TransferNet on: account1.
	destinationAccountReport := TransferNet on: account2.
	
	self assert: sourceAccountReport lines includes: 'Salida por transferencia de 100'.
	self assert: 'Balance = -100' equals: (sourceAccountReport lines at: 2).
	self assert: destinationAccountReport lines includes: 'Entrada por transferencia de 100'.
	self assert: 'Balance = 100' equals: (destinationAccountReport lines at: 2).	
! !
!ReportTest methodsFor: 'test' stamp: 'WAL 5/25/2023 20:31:10' prior: 50622133!
test08TransferNetOnAccountWithTransferShouldReturnTransferLines

	| account1 account2 account1Report destinationAccountReport |
	
	account1 := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.

	Transfer register: 100 from: account1 to: account2.
		
	account1Report := TransferNet on: account1.
	destinationAccountReport := TransferNet on: account2.
	
	self assert: account1Report lines includes: 'Salida por transferencia de 100'.
	self assert: 'Balance = -100' equals: (account1Report lines at: 2).
	self assert: destinationAccountReport lines includes: 'Entrada por transferencia de 100'.
	self assert: 'Balance = 100' equals: (destinationAccountReport lines at: 2).	
! !
!ReportTest methodsFor: 'test' stamp: 'WAL 5/25/2023 20:31:21' prior: 50622158!
test08TransferNetOnAccountWithTransferShouldReturnTransferLines

	| account1 account2 account1Report account2Report |
	
	account1 := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.

	Transfer register: 100 from: account1 to: account2.
		
	account1Report := TransferNet on: account1.
	account2Report := TransferNet on: account2.
	
	self assert: account1Report lines includes: 'Salida por transferencia de 100'.
	self assert: 'Balance = -100' equals: (account1Report lines at: 2).
	self assert: account2Report lines includes: 'Entrada por transferencia de 100'.
	self assert: 'Balance = 100' equals: (account2Report lines at: 2).	
! !

----SNAPSHOT----(25 May 2023 20:31:26) CuisUniversity-5706.image priorSource: 9228135!
!ReportTest methodsFor: 'test' stamp: 'WAL 5/25/2023 20:32:09' prior: 50622182!
test08TransferNetOnAccountWithTransferShouldReturnTransferLines

	| account1 account2 account1Report account2Report |
	
	account1 := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.

	Transfer register: 100 from: account1 to: account2.
	Transfer register: 70 from: account2 to: account1.
		
	account1Report := TransferNet on: account1.
	account2Report := TransferNet on: account2.
	
	self assert: account1Report lines includes: 'Salida por transferencia de 100'.
	self assert: 'Balance = -100' equals: (account1Report lines at: 2).
	self assert: account2Report lines includes: 'Entrada por transferencia de 100'.
	self assert: 'Balance = 100' equals: (account2Report lines at: 2).	
! !
!ReportTest methodsFor: 'test' stamp: 'WAL 5/25/2023 20:34:37' prior: 50622208!
test08TransferNetOnAccountWithTransferShouldReturnTransferLines

	| account1 account2 account1Report account2Report |
	
	account1 := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.

	Transfer register: 100 from: account1 to: account2.
	Transfer register: 70 from: account2 to: account1.
		
	account1Report := TransferNet on: account1.
	account2Report := TransferNet on: account2.
	
	self assert: 'Neto de transferencias = -30' equals: (account1Report lines at: 1).
	self assert: 'Neto de transferencias = 30' equals: (account2Report lines at: 1).	
! !

!testRun: #ReportTest #test07TransferNetOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:34:44'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:34:44'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOnAccountWithDepositShouldReturnDepositLines stamp: 'WAL 5/25/2023 20:34:44'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOnAccountWithWithdrawShouldReturnWithdrawLines stamp: 'WAL 5/25/2023 20:34:44'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:34:44'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOnEmptyPortfolioShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:34:44'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOnPortfolioShouldReturnAccountTransactions stamp: 'WAL 5/25/2023 20:34:44'!
PASSED!

!testRun: #ReportTest #test07TransferNetOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:34:44'!
PASSED!

!testRun: #ReportTest #test08TransferNetOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:34:44'!
ERROR!

!testRun: #ReportTest #test08TransferNetOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:34:44'!
ERROR!

!testRun: #ReportTest #test07TransferNetOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:35:07'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:35:07'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOnAccountWithDepositShouldReturnDepositLines stamp: 'WAL 5/25/2023 20:35:07'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOnAccountWithWithdrawShouldReturnWithdrawLines stamp: 'WAL 5/25/2023 20:35:07'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:35:07'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOnEmptyPortfolioShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:35:07'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOnPortfolioShouldReturnAccountTransactions stamp: 'WAL 5/25/2023 20:35:07'!
PASSED!

!testRun: #ReportTest #test07TransferNetOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:35:07'!
PASSED!

!testRun: #ReportTest #test08TransferNetOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:35:07'!
ERROR!

!testRun: #ReportTest #test08TransferNetOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:35:07'!
ERROR!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'WAL 5/25/2023 20:37:45'!
Report subclass: #TransferNet
	instanceVariableNames: 'transferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'WAL 5/25/2023 20:37:23'!
writeTransferDeposit: aValue 
	
	transferNet := transferNet + aValue
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'WAL 5/25/2023 20:38:07'!
writeTransferWithdraw: aValue 
	
	transferNet := transferNet - aValue
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'WAL 5/25/2023 20:38:34' prior: 50622043!
initializeOn: anAccount
	
	transferNet := 0.
	
	lines := OrderedCollection new.
	
	anAccount reportOn: self.
	
	lines add: 'Neto de transferencias = ', anAccount balance asString.
	! !

!testRun: #ReportTest #test01AccountSummaryOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:39:35'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOnAccountWithDepositShouldReturnDepositLines stamp: 'WAL 5/25/2023 20:39:35'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOnAccountWithWithdrawShouldReturnWithdrawLines stamp: 'WAL 5/25/2023 20:39:35'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:39:35'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOnEmptyPortfolioShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:39:35'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOnPortfolioShouldReturnAccountTransactions stamp: 'WAL 5/25/2023 20:39:35'!
PASSED!

!testRun: #ReportTest #test07TransferNetOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:39:35'!
PASSED!

!testRun: #ReportTest #test08TransferNetOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:39:35'!
PASSED!
!ReportTest methodsFor: 'test' stamp: 'WAL 5/25/2023 20:42:05'!
test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws

	| account1 account2 account1Report account2Report |
	
	account1 := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.

	Transfer register: 100 from: account1 to: account2.
	Transfer register: 70 from: account2 to: account1.
		
	account1Report := TransferNet on: account1.
	account2Report := TransferNet on: account2.
	
	self assert: 'Neto de transferencias = -30' equals: (account1Report lines at: 1).
	self assert: 'Neto de transferencias = 30' equals: (account2Report lines at: 1).	
! !
!ReportTest methodsFor: 'test' stamp: 'WAL 5/25/2023 20:43:12' prior: 50622395!
test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws

	| account1 account1Report |
	
	account1 := ReceptiveAccount  new.

	Deposit register: 100 on: account1.
	Withdraw register: 30 on: account1.
		
	account1Report := TransferNet on: account1.
	
	self assert: 'Neto de transferencias = 0' equals: (account1Report lines at: 1).
! !
!ReportTest methodsFor: 'test' stamp: 'WAL 5/25/2023 20:43:29' prior: 50622416!
test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws

	| account1 accountReport |
	
	account1 := ReceptiveAccount  new.

	Deposit register: 100 on: account1.
	Withdraw register: 30 on: account1.
		
	accountReport := TransferNet on: account1.
	
	self assert: 'Neto de transferencias = 0' equals: (accountReport lines at: 1).
! !
!ReportTest methodsFor: 'test' stamp: 'WAL 5/25/2023 20:43:32' prior: 50622430!
test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws

	| account accountReport |
	
	account := ReceptiveAccount  new.

	Deposit register: 100 on: account.
	Withdraw register: 30 on: account.
		
	accountReport := TransferNet on: account.
	
	self assert: 'Neto de transferencias = 0' equals: (accountReport lines at: 1).
! !

!testRun: #ReportTest #test01AccountSummaryOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:43:44'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOnAccountWithDepositShouldReturnDepositLines stamp: 'WAL 5/25/2023 20:43:44'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOnAccountWithWithdrawShouldReturnWithdrawLines stamp: 'WAL 5/25/2023 20:43:44'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:43:44'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOnEmptyPortfolioShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:43:44'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOnPortfolioShouldReturnAccountTransactions stamp: 'WAL 5/25/2023 20:43:44'!
PASSED!

!testRun: #ReportTest #test07TransferNetOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:43:44'!
PASSED!

!testRun: #ReportTest #test08TransferNetOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:43:44'!
PASSED!

!testRun: #ReportTest #test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws stamp: 'WAL 5/25/2023 20:43:44'!
ERROR!

!testRun: #ReportTest #test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws stamp: 'WAL 5/25/2023 20:43:44'!
ERROR!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'WAL 5/25/2023 20:44:07'!
writeDeposit: aValue
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'WAL 5/25/2023 20:44:15'!
writeWithdraw: aValue
	! !

!testRun: #ReportTest #test01AccountSummaryOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:44:17'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOnAccountWithDepositShouldReturnDepositLines stamp: 'WAL 5/25/2023 20:44:17'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOnAccountWithWithdrawShouldReturnWithdrawLines stamp: 'WAL 5/25/2023 20:44:17'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:44:17'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOnEmptyPortfolioShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:44:17'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOnPortfolioShouldReturnAccountTransactions stamp: 'WAL 5/25/2023 20:44:17'!
PASSED!

!testRun: #ReportTest #test07TransferNetOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:44:17'!
PASSED!

!testRun: #ReportTest #test08TransferNetOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:44:17'!
PASSED!

!testRun: #ReportTest #test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws stamp: 'WAL 5/25/2023 20:44:17'!
FAILURE!

!testRun: #ReportTest #test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws stamp: 'WAL 5/25/2023 20:44:17'!
FAILURE!

!testRun: #ReportTest #test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws stamp: 'WAL 5/25/2023 20:44:35'!
FAILURE!

!testRun: #ReportTest #test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws stamp: 'WAL 5/25/2023 20:45:14'!
FAILURE!

!testRun: #ReportTest #test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws stamp: 'WAL 5/25/2023 20:45:14'!
FAILURE!

!testRun: #ReportTest #test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws stamp: 'WAL 5/25/2023 20:45:34'!
PASSED!

!testRun: #ReportTest #test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws stamp: 'WAL 5/25/2023 20:45:37'!
FAILURE!

!testRun: #ReportTest #test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws stamp: 'WAL 5/25/2023 20:46:06'!
FAILURE!

!testRun: #ReportTest #test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws stamp: 'WAL 5/25/2023 20:46:06'!
FAILURE!
!ReportTest methodsFor: 'test' stamp: 'WAL 5/25/2023 20:47:46' prior: 50622444!
test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws

	| account accountReport |
	
	account := ReceptiveAccount  new.

	Deposit register: 100 on: account.
	"Withdraw register: 30 on: account."
		
	accountReport := TransferNet on: account.
	
	self assert: 'Neto de transferencias = 0' equals: (accountReport lines at: 1).
! !

!testRun: #ReportTest #test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws stamp: 'WAL 5/25/2023 20:47:48'!
FAILURE!
!ReportTest methodsFor: 'test' stamp: 'WAL 5/25/2023 20:49:04' prior: 50622579!
test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws

	| account accountReport |
	
	account := ReceptiveAccount  new.

	Deposit register: 100 on: account.
	Withdraw register: 30 on: account.
		
	accountReport := TransferNet on: account.
	
	self assert: 'Neto de transferencias = 0' equals: (accountReport lines at: 1).
! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'WAL 5/25/2023 20:49:52' prior: 50622354!
initializeOn: anAccount
	
	transferNet := 0.
	
	lines := OrderedCollection new.
	
	anAccount reportOn: self.
	
	lines add: 'Neto de transferencias = ', transferNet asString.
	! !

!testRun: #ReportTest #test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws stamp: 'WAL 5/25/2023 20:50:00'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:50:00'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryOnAccountWithDepositShouldReturnDepositLines stamp: 'WAL 5/25/2023 20:50:00'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryOnAccountWithWithdrawShouldReturnWithdrawLines stamp: 'WAL 5/25/2023 20:50:00'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:50:00'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryOnEmptyPortfolioShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:50:00'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryOnPortfolioShouldReturnAccountTransactions stamp: 'WAL 5/25/2023 20:50:00'!
PASSED!

!testRun: #ReportTest #test07TransferNetOnEmptyAccountShouldReturnOnlyBalanceLineWithZero stamp: 'WAL 5/25/2023 20:50:00'!
PASSED!

!testRun: #ReportTest #test08TransferNetOnAccountWithTransferShouldReturnTransferLines stamp: 'WAL 5/25/2023 20:50:00'!
PASSED!

!testRun: #ReportTest #test09TransferNetOnAccountShouldNotBeAffectedByOrdinaryDepositsOrWithdraws stamp: 'WAL 5/25/2023 20:50:00'!
PASSED!