

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (7 June 2023 19:00:54) as /home/a/s/sw/smalltalk4/CuisUniversity-5832.image!


TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'WAL 6/7/2023 19:01:59'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'WAL 6/7/2023 19:02:29'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'WAL 6/7/2023 19:02:15'!
test01NewCartIsEmpty
	
	self assert: Cart new isEmpty.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'WAL 6/7/2023 19:02:32'!
ERROR!
!Cart methodsFor: 'no messages' stamp: 'WAL 6/7/2023 19:03:10'!
isEmpty

	^true! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'WAL 6/7/2023 19:03:11'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:05:29'!
test02AnAvailableBookCanBeAddedToCart
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	cart add: book.
	
	self deny: cart isEmpty.
	self assert: cart includes: book! !

!testRun: #CartTest #test02AnAvailableBookCanBeAddedToCart stamp: 'WAL 6/7/2023 19:05:33'!
ERROR!

!classDefinition: #Cart category: 'TusLibros' stamp: 'WAL 6/7/2023 19:07:04'!
Object subclass: #Cart
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:07:02'!
add: aBook

	^contents add: aBook! !
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:07:49' overrides: 16920235!
initialize

	contents := OrderedCollection new.! !

!testRun: #CartTest #test02AnAvailableBookCanBeAddedToCart stamp: 'WAL 6/7/2023 19:08:00'!
FAILURE!
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:08:33'!
test02ABookCanBeAddedToCart
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	cart add: book.
	
	self deny: cart isEmpty.
	self assert: cart includes: book! !

!methodRemoval: CartTest #test02AnAvailableBookCanBeAddedToCart stamp: 'WAL 6/7/2023 19:08:33'!
test02AnAvailableBookCanBeAddedToCart
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	cart add: book.
	
	self deny: cart isEmpty.
	self assert: cart includes: book!
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:09:07'!
includes: aBook

	^contents includes: aBook! !
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:09:14' prior: 50624415!
add: aBook

	contents add: aBook! !

!testRun: #CartTest #test02ABookCanBeAddedToCart stamp: 'WAL 6/7/2023 19:09:20'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:09:41' prior: 50624391!
isEmpty

	^contents isEmpty! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'WAL 6/7/2023 19:09:43'!
PASSED!

!testRun: #CartTest #test02ABookCanBeAddedToCart stamp: 'WAL 6/7/2023 19:09:43'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:13:14'!
test03AnNotAvailableBookCanBeAdded
	
	| cart book | 
	
	book := '0123123456789'.
	
	cart := Cart new.
	
	self
		should: [ cart add: book. ]
		raise: Error
		withExceptionDo: [ cart isEmpty ]! !
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:13:19'!
test02ABookCanBeAdded
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	cart add: book.
	
	self deny: cart isEmpty.
	self assert: cart includes: book! !

!methodRemoval: CartTest #test02ABookCanBeAddedToCart stamp: 'WAL 6/7/2023 19:13:19'!
test02ABookCanBeAddedToCart
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	cart add: book.
	
	self deny: cart isEmpty.
	self assert: cart includes: book!

!testRun: #CartTest #test03AnNotAvailableBookCanBeAdded stamp: 'WAL 6/7/2023 19:13:22'!
FAILURE!

!classDefinition: #Cart category: 'TusLibros' stamp: 'WAL 6/7/2023 19:18:17'!
Object subclass: #Cart
	instanceVariableNames: 'contents inventory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:18:15' prior: 50624447!
add: aBook

	(inventory includes: aBook) ifTrue: [
		contents add: aBook
	]! !
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:18:55' prior: 50624497!
add: aBook

	(inventory includes: aBook) ifTrue: [
		contents add: aBook
	] ifFalse: [
		self error: 'Book not available'
	]! !
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:19:31' prior: 50624419 overrides: 16920235!
initialize

	inventory := OrderedCollection with: ''.

	contents := OrderedCollection new.! !
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:19:44' prior: 50624510 overrides: 16920235!
initialize

	inventory := OrderedCollection with: '1234567890123'.

	contents := OrderedCollection new.! !

!testRun: #CartTest #test03AnNotAvailableBookCanBeAdded stamp: 'WAL 6/7/2023 19:19:47'!
ERROR!

!testRun: #CartTest #test03AnNotAvailableBookCanBeAdded stamp: 'WAL 6/7/2023 19:19:47'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:21:20' prior: 50624463!
test03AnNotAvailableBookCanBeAdded
	
	| cart book | 
	
	book := '0123123456789'.
	
	cart := Cart new.
	
	self
		should: [ cart add: book. ]
		raise: Error
		withExceptionDo: [ :anError | cart isEmpty ]! !

!testRun: #CartTest #test03AnNotAvailableBookCanBeAdded stamp: 'WAL 6/7/2023 19:21:21'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'WAL 6/7/2023 19:21:21'!
PASSED!

!testRun: #CartTest #test02ABookCanBeAdded stamp: 'WAL 6/7/2023 19:21:21'!
PASSED!

!testRun: #CartTest #test03AnNotAvailableBookCanBeAdded stamp: 'WAL 6/7/2023 19:21:21'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:22:46'!
test04AQuantityOfABookCanBeAdded
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	cart add: book quantity: 10.
	
	self deny: cart isEmpty.
	self assert: cart includes: book! !
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:23:31' prior: 50624548!
test04AQuantityOfABookCanBeAdded
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	cart add: book quantity: 10.
	
	self deny: cart isEmpty.
	self assert: 10 equals: (cart quantityOf: book)! !

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:23:36'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:25:19'!
add: aBook quantity: aQuantity

	(inventory includes: aBook) ifTrue: [
		contents at: aBook put: aQuantity
	] ifFalse: [
		self error: 'Book not available'
	]! !
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:25:49' prior: 50624516 overrides: 16920235!
initialize

	inventory := OrderedCollection with: '1234567890123'.

	contents := Dictionary new.! !

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:25:59'!
ERROR!

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:25:59'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:26:27'!
quantityOf: aBook

	^contents at: aBook! !

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:26:31'!
PASSED!

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:26:35'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'WAL 6/7/2023 19:26:35'!
PASSED!

!testRun: #CartTest #test02ABookCanBeAdded stamp: 'WAL 6/7/2023 19:26:35'!
ERROR!

!testRun: #CartTest #test03AnNotAvailableBookCanBeAdded stamp: 'WAL 6/7/2023 19:26:35'!
PASSED!

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:26:35'!
PASSED!

!testRun: #CartTest #test02ABookCanBeAdded stamp: 'WAL 6/7/2023 19:26:35'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:27:52' prior: 50624502!
add: aBook

	self add: aBook quantity: 1! !

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:27:57'!
PASSED!

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:28:00'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'WAL 6/7/2023 19:28:00'!
PASSED!

!testRun: #CartTest #test02ABookCanBeAdded stamp: 'WAL 6/7/2023 19:28:00'!
FAILURE!

!testRun: #CartTest #test03AnNotAvailableBookCanBeAdded stamp: 'WAL 6/7/2023 19:28:00'!
PASSED!

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:28:00'!
PASSED!

!testRun: #CartTest #test02ABookCanBeAdded stamp: 'WAL 6/7/2023 19:28:00'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:28:48' prior: 50624443!
includes: aBook

	^contents keys includes: aBook! !

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:28:55'!
PASSED!

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:28:57'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'WAL 6/7/2023 19:28:57'!
PASSED!

!testRun: #CartTest #test02ABookCanBeAdded stamp: 'WAL 6/7/2023 19:28:57'!
PASSED!

!testRun: #CartTest #test03AnNotAvailableBookCanBeAdded stamp: 'WAL 6/7/2023 19:28:57'!
PASSED!

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:28:57'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:30:08'!
test05ANotAvailableQuantityOfABookCanNotBeAdded
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	cart add: book quantity: 10.
	
	self deny: cart isEmpty.
	self assert: 10 equals: (cart quantityOf: book)! !
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:30:15'!
test03AnNotAvailableBookCanNotBeAdded
	
	| cart book | 
	
	book := '0123123456789'.
	
	cart := Cart new.
	
	self
		should: [ cart add: book. ]
		raise: Error
		withExceptionDo: [ :anError | cart isEmpty ]! !

!methodRemoval: CartTest #test03AnNotAvailableBookCanBeAdded stamp: 'WAL 6/7/2023 19:30:15'!
test03AnNotAvailableBookCanBeAdded
	
	| cart book | 
	
	book := '0123123456789'.
	
	cart := Cart new.
	
	self
		should: [ cart add: book. ]
		raise: Error
		withExceptionDo: [ :anError | cart isEmpty ]!
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:30:45' prior: 50624658!
test05ANotAvailableQuantityOfABookCanNotBeAdded
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	cart add: book quantity: 50.
	
	self deny: cart isEmpty.
	self assert: 10 equals: (cart quantityOf: book)! !
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:31:41' prior: 50624686!
test05ANotAvailableQuantityOfABookCanNotBeAdded
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	
	self
		should: [ cart add: book quantity: 50. ]
		raise: Error
		withExceptionDo: [ :anError | cart isEmpty ]! !

!testRun: #CartTest #test05ANotAvailableQuantityOfABookCanNotBeAdded stamp: 'WAL 6/7/2023 19:31:42'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:37:19' prior: 50624569!
add: aBook quantity: aQuantity

	| availableQuantity |
	
	availableQuantity := inventory at: aBook ifAbsent: [
		self error: 'Book not available'
	].

	(availableQuantity > aQuantity) ifTrue: [
		contents at: aBook put: aQuantity
	] ifFalse: [
		self error: 'Book quantity not available'
	]! !

!testRun: #CartTest #test05ANotAvailableQuantityOfABookCanNotBeAdded stamp: 'WAL 6/7/2023 19:37:28'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'WAL 6/7/2023 19:37:28'!
PASSED!

!testRun: #CartTest #test02ABookCanBeAdded stamp: 'WAL 6/7/2023 19:37:28'!
ERROR!

!testRun: #CartTest #test03AnNotAvailableBookCanNotBeAdded stamp: 'WAL 6/7/2023 19:37:28'!
PASSED!

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:37:28'!
ERROR!

!testRun: #CartTest #test05ANotAvailableQuantityOfABookCanNotBeAdded stamp: 'WAL 6/7/2023 19:37:28'!
PASSED!
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:37:56' prior: 50624578 overrides: 16920235!
initialize

	inventory := Dictionary with: '1234567890123'.

	contents := Dictionary new.! !
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:39:32' prior: 50624741 overrides: 16920235!
initialize

	inventory := Dictionary with: '1234567890123'.
"{'Red' . Color red . 'Blue' . Color blue . 'Green' . Color green}"
	contents := Dictionary new.! !
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:40:15' prior: 50624747 overrides: 16920235!
initialize

	inventory := Dictionary newFromPairs: {'1234567890123' . 30}.
	contents := Dictionary new.! !

!testRun: #CartTest #test05ANotAvailableQuantityOfABookCanNotBeAdded stamp: 'WAL 6/7/2023 19:40:19'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'WAL 6/7/2023 19:40:19'!
PASSED!

!testRun: #CartTest #test02ABookCanBeAdded stamp: 'WAL 6/7/2023 19:40:19'!
PASSED!

!testRun: #CartTest #test03AnNotAvailableBookCanNotBeAdded stamp: 'WAL 6/7/2023 19:40:19'!
PASSED!

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:40:19'!
PASSED!

!testRun: #CartTest #test05ANotAvailableQuantityOfABookCanNotBeAdded stamp: 'WAL 6/7/2023 19:40:19'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:41:31'!
test06QuantitiesOfASameBookCanBeAddedSequentially
	
	| chart book | 
	
	book := '1234567890123'.
	
	chart := Cart new.
	chart add: book quantity: 10.
	chart add: book quantity: 5.
	
	self deny: chart isEmpty.
	self assert: 15 equals: (chart quantityOf: book)! !
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:41:40' prior: 50624780!
test06QuantitiesOfASameBookCanBeAddedSequentially
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	cart add: book quantity: 10.
	cart add: book quantity: 5.
	
	self deny: cart isEmpty.
	self assert: 15 equals: (cart quantityOf: book)! !

!testRun: #CartTest #test06QuantitiesOfASameBookCanBeAddedSequentially stamp: 'WAL 6/7/2023 19:41:51'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:43:21' prior: 50624710!
add: aBook quantity: aQuantity

	| availableQuantity |
	
	availableQuantity := inventory at: aBook ifAbsent: [
		self error: 'Book not available'
	].

	(availableQuantity > aQuantity) ifTrue: [
		contents at: aBook put: aQuantity + (self quantityOf: aBook)
	] ifFalse: [
		self error: 'Book quantity not available'
	]! !

!testRun: #CartTest #test06QuantitiesOfASameBookCanBeAddedSequentially stamp: 'WAL 6/7/2023 19:43:44'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:44:04' prior: 50624589!
quantityOf: aBook

	^contents at: aBook ifAbsent: 0! !

!testRun: #CartTest #test06QuantitiesOfASameBookCanBeAddedSequentially stamp: 'WAL 6/7/2023 19:44:08'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'WAL 6/7/2023 19:44:08'!
PASSED!

!testRun: #CartTest #test02ABookCanBeAdded stamp: 'WAL 6/7/2023 19:44:08'!
PASSED!

!testRun: #CartTest #test03AnNotAvailableBookCanNotBeAdded stamp: 'WAL 6/7/2023 19:44:08'!
PASSED!

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:44:08'!
PASSED!

!testRun: #CartTest #test05ANotAvailableQuantityOfABookCanNotBeAdded stamp: 'WAL 6/7/2023 19:44:08'!
PASSED!

!testRun: #CartTest #test06QuantitiesOfASameBookCanBeAddedSequentially stamp: 'WAL 6/7/2023 19:44:08'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:47:25'!
test07QuantitiesOfASameBookCanNotBeAddedSequentiallyIfNotAvailable
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	cart add: book quantity: 40.
	
	
	self
		should: [ cart add: book quantity: 20. ]
		raise: Error
		withExceptionDo: [ : anError |
			self assert: 40 equals: (cart quantityOf: book)
			]! !

!testRun: #CartTest #test07QuantitiesOfASameBookCanNotBeAddedSequentiallyIfNotAvailable stamp: 'WAL 6/7/2023 19:47:28'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:47:56' prior: 50624847!
test07QuantitiesOfASameBookCanNotBeAddedSequentiallyIfNotAvailable
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	cart add: book quantity: 20.
	
	
	self
		should: [ cart add: book quantity: 20. ]
		raise: Error
		withExceptionDo: [ : anError |
			self assert: 40 equals: (cart quantityOf: book)
			]! !
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:48:07' prior: 50624864!
test07QuantitiesOfASameBookCanNotBeAddedSequentiallyIfNotAvailable
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	cart add: book quantity: 20.
	
	
	self
		should: [ cart add: book quantity: 20. ]
		raise: Error
		withExceptionDo: [ : anError |
			self assert: 20 equals: (cart quantityOf: book)
		]! !

!testRun: #CartTest #test07QuantitiesOfASameBookCanNotBeAddedSequentiallyIfNotAvailable stamp: 'WAL 6/7/2023 19:48:08'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'WAL 6/7/2023 19:51:27' prior: 50624805!
add: aBook quantity: aQuantity

	| availableQuantity totalRequestedQuantity |
	
	availableQuantity := inventory at: aBook ifAbsent: [
		self error: 'Book not available'
	].

	totalRequestedQuantity := aQuantity + (self quantityOf: aBook).

	(availableQuantity > totalRequestedQuantity) ifTrue: [
		contents at: aBook put: totalRequestedQuantity
	] ifFalse: [
		self error: 'Book quantity not available'
	]! !

!testRun: #CartTest #test07QuantitiesOfASameBookCanNotBeAddedSequentiallyIfNotAvailable stamp: 'WAL 6/7/2023 19:51:37'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'WAL 6/7/2023 19:51:37'!
PASSED!

!testRun: #CartTest #test02ABookCanBeAdded stamp: 'WAL 6/7/2023 19:51:37'!
PASSED!

!testRun: #CartTest #test03AnNotAvailableBookCanNotBeAdded stamp: 'WAL 6/7/2023 19:51:37'!
PASSED!

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'WAL 6/7/2023 19:51:37'!
PASSED!

!testRun: #CartTest #test05ANotAvailableQuantityOfABookCanNotBeAdded stamp: 'WAL 6/7/2023 19:51:37'!
PASSED!

!testRun: #CartTest #test06QuantitiesOfASameBookCanBeAddedSequentially stamp: 'WAL 6/7/2023 19:51:37'!
PASSED!

!testRun: #CartTest #test07QuantitiesOfASameBookCanNotBeAddedSequentiallyIfNotAvailable stamp: 'WAL 6/7/2023 19:51:37'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'WAL 6/7/2023 19:51:58' prior: 50624877!
test07QuantitiesOfASameBookCanNotBeAddedSequentiallyIfNotAvailable
	
	| cart book | 
	
	book := '1234567890123'.
	
	cart := Cart new.
	cart add: book quantity: 20.
	
	self
		should: [ cart add: book quantity: 20. ]
		raise: Error
		withExceptionDo: [ : anError |
			self assert: 20 equals: (cart quantityOf: book)
		]! !