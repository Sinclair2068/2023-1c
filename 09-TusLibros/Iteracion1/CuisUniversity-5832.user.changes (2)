

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (2 June 2023 16:52:15) as F:\CUIS Univeristy Repaso\CuisUniversity-5832.image!


Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classDefinition: #MarsRover category: 'Ejercicio- MarsRover' stamp: 'AS 6/2/2023 17:02:03'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classDefinition: #MarsRoverTest category: 'Ejercicio- MarsRover' stamp: 'AS 6/2/2023 17:02:26'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'AS 6/2/2023 17:38:47'!
test01RoverIsAtInitialPositionAndHeadingToInitalOrientation

	| rover |
	
	rover := MarsRover at: 1@1 heading: #North.
	
	self assert: 1@1 equals: rover position.
	self assert: #North equals: rover heading.! !

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 17:38:50'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'AS 6/2/2023 17:38:57'!
at: aPoint heading: aSymbol 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAt: aPoint heading: aSymbol ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'AS 6/2/2023 17:39:28' prior: 50624404!
at: aPoint heading: aDirection

	^self new initializeAt: aPoint heading: aDirection! !

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 17:39:37'!
ERROR!

!classDefinition: #MarsRover category: 'Ejercicio- MarsRover' stamp: 'AS 6/2/2023 17:39:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classDefinition: #MarsRover category: 'Ejercicio- MarsRover' stamp: 'AS 6/2/2023 17:39:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'AS 6/2/2023 17:39:59'!
initializeAt: aPoint heading: aDirection 
	self shouldBeImplemented.
	point := aPoint.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'AS 6/2/2023 17:40:06' prior: 50624437!
initializeAt: aPoint heading: aDirection 
	
	point := aPoint.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 17:40:07'!
ERROR!
!MarsRover methodsFor: 'testing' stamp: 'AS 6/2/2023 17:40:26'!
position
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'testing' stamp: 'AS 6/2/2023 17:40:38' prior: 50624453!
position
	
	^1@1! !

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 17:40:40'!
ERROR!
!MarsRover methodsFor: 'testing' stamp: 'AS 6/2/2023 17:40:45'!
heading
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'testing' stamp: 'AS 6/2/2023 17:40:55' prior: 50624464!
heading
	
	^#North! !

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 17:40:57'!
PASSED!

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 17:40:57'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AS 6/2/2023 17:43:57'!
test02RoverMovingForwardHeadingNorthIncreaseY

	| rover |
	
	rover := MarsRover at: 1@1 heading: #North.
	rover command: 'f'.
	
	self assert: 1@2 equals: rover position.
	self assert: #North equals: rover heading.! !

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 17:44:07'!
ERROR!
!MarsRover methodsFor: 'operations' stamp: 'AS 6/2/2023 17:44:24'!
command: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'Ejercicio- MarsRover' stamp: 'AS 6/2/2023 17:45:55'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!
!MarsRover methodsFor: 'operations' stamp: 'AS 6/2/2023 17:45:52' prior: 50624493!
command: aCommand
	
	(aCommand = 'f') ifTrue: [ position := 1@2]! !

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 17:46:02'!
FAILURE!

Object subclass: #MarsRover
	instanceVariableNames: 'point direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classDefinition: #MarsRover category: 'Ejercicio- MarsRover' stamp: 'AS 6/2/2023 17:46:27'!
Object subclass: #MarsRover
	instanceVariableNames: 'point direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classDefinition: #MarsRover category: 'Ejercicio- MarsRover' stamp: 'AS 6/2/2023 17:46:32'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AS 6/2/2023 17:46:32' prior: 50624444!
initializeAt: aPoint heading: aDirection 
	
	position := aPoint.
	direction := aDirection.! !
!MarsRover methodsFor: 'testing' stamp: 'AS 6/2/2023 17:46:47' prior: 50624457!
position
	
	^position! !

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 17:47:06'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 17:47:06'!
FAILURE!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 17:47:06'!
FAILURE!

rover position!
!MarsRover methodsFor: 'operations' stamp: 'AS 6/2/2023 17:48:13' prior: 50624506!
command: aCommand
	
	(aCommand == 'f') ifTrue: [ position := 1@2 ]! !

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 17:48:17'!
FAILURE!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 17:48:17'!
FAILURE!

aCommand == 'f'!

aCommand = 'f'!
!MarsRover methodsFor: 'operations' stamp: 'AS 6/2/2023 17:49:49' prior: 50624556!
command: aCommand
	
	(aCommand = 'f') ifTrue: [ position := 1@2 ]! !

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 17:49:50'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 17:49:52'!
PASSED!

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 17:49:52'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 17:49:52'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 17:50:36'!
test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice

	| rover |
	
	rover := MarsRover at: 1@1 heading: #North.
	rover command: 'f'.
	
	self assert: 1@2 equals: rover position.
	self assert: #North equals: rover heading.! !
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 17:50:48' prior: 50624588!
test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice

	| rover |
	
	rover := MarsRover at: 1@1 heading: #North.
	rover command: 'ff'.
	
	self assert: 1@3 equals: rover position.
	self assert: #North equals: rover heading.! !
!MarsRover methodsFor: 'operations' stamp: 'AS 6/2/2023 17:52:21' prior: 50624569!
command: aCommandSequence
	
	aCommandSequence do: [ :aCommand | (aCommand = 'f') ifTrue: [ position := position + 0@1 ]]
! !

!testRun: #MarsRoverTest #test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice stamp: 'AS 6/2/2023 17:52:27'!
FAILURE!

!testRun: #MarsRoverTest #test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice stamp: 'AS 6/2/2023 17:52:27'!
FAILURE!

rover position!
!MarsRover methodsFor: 'operations' stamp: 'AS 6/2/2023 17:53:40' prior: 50624608!
command: aCommandSequence
	
	aCommandSequence do: [ :aCommand | (aCommand = $f) ifTrue: [ position := position + 0@1 ]]
! !

!testRun: #MarsRoverTest #test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice stamp: 'AS 6/2/2023 17:53:43'!
ERROR!
!MarsRover methodsFor: 'operations' stamp: 'AS 6/2/2023 17:54:10' prior: 50624623!
command: aCommandSequence
	
	aCommandSequence do: [ :aCommand | (aCommand = $f) ifTrue: [ position := position + (0@1) ]]
! !

!testRun: #MarsRoverTest #test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice stamp: 'AS 6/2/2023 17:54:11'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice stamp: 'AS 6/2/2023 17:54:14'!
PASSED!

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 17:54:14'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 17:54:14'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice stamp: 'AS 6/2/2023 17:54:14'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 17:55:07'!
test04RoverMovingBackHeadingNorthDecreaseY

	| rover |
	
	rover := MarsRover at: 1@1 heading: #North.
	rover command: 'b'.
	
	self assert: 1@0 equals: rover position.
	self assert: #North equals: rover heading.! !

!testRun: #MarsRoverTest #test04RoverMovingBackHeadingNorthDecreaseY stamp: 'AS 6/2/2023 17:55:09'!
FAILURE!
!MarsRover methodsFor: 'operations' stamp: 'AS 6/2/2023 17:56:07' prior: 50624634!
command: aCommandSequence
	
	aCommandSequence do: [ :aCommand | 
			(aCommand = $f) ifTrue: [ position := position + (0@1) ].
			(aCommand = $b) ifTrue: [ position := position - (0@1) ].
		]
! !

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 17:56:11'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 17:56:11'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice stamp: 'AS 6/2/2023 17:56:11'!
PASSED!

!testRun: #MarsRoverTest #test04RoverMovingBackHeadingNorthDecreaseY stamp: 'AS 6/2/2023 17:56:11'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 17:56:59'!
test02RoverMovingForwardHeadingEastIncreaseX

	| rover |
	
	rover := MarsRover at: 1@1 heading: #East.
	rover command: 'f'.
	
	self assert: 2@1 equals: rover position.
	self assert: #East equals: rover heading.! !

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingEastIncreaseX stamp: 'AS 6/2/2023 17:57:02'!
FAILURE!
!MarsRover methodsFor: 'testing' stamp: 'AS 6/2/2023 17:57:56' prior: 50624468!
heading
	
	^direction! !
!MarsRover methodsFor: 'operations' stamp: 'AS 6/2/2023 17:59:33' prior: 50624673!
command: aCommandSequence
	
	aCommandSequence do: [ :aCommand | 
			(direction = #North) ifTrue:
				[
					(aCommand = $f) ifTrue: [ position := position + (0@1) ].
					(aCommand = $b) ifTrue: [ position := position - (0@1) ].
				].
			(direction = #East) ifTrue:
				[
					(aCommand = $f) ifTrue: [ position := position + (1@0) ].
					(aCommand = $b) ifTrue: [ position := position - (1@0) ].
				].			
		]
! !

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 17:59:35'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingEastIncreaseX stamp: 'AS 6/2/2023 17:59:35'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 17:59:35'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice stamp: 'AS 6/2/2023 17:59:35'!
PASSED!

!testRun: #MarsRoverTest #test04RoverMovingBackHeadingNorthDecreaseY stamp: 'AS 6/2/2023 17:59:35'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:00:29'!
test02RoverMovingForwardHeadingSouthDecreaseY

	| rover |
	
	rover := MarsRover at: 1@1 heading: #South.
	rover command: 'f'.
	
	self assert: 1@0 equals: rover position.
	self assert: #South equals: rover heading.! !
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:01:14'!
test05RoverMovingForwardHeadingEastIncreaseX

	| rover |
	
	rover := MarsRover at: 1@1 heading: #East.
	rover command: 'f'.
	
	self assert: 2@1 equals: rover position.
	self assert: #East equals: rover heading.! !

!methodRemoval: MarsRoverTest #test02RoverMovingForwardHeadingEastIncreaseX stamp: 'AS 6/2/2023 18:01:14'!
test02RoverMovingForwardHeadingEastIncreaseX

	| rover |
	
	rover := MarsRover at: 1@1 heading: #East.
	rover command: 'f'.
	
	self assert: 2@1 equals: rover position.
	self assert: #East equals: rover heading.!
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:01:24'!
test06RoverMovingForwardHeadingSouthDecreaseY

	| rover |
	
	rover := MarsRover at: 1@1 heading: #South.
	rover command: 'f'.
	
	self assert: 1@0 equals: rover position.
	self assert: #South equals: rover heading.! !

!methodRemoval: MarsRoverTest #test02RoverMovingForwardHeadingSouthDecreaseY stamp: 'AS 6/2/2023 18:01:24'!
test02RoverMovingForwardHeadingSouthDecreaseY

	| rover |
	
	rover := MarsRover at: 1@1 heading: #South.
	rover command: 'f'.
	
	self assert: 1@0 equals: rover position.
	self assert: #South equals: rover heading.!

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 18:01:32'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 18:01:32'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice stamp: 'AS 6/2/2023 18:01:32'!
PASSED!

!testRun: #MarsRoverTest #test04RoverMovingBackHeadingNorthDecreaseY stamp: 'AS 6/2/2023 18:01:32'!
PASSED!

!testRun: #MarsRoverTest #test05RoverMovingForwardHeadingEastIncreaseX stamp: 'AS 6/2/2023 18:01:32'!
PASSED!

!testRun: #MarsRoverTest #test06RoverMovingForwardHeadingSouthDecreaseY stamp: 'AS 6/2/2023 18:01:32'!
FAILURE!

!testRun: #MarsRoverTest #test06RoverMovingForwardHeadingSouthDecreaseY stamp: 'AS 6/2/2023 18:01:32'!
FAILURE!
!MarsRover methodsFor: 'operations' stamp: 'AS 6/2/2023 18:02:10' prior: 50624713!
command: aCommandSequence
	
	aCommandSequence do: [ :aCommand | 
			(direction = #North) ifTrue:
				[
					(aCommand = $f) ifTrue: [ position := position + (0@1) ].
					(aCommand = $b) ifTrue: [ position := position - (0@1) ].
				].
			(direction = #East) ifTrue:
				[
					(aCommand = $f) ifTrue: [ position := position + (1@0) ].
					(aCommand = $b) ifTrue: [ position := position - (1@0) ].
				].	
			(direction = #South) ifTrue:
				[
					(aCommand = $f) ifTrue: [ position := position - (0@1) ].
					(aCommand = $b) ifTrue: [ position := position + (0@1) ].
				].					
		]
! !

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 18:02:12'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 18:02:12'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice stamp: 'AS 6/2/2023 18:02:12'!
PASSED!

!testRun: #MarsRoverTest #test04RoverMovingBackHeadingNorthDecreaseY stamp: 'AS 6/2/2023 18:02:12'!
PASSED!

!testRun: #MarsRoverTest #test05RoverMovingForwardHeadingEastIncreaseX stamp: 'AS 6/2/2023 18:02:12'!
PASSED!

!testRun: #MarsRoverTest #test06RoverMovingForwardHeadingSouthDecreaseY stamp: 'AS 6/2/2023 18:02:12'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:02:52'!
test07RoverMovingForwardHeadingWestDecreaseX

	| rover |
	
	rover := MarsRover at: 1@1 heading: #West.
	rover command: 'f'.
	
	self assert: 0@1 equals: rover position.
	self assert: #West equals: rover heading.! !

!testRun: #MarsRoverTest #test07RoverMovingForwardHeadingWestDecreaseX stamp: 'AS 6/2/2023 18:02:55'!
FAILURE!
!MarsRover methodsFor: 'operations' stamp: 'AS 6/2/2023 18:03:21' prior: 50624820!
command: aCommandSequence
	
	aCommandSequence do: [ :aCommand | 
			(direction = #North) ifTrue:
				[
					(aCommand = $f) ifTrue: [ position := position + (0@1) ].
					(aCommand = $b) ifTrue: [ position := position - (0@1) ].
				].
			(direction = #East) ifTrue:
				[
					(aCommand = $f) ifTrue: [ position := position + (1@0) ].
					(aCommand = $b) ifTrue: [ position := position - (1@0) ].
				].	
			(direction = #South) ifTrue:
				[
					(aCommand = $f) ifTrue: [ position := position - (0@1) ].
					(aCommand = $b) ifTrue: [ position := position + (0@1) ].
				].
			(direction = #West) ifTrue:
				[
					(aCommand = $f) ifTrue: [ position := position - (1@0) ].
					(aCommand = $b) ifTrue: [ position := position + (1@0) ].
				].									
		]
! !

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 18:03:23'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 18:03:23'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice stamp: 'AS 6/2/2023 18:03:23'!
PASSED!

!testRun: #MarsRoverTest #test04RoverMovingBackHeadingNorthDecreaseY stamp: 'AS 6/2/2023 18:03:23'!
PASSED!

!testRun: #MarsRoverTest #test05RoverMovingForwardHeadingEastIncreaseX stamp: 'AS 6/2/2023 18:03:23'!
PASSED!

!testRun: #MarsRoverTest #test06RoverMovingForwardHeadingSouthDecreaseY stamp: 'AS 6/2/2023 18:03:23'!
PASSED!

!testRun: #MarsRoverTest #test07RoverMovingForwardHeadingWestDecreaseX stamp: 'AS 6/2/2023 18:03:23'!
PASSED!

Object subclass: #Direction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classDefinition: #Direction category: 'Ejercicio- MarsRover' stamp: 'AS 6/2/2023 18:05:20'!
Object subclass: #Direction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

Direction subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classDefinition: #North category: 'Ejercicio- MarsRover' stamp: 'AS 6/2/2023 18:05:32'!
Direction subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!
!North methodsFor: 'no messages' stamp: 'AS 6/2/2023 18:06:22'!
StepForward
	
	^0@1! !
!North methodsFor: 'as yet unclassified' stamp: 'AS 6/2/2023 18:07:01'!
Step
	
	^0@1! !

!methodRemoval: North #StepForward stamp: 'AS 6/2/2023 18:07:01'!
StepForward
	
	^0@1!
!MarsRover methodsFor: 'operations' stamp: 'AS 6/2/2023 18:08:19' prior: 50624876!
command: aCommandSequence
	
	aCommandSequence do: [ :aCommand | 
			(direction = #North) ifTrue:
				[
					(aCommand = $f) ifTrue: [ position := position + direction step ].
					(aCommand = $b) ifTrue: [ position := position - direction step ].
				].
			(direction = #East) ifTrue:
				[
					(aCommand = $f) ifTrue: [ position := position + (1@0) ].
					(aCommand = $b) ifTrue: [ position := position - (1@0) ].
				].	
			(direction = #South) ifTrue:
				[
					(aCommand = $f) ifTrue: [ position := position - (0@1) ].
					(aCommand = $b) ifTrue: [ position := position + (0@1) ].
				].
			(direction = #West) ifTrue:
				[
					(aCommand = $f) ifTrue: [ position := position - (1@0) ].
					(aCommand = $b) ifTrue: [ position := position + (1@0) ].
				].									
		]
! !

Direction subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classDefinition: #South category: 'Ejercicio- MarsRover' stamp: 'AS 6/2/2023 18:08:29'!
Direction subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

Direction subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classDefinition: #East category: 'Ejercicio- MarsRover' stamp: 'AS 6/2/2023 18:08:33'!
Direction subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

Direction subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classDefinition: #West category: 'Ejercicio- MarsRover' stamp: 'AS 6/2/2023 18:08:38'!
Direction subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!
!Direction methodsFor: 'no messages' stamp: 'AS 6/2/2023 18:09:01'!
step
	
	self subclassResponsibility ! !
!South methodsFor: 'no messages' stamp: 'AS 6/2/2023 18:09:37'!
Step
	
	^0@1! !
!East methodsFor: 'no messages' stamp: 'AS 6/2/2023 18:09:50'!
Step
	
	^1@0! !
!West methodsFor: 'no messages' stamp: 'AS 6/2/2023 18:10:01'!
Step
	
	^1@0! !
!West methodsFor: 'as yet unclassified' stamp: 'AS 6/2/2023 18:10:45' prior: 50625030!
Step
	
	^-1@0! !
!South methodsFor: 'as yet unclassified' stamp: 'AS 6/2/2023 18:10:55' prior: 50625024!
Step
	
	^0@-1! !
!MarsRover methodsFor: 'operations' stamp: 'AS 6/2/2023 18:11:18' prior: 50624959!
command: aCommandSequence
	
	aCommandSequence do: [ :aCommand | 
				(aCommand = $f) ifTrue: [ position := position + direction step ].
				(aCommand = $b) ifTrue: [ position := position - direction step ].
		]
! !

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 18:11:20'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 18:11:20'!
ERROR!

!testRun: #MarsRoverTest #test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice stamp: 'AS 6/2/2023 18:11:20'!
ERROR!

!testRun: #MarsRoverTest #test04RoverMovingBackHeadingNorthDecreaseY stamp: 'AS 6/2/2023 18:11:20'!
ERROR!

!testRun: #MarsRoverTest #test05RoverMovingForwardHeadingEastIncreaseX stamp: 'AS 6/2/2023 18:11:20'!
ERROR!

!testRun: #MarsRoverTest #test06RoverMovingForwardHeadingSouthDecreaseY stamp: 'AS 6/2/2023 18:11:20'!
ERROR!

!testRun: #MarsRoverTest #test07RoverMovingForwardHeadingWestDecreaseX stamp: 'AS 6/2/2023 18:11:20'!
ERROR!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 18:11:25'!
ERROR!
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:12:11' prior: 50624391!
test01RoverIsAtInitialPositionAndHeadingToInitalOrientation

	| rover |
	
	rover := MarsRover at: 1@1 heading: North new.
	
	self assert: 1@1 equals: rover position.
	self assert: #North equals: rover heading.! !
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:12:32'!
north

	^North new.! !
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:12:40'!
south

	^South new.! !
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:12:47'!
east

	^East new.! !
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:12:57'!
West

	^West new.! !
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:13:23'!
west

	^West new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AS 6/2/2023 18:13:23' prior: 50625098!
West

	^West new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AS 6/2/2023 18:13:23' prior: 50624863!
test07RoverMovingForwardHeadingWestDecreaseX

	| rover |
	
	rover := MarsRover at: 1@1 heading: #west.
	rover command: 'f'.
	
	self assert: 0@1 equals: rover position.
	self assert: #west equals: rover heading.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AS 6/2/2023 18:13:23' prior: 50625101!
west

	^West new.! !

!methodRemoval: MarsRoverTest #West stamp: 'AS 6/2/2023 18:13:23'!
West

	^West new.!
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:13:56' prior: 50625080!
test01RoverIsAtInitialPositionAndHeadingToInitalOrientation

	| rover |
	
	rover := MarsRover at: 1@1 heading: self north.
	
	self assert: 1@1 equals: rover position.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:14:07' prior: 50624480!
test02RoverMovingForwardHeadingNorthIncreaseY

	| rover |
	
	rover := MarsRover at: 1@1 heading: self north.
	rover command: 'f'.
	
	self assert: 1@2 equals: rover position.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:14:20' prior: 50624598!
test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice

	| rover |
	
	rover := MarsRover at: 1@1 heading: self north.
	rover command: 'ff'.
	
	self assert: 1@3 equals: rover position.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:14:30' prior: 50624660!
test04RoverMovingBackHeadingNorthDecreaseY

	| rover |
	
	rover := MarsRover at: 1@1 heading: self north.
	rover command: 'b'.
	
	self assert: 1@0 equals: rover position.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:14:40' prior: 50624756!
test05RoverMovingForwardHeadingEastIncreaseX

	| rover |
	
	rover := MarsRover at: 1@1 heading: self east.
	rover command: 'f'.
	
	self assert: 2@1 equals: rover position.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:14:48' prior: 50624775!
test06RoverMovingForwardHeadingSouthDecreaseY

	| rover |
	
	rover := MarsRover at: 1@1 heading: self south.
	rover command: 'f'.
	
	self assert: 1@0 equals: rover position.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:14:59' prior: 50625109!
test07RoverMovingForwardHeadingWestDecreaseX

	| rover |
	
	rover := MarsRover at: 1@1 heading: self west.
	rover command: 'f'.
	
	self assert: 0@1 equals: rover position.! !

!testRun: #MarsRoverTest #test07RoverMovingForwardHeadingWestDecreaseX stamp: 'AS 6/2/2023 18:15:00'!
ERROR!

direction step!
!West methodsFor: 'as yet unclassified' stamp: 'AS 6/2/2023 18:15:55' overrides: 50625020!
step
	
	^-1@0! !

!methodRemoval: West #Step stamp: 'AS 6/2/2023 18:15:55'!
Step
	
	^-1@0!
!South methodsFor: 'as yet unclassified' stamp: 'AS 6/2/2023 18:16:20' overrides: 50625020!
step
	
	^0@-1! !

!methodRemoval: South #Step stamp: 'AS 6/2/2023 18:16:20'!
Step
	
	^0@-1!
!North methodsFor: 'accessing' stamp: 'AS 6/2/2023 18:16:36' overrides: 50625020!
step
	
	^0@1! !

!methodRemoval: North #Step stamp: 'AS 6/2/2023 18:16:36'!
Step
	
	^0@1!
!East methodsFor: 'as yet unclassified' stamp: 'AS 6/2/2023 18:16:45' overrides: 50625020!
step
	
	^1@0! !

!methodRemoval: East #Step stamp: 'AS 6/2/2023 18:16:45'!
Step
	
	^1@0!

!testRun: #MarsRoverTest #test01RoverIsAtInitialPositionAndHeadingToInitalOrientation stamp: 'AS 6/2/2023 18:16:55'!
PASSED!

!testRun: #MarsRoverTest #test02RoverMovingForwardHeadingNorthIncreaseY stamp: 'AS 6/2/2023 18:16:55'!
PASSED!

!testRun: #MarsRoverTest #test03RoverMovingTwoStepsForwardHeadingNorthIncreaseYTwice stamp: 'AS 6/2/2023 18:16:55'!
PASSED!

!testRun: #MarsRoverTest #test04RoverMovingBackHeadingNorthDecreaseY stamp: 'AS 6/2/2023 18:16:55'!
PASSED!

!testRun: #MarsRoverTest #test05RoverMovingForwardHeadingEastIncreaseX stamp: 'AS 6/2/2023 18:16:55'!
PASSED!

!testRun: #MarsRoverTest #test06RoverMovingForwardHeadingSouthDecreaseY stamp: 'AS 6/2/2023 18:16:55'!
PASSED!

!testRun: #MarsRoverTest #test07RoverMovingForwardHeadingWestDecreaseX stamp: 'AS 6/2/2023 18:16:55'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:18:31'!
test07RotateLeftFromNorthLetHeadingToWest

	| rover |
	
	rover := MarsRover at: 1@1 heading: self north.
	rover command: 'l'.
	
	self assert: self west equals: rover heading.! !
!MarsRoverTest methodsFor: 'test' stamp: 'AS 6/2/2023 18:18:40'!
test08RotateLeftFromNorthLetHeadingToWest

	| rover |
	
	rover := MarsRover at: 1@1 heading: self north.
	rover command: 'l'.
	
	self assert: self west equals: rover heading.! !

!methodRemoval: MarsRoverTest #test07RotateLeftFromNorthLetHeadingToWest stamp: 'AS 6/2/2023 18:18:40'!
test07RotateLeftFromNorthLetHeadingToWest

	| rover |
	
	rover := MarsRover at: 1@1 heading: self north.
	rover command: 'l'.
	
	self assert: self west equals: rover heading.!

!testRun: #MarsRoverTest #test08RotateLeftFromNorthLetHeadingToWest stamp: 'AS 6/2/2023 18:18:43'!
FAILURE!
!MarsRover methodsFor: 'operations' stamp: 'AS 6/2/2023 18:19:27' prior: 50625042!
command: aCommandSequence
	
	aCommandSequence do: [ :aCommand | 
				(aCommand = $f) ifTrue: [ position := position + direction step ].
				(aCommand = $b) ifTrue: [ position := position - direction step ].
				(aCommand = $l) ifTrue: [ direction := direction left ].
		]
! !
!North methodsFor: 'accessing' stamp: 'AS 6/2/2023 18:19:51'!
left
	
	^East new.! !
!East methodsFor: 'as yet unclassified' stamp: 'AS 6/2/2023 18:20:14'!
left
	
	^South new.! !
!South methodsFor: 'as yet unclassified' stamp: 'AS 6/2/2023 18:20:29'!
left
	
	^East new.! !
!West methodsFor: 'as yet unclassified' stamp: 'AS 6/2/2023 18:20:43'!
left
	
	^West new.! !
!North methodsFor: 'accessing' stamp: 'AS 6/2/2023 18:21:08' prior: 50625278!
left
	
	^West new.! !

!testRun: #MarsRoverTest #test08RotateLeftFromNorthLetHeadingToWest stamp: 'AS 6/2/2023 18:21:17'!
FAILURE!

rover direction = West new!

(rover direction) = (West new)!

(rover heading) = (West new)!

rover heading!

----End fileIn of F:\CUIS Univeristy Repaso\Mars Rover\MarsRover-WithHeading.st----!

!classRemoval: #West stamp: 'AS 6/2/2023 19:38:47'!
Direction subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classRemoval: #South stamp: 'AS 6/2/2023 19:38:47'!
Direction subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classRemoval: #North stamp: 'AS 6/2/2023 19:38:47'!
Direction subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classRemoval: #East stamp: 'AS 6/2/2023 19:38:47'!
Direction subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classRemoval: #Direction stamp: 'AS 6/2/2023 19:38:48'!
Object subclass: #Direction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio- MarsRover'!

!classRemoval: #MarsRoverHeadingWest stamp: 'AS 6/2/2023 19:38:51'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'AS 6/2/2023 19:38:52'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'AS 6/2/2023 19:38:52'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeadingEast stamp: 'AS 6/2/2023 19:38:52'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverHeading stamp: 'AS 6/2/2023 19:38:52'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRover stamp: 'AS 6/2/2023 19:38:52'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classRemoval: #MarsRoverTest stamp: 'AS 6/2/2023 19:38:52'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

----End fileIn of F:\CUIS Univeristy Repaso\Primer Parcial\ISW1-2023-1C-Parcial-1.st----!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'AS 6/2/2023 19:42:10'!
PASSED!

!classRemoval: #Perforadora stamp: 'AS 6/3/2023 12:01:11'!
Object subclass: #Perforadora
	instanceVariableNames: 'tipoDeSuelo mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #SinMecha stamp: 'AS 6/3/2023 12:01:12'!
Mecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #MechaWidia stamp: 'AS 6/3/2023 12:01:12'!
Mecha subclass: #MechaWidia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #MechaSoft stamp: 'AS 6/3/2023 12:01:12'!
Mecha subclass: #MechaSoft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #MechaRota stamp: 'AS 6/3/2023 12:01:12'!
Mecha subclass: #MechaRota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #MechaDiamante stamp: 'AS 6/3/2023 12:01:12'!
Mecha subclass: #MechaDiamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Mecha stamp: 'AS 6/3/2023 12:01:12'!
Object subclass: #Mecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Tierra stamp: 'AS 6/3/2023 12:01:13'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Concreto stamp: 'AS 6/3/2023 12:01:13'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #Arenoso stamp: 'AS 6/3/2023 12:01:13'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #CapaDeSuelo stamp: 'AS 6/3/2023 12:01:13'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo resistencia altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classRemoval: #TestDePerforación stamp: 'AS 6/3/2023 12:01:13'!
TestCase subclass: #TestDePerforación
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

----End fileIn of F:\CUIS Univeristy Repaso\Mars Rover 2\MarsRover-WithHeading-a.st----!

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/3/2023 12:08:14'!
PASSED!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/3/2023 12:08:14'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 12:38:40'!
test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover reportTo: window.
	 	
	rover process: 'ff'.
	
	self assert: 1@3 equals: window show second! !

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:39:09'!
ERROR!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:39:09'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 12:39:57'!
reportPosition: aPosition
	
	! !
!Window methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 12:40:10' prior: 50627656!
reportPosition: aPosition
	
	^aPosition
	! !
!MarsRover methodsFor: 'moving' stamp: 'AS 6/3/2023 12:41:53' prior: 50627356!
moveForward
	
	head moveForward.
	
	objectToReport reportPosition: position.
! !

!methodRemoval: Window #show stamp: 'AS 6/3/2023 12:42:04'!
show
	
	^'1@2'!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:42:12'!
ERROR!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:42:12'!
ERROR!
!Window methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 12:43:22'!
show: aPosition

	^aPosition.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 12:43:57' prior: 50627637!
test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover reportTo: window.
	 	
	rover process: 'ff'.
	
	self assert: 1@3 equals: window show! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'AS 6/3/2023 12:44:30'!
Object subclass: #Window
	instanceVariableNames: 'marsRover position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Window methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 12:44:29' prior: 50627660!
reportPosition: aPosition
	
	position := aPosition. 
	! !
!Window methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 12:44:42'!
show

	^position! !

!methodRemoval: Window #show: stamp: 'AS 6/3/2023 12:44:46'!
show: aPosition

	^aPosition.!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:45:01'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:45:01'!
ERROR!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:45:01'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:45:01'!
ERROR!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:45:20'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:45:20'!
ERROR!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:45:20'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:45:20'!
ERROR!
!MarsRover methodsFor: 'command processing' stamp: 'AS 6/3/2023 12:46:37' prior: 50627392!
reportTo: anObserver 
	
	objectToReport := anObserver! !

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:47:10'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:47:10'!
ERROR!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:47:10'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:47:10'!
ERROR!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:47:36'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:47:36'!
ERROR!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:47:36'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:47:36'!
ERROR!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 12:47:52' prior: 50627229!
test01RoverForwardWindowShowsLastPosition

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.
	
	rover reportTo: window.
	
	rover process: 'f'.
	
	self assert: window show = '1@2'
! !

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:47:53'!
FAILURE!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:47:58'!
FAILURE!

window show!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 12:48:43' prior: 50627777!
test01RoverForwardWindowShowsLastPosition

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.
	
	rover reportTo: window.
	
	rover process: 'f'.
	
	self assert: window show = 1@2
! !

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:48:48'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:48:48'!
ERROR!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:48:48'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:48:48'!
ERROR!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 12:49:07' prior: 50627795!
test01RoverForwardWindowShowsLastPosition

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.
	
	rover reportTo: window.
	
	rover process: 'f'.
	
	self assert: window show equals: 1@2
! !

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:49:08'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:49:09'!
PASSED!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:49:09'!
PASSED!

TestCase subclass: #ObserversTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #ObserversTest category: 'MarsRover-WithHeading' stamp: 'AS 6/3/2023 12:51:05'!
TestCase subclass: #ObserversTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 12:51:25'!
test01! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 12:52:52' prior: 50627853!
test01

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover reportTo: log.
	rover reportTo: window.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	
	self assert: 1@2 equals: window show.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 12:53:10' prior: 50627820!
test01RoverForwardWindowShowsLastPosition

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.
	
	rover reportTo: window.
	
	rover process: 'f'.
	
	self assert: 1@2 equals: window show
! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 12:54:12'!
test01RoverMoveForwardReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover reportTo: log.
	rover reportTo: window.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	
	self assert: 1@2 equals: window show.! !

!methodRemoval: ObserversTest #test01 stamp: 'AS 6/3/2023 12:54:12'!
test01

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover reportTo: log.
	rover reportTo: window.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	
	self assert: 1@2 equals: window show.!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 12:54:25'!
FAILURE!

Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'AS 6/3/2023 12:56:11'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'command processing' stamp: 'AS 6/3/2023 12:56:28' prior: 50627743!
reportTo: anObserver 
	
	observers add: anObserver! !
!MarsRover methodsFor: 'initialization' stamp: 'AS 6/3/2023 12:57:14' prior: 50627296!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	observers := OrderedCollection new.! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 12:57:23'!
ERROR!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 12:57:23'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'AS 6/3/2023 12:58:00' prior: 50627664!
moveForward
	
	head moveForward.
	
	observers do: [ :observer | observer reportPosition: position. ]
! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 12:58:12'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 12:58:22'!
PASSED!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 12:58:22'!
PASSED!

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/3/2023 12:58:28'!
PASSED!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/3/2023 12:58:28'!
PASSED!
!MarsRover methodsFor: 'command processing' stamp: 'AS 6/3/2023 13:00:06'!
attach: anObserver 
	
	observers add: anObserver! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:00:06' prior: 50627024!
test01RoverForwardLogRegisterLastPosition

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	log := Log for: rover.
	
	rover attach: log.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first
! !
!ObserversTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:00:06' prior: 50627880!
test01RoverMoveForwardReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log.
	rover attach: window.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	
	self assert: 1@2 equals: window show.! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:00:06' prior: 50627036!
test02RoverForwardTwoStepsLogRegisterTwoLastPosition

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	log := Log for: rover.

	rover attach: log.
	 	
	rover process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 1@3 equals: log lines second
! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:00:06' prior: 50627870!
test01RoverForwardWindowShowsLastPosition

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.
	
	rover attach: window.
	
	rover process: 'f'.
	
	self assert: 1@2 equals: window show
! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:00:06' prior: 50627683!
test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attach: window.
	 	
	rover process: 'ff'.
	
	self assert: 1@3 equals: window show! !

!methodRemoval: MarsRover #reportTo: stamp: 'AS 6/3/2023 13:00:06'!
reportTo: anObserver 
	
	observers add: anObserver!
!MarsRover methodsFor: 'moving' stamp: 'AS 6/3/2023 13:10:34' prior: 50627348!
moveBackward
	
	head moveBackward.
	
	observers do: [ :observer | observer reportPosition: position. ]! !
!MarsRover methodsFor: 'moving' stamp: 'AS 6/3/2023 13:11:53' prior: 50628040!
moveBackward
	
	head moveBackward.
! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 13:12:56'!
test02RoverMoveBackwardsReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log.
	rover attach: window.
	
	rover process: 'b'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@0 equals: log lines first.
	
	self assert: 1@0 equals: window show.! !

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/3/2023 13:12:57'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'AS 6/3/2023 13:13:16' prior: 50628046!
moveBackward
	
	head moveBackward.

	observers do: [ :observer | observer reportPosition: position. ]! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 13:13:26'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/3/2023 13:13:26'!
PASSED!
!MarsRover methodsFor: 'moving' stamp: 'AS 6/3/2023 13:14:02'!
notify

	^ observers do: [ :observer | observer reportPosition: position. ]! !
!MarsRover methodsFor: 'moving' stamp: 'AS 6/3/2023 13:14:02' prior: 50627944!
moveForward
	
	head moveForward.
	
	self notify
! !
!MarsRover methodsFor: 'moving' stamp: 'AS 6/3/2023 13:14:02' prior: 50628069!
moveBackward
	
	head moveBackward.

	self notify! !
!MarsRover methodsFor: 'moving' stamp: 'AS 6/3/2023 13:14:14' prior: 50628087!
moveForward
	
	head moveForward.
	self notify
! !
!MarsRover methodsFor: 'moving' stamp: 'AS 6/3/2023 13:14:18' prior: 50628092!
moveBackward
	
	head moveBackward.
	self notify! !
!MarsRover methodsFor: 'moving' stamp: 'AS 6/3/2023 13:14:27' prior: 50628082!
notify

	observers do: [ :observer | observer reportPosition: position. ]! !
!Window methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:16:55'!
updatePosition: aPosition
	
	position := aPosition. 
	! !

!methodRemoval: Window #reportPosition: stamp: 'AS 6/3/2023 13:16:55'!
reportPosition: aPosition
	
	position := aPosition. 
	!
!Log methodsFor: 'accessing' stamp: 'AS 6/3/2023 13:17:11'!
updatePosition: aPosition
	
	lines add: aPosition.! !

!methodRemoval: Log #reportPosition: stamp: 'AS 6/3/2023 13:17:11'!
reportPosition: aPosition
	
	lines add: aPosition.!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/3/2023 13:17:26' prior: 50628107!
notify

	observers do: [ :observer | observer updatePosition: position. ]! !

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/3/2023 13:17:29'!
PASSED!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/3/2023 13:17:29'!
PASSED!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 13:17:32'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/3/2023 13:17:32'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 13:17:34'!
PASSED!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 13:17:34'!
PASSED!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 13:19:37'!
test02RoverRotateRightReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log.
	rover attach: window.
	
	rover process: 'r'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
	
	self assert: 'Apuntando al este' equals: window show.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 13:19:44'!
test03RoverRotateRightReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log.
	rover attach: window.
	
	rover process: 'r'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
	
	self assert: 'Apuntando al este' equals: window show.! !

!methodRemoval: ObserversTest #test02RoverRotateRightReportsToManyObservers stamp: 'AS 6/3/2023 13:19:44'!
test02RoverRotateRightReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log.
	rover attach: window.
	
	rover process: 'r'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
	
	self assert: 'Apuntando al este' equals: window show.!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/3/2023 13:19:51'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'AS 6/3/2023 13:21:25' prior: 50627322!
rotateRight
	
	head rotateRight.
	
	observers do: [ :anObserver | anObserver updateHeading: head].! !
!MarsRoverHeading methodsFor: 'printing' stamp: 'AS 6/3/2023 13:29:12' overrides: 16902983!
printString
	
	self subclassResponsibility. ! !
!MarsRoverHeadingEast methodsFor: 'printing' stamp: 'AS 6/3/2023 13:29:47' overrides: 50628212!
printString
	
	^'Este'! !
!MarsRoverHeadingNorth methodsFor: 'printing' stamp: 'AS 6/3/2023 13:30:07' overrides: 50628212!
printString
	
	^'Norte'! !
!MarsRoverHeadingSouth methodsFor: 'printing' stamp: 'AS 6/3/2023 13:30:21' overrides: 50628212!
printString
	
	^'Sur'! !
!MarsRoverHeadingWest methodsFor: 'printing' stamp: 'AS 6/3/2023 13:30:34' overrides: 50628212!
printString
	
	^'Oeste'! !
!Log methodsFor: 'accessing' stamp: 'AS 6/3/2023 13:31:15'!
updateHeading: aHeadingType
	
	lines add: aHeadingType printString.! !

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'AS 6/3/2023 13:32:09'!
Object subclass: #Window
	instanceVariableNames: 'marsRover position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Window methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:32:05'!
updateHeading: aHeadingType
	
	heading := 'Apuntando al ', aHeadingType printString.! !
!Window methodsFor: 'initialization' stamp: 'AS 6/3/2023 13:33:37' overrides: 16920235!
initialize

	position := 0@0.
	heading := ''.! !
!Window methodsFor: 'initialization' stamp: 'AS 6/3/2023 13:34:01' prior: 50628251 overrides: 16920235!
initialize

	position := ''.
	heading := ''.! !
!Window methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:34:17' prior: 50628112!
updatePosition: aPosition
	
	position := aPosition asString. 
	! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:34:37' prior: 50628014!
test01RoverForwardWindowShowsLastPosition

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.
	
	rover attach: window.
	
	rover process: 'f'.
	
	self assert: 1@2 asString equals: window show
! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:34:47' prior: 50628266!
test01RoverForwardWindowShowsLastPosition

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.
	
	rover attach: window.
	
	rover process: 'f'.
	
	self assert: '1@2' equals: window show
! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:34:57' prior: 50628025!
test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attach: window.
	 	
	rover process: 'ff'.
	
	self assert: '1@3' equals: window show! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 13:35:10' prior: 50627985!
test01RoverMoveForwardReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log.
	rover attach: window.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	
	self assert: '1@2' equals: window show.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 13:35:19' prior: 50628050!
test02RoverMoveBackwardsReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log.
	rover attach: window.
	
	rover process: 'b'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@0 equals: log lines first.
	
	self assert: '1@0' equals: window show.! !

!methodRemoval: MarsRoverHeading #printString stamp: 'AS 6/3/2023 13:37:25'!
printString
	
	self subclassResponsibility. !

!methodRemoval: MarsRoverHeadingEast #printString stamp: 'AS 6/3/2023 13:37:32'!
printString
	
	^'Este'!

!methodRemoval: MarsRoverHeadingNorth #printString stamp: 'AS 6/3/2023 13:37:35'!
printString
	
	^'Norte'!

!methodRemoval: MarsRoverHeadingSouth #printString stamp: 'AS 6/3/2023 13:37:39'!
printString
	
	^'Sur'!

!methodRemoval: MarsRoverHeadingWest #printString stamp: 'AS 6/3/2023 13:37:43'!
printString
	
	^'Oeste'!
!Log methodsFor: 'accessing' stamp: 'AS 6/3/2023 13:39:44' prior: 50628232!
updateHeading: aHeadingType
	
	| direction |
	
	(aHeadingType isKindOf: MarsRoverHeadingEast) ifTrue: [ direction := 'East' ].
	(aHeadingType isKindOf: MarsRoverHeadingNorth) ifTrue: [ direction := 'North' ].
	(aHeadingType isKindOf: MarsRoverHeadingSouth) ifTrue: [ direction := 'South' ].
	(aHeadingType isKindOf: MarsRoverHeadingWest) ifTrue: [ direction := 'West' ].
	
	lines add: direction.! !
!Window methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:40:34' prior: 50628245!
updateHeading: aHeadingType
	
	| direction |
	
	(aHeadingType isKindOf: MarsRoverHeadingEast) ifTrue: [ direction := 'este' ].
	(aHeadingType isKindOf: MarsRoverHeadingNorth) ifTrue: [ direction := 'norte' ].
	(aHeadingType isKindOf: MarsRoverHeadingSouth) ifTrue: [ direction := 'sur' ].
	(aHeadingType isKindOf: MarsRoverHeadingWest) ifTrue: [ direction := 'oeste' ].
		
	heading := 'Apuntando al ', direction.! !

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/3/2023 13:40:45'!
FAILURE!

window show!
!Window methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:42:11'!
position

	^position! !

!methodRemoval: Window #show stamp: 'AS 6/3/2023 13:42:11'!
show

	^position!
!Window methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:42:23'!
heading

	^heading! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 13:42:34' prior: 50628170!
test03RoverRotateRightReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log.
	rover attach: window.
	
	rover process: 'r'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
	
	self assert: 'Apuntando al este' equals: window heading.! !
!Window methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:45:04'!
showHeading

	^heading! !

!methodRemoval: Window #heading stamp: 'AS 6/3/2023 13:45:04'!
heading

	^heading!
!Window methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:45:14'!
showPosition

	^position! !

!methodRemoval: Window #position stamp: 'AS 6/3/2023 13:45:14'!
position

	^position!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 13:45:20'!
ERROR!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/3/2023 13:45:20'!
ERROR!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/3/2023 13:45:20'!
ERROR!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 13:45:32' prior: 50628299!
test01RoverMoveForwardReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log.
	rover attach: window.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	
	self assert: '1@2' equals: window showPosition.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 13:45:38' prior: 50628314!
test02RoverMoveBackwardsReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log.
	rover attach: window.
	
	rover process: 'b'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@0 equals: log lines first.
	
	self assert: '1@0' equals: window showPosition.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 13:45:45' prior: 50628392!
test03RoverRotateRightReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log.
	rover attach: window.
	
	rover process: 'r'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
	
	self assert: 'Apuntando al este' equals: window showHeading.! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:45:51' prior: 50628277!
test01RoverForwardWindowShowsLastPosition

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.
	
	rover attach: window.
	
	rover process: 'f'.
	
	self assert: '1@2' equals: window showPosition
! !
!WindowTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:45:56' prior: 50628288!
test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attach: window.
	 	
	rover process: 'ff'.
	
	self assert: '1@3' equals: window showPosition! !

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 13:45:59'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 13:45:59'!
PASSED!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 13:45:59'!
PASSED!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 13:46:02'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/3/2023 13:46:02'!
PASSED!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/3/2023 13:46:02'!
PASSED!

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/3/2023 13:46:06'!
PASSED!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/3/2023 13:46:06'!
PASSED!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 13:46:48'!
test04RoverRotateLeftReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log.
	rover attach: window.
	
	rover process: 'l'.
	
	self assert: 1 equals: log lines size.
	self assert: 'West' equals: log lines first.
	
	self assert: 'Apuntando al oeste' equals: window showHeading.! !

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/3/2023 13:46:53'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'AS 6/3/2023 13:47:19' prior: 50627318!
rotateLeft
	
	head rotateLeft.
	
	observers do: [ :anObserver | anObserver updateHeading: head].
	
	! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 13:47:24'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/3/2023 13:47:24'!
PASSED!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/3/2023 13:47:24'!
PASSED!

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/3/2023 13:47:24'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'AS 6/3/2023 13:48:10'!
notifyHeading

	^ observers do: [ :anObserver | anObserver updateHeading: head]! !
!MarsRover methodsFor: 'heading' stamp: 'AS 6/3/2023 13:48:10' prior: 50628205!
rotateRight
	
	head rotateRight.
	
	self notifyHeading.! !
!MarsRover methodsFor: 'heading' stamp: 'AS 6/3/2023 13:48:10' prior: 50628546!
rotateLeft
	
	head rotateLeft.
	
	self notifyHeading.
	
	! !
!MarsRover methodsFor: 'heading' stamp: 'AS 6/3/2023 13:48:14' prior: 50628577!
rotateLeft
	
	head rotateLeft.	
	self notifyHeading.
	
	! !
!MarsRover methodsFor: 'heading' stamp: 'AS 6/3/2023 13:48:18' prior: 50628572!
rotateRight
	
	head rotateRight.	
	self notifyHeading.! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/3/2023 13:48:39'!
notifyPosition

	observers do: [ :observer | observer updatePosition: position. ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:48:39' prior: 50628102!
moveBackward
	
	head moveBackward.
	self notifyPosition! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:48:39' prior: 50628097!
moveForward
	
	head moveForward.
	self notifyPosition
! !

!methodRemoval: MarsRover #notify stamp: 'AS 6/3/2023 13:48:39'!
notify

	observers do: [ :observer | observer updatePosition: position. ]!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/3/2023 13:48:58' prior: 50628566!
notifyHeading

	observers do: [ :anObserver | anObserver updateHeading: head]! !

Object subclass: #RoverObserver
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #RoverObserver category: 'MarsRover-WithHeading' stamp: 'AS 6/3/2023 13:57:59'!
Object subclass: #RoverObserver
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!RoverObserver methodsFor: 'no messages' stamp: 'AS 6/3/2023 13:58:26'!
updateHeading: aHeadingType
	
	self subclassResponsibility ! !
!RoverObserver methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:58:49'!
updatePosition: aPosition
	
	self subclassResponsibility ! !
!RoverObserver methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 13:59:30'!
for: aMarsRover
	
	marsRover := aMarsRover.! !

RoverObserver subclass: #Log
	instanceVariableNames: 'marsRover lines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

RoverObserver subclass: #Log
	instanceVariableNames: 'lines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'AS 6/3/2023 14:00:33'!
RoverObserver subclass: #Log
	instanceVariableNames: 'lines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

RoverObserver subclass: #Window
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'AS 6/3/2023 14:00:45'!
RoverObserver subclass: #Window
	instanceVariableNames: 'position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'accessing' stamp: 'AS 6/3/2023 14:01:08' prior: 50627250 overrides: 50628639!
for: aMarsRover
	
	super for: aMarsRover.
	lines := OrderedCollection new.
! !
!Window methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 14:01:21' prior: 50627608 overrides: 50628639!
for: aMarsRover
	
	super for: aMarsRover.! !

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 14:01:36'!
PASSED!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 14:01:36'!
PASSED!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 14:01:39'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/3/2023 14:01:39'!
PASSED!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/3/2023 14:01:39'!
PASSED!

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/3/2023 14:01:39'!
PASSED!

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/3/2023 14:01:43'!
PASSED!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/3/2023 14:01:43'!
PASSED!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:11:48'!
test05ObserverShouldOnlyShowRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attach: log.
		
	rover process: 'lr'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
! !

!testRun: #ObserversTest #test05ObserverShouldOnlyShowRequestedChanges stamp: 'AS 6/3/2023 14:11:53'!
FAILURE!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:12:02' prior: 50628711!
test05ObserverShouldOnlyShowRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attach: log.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
! !

!testRun: #ObserversTest #test05ObserverShouldOnlyShowRequestedChanges stamp: 'AS 6/3/2023 14:12:04'!
FAILURE!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:12:30' prior: 50628726!
test05ObserverShouldOnlyShowRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attachForPositionChanges: log.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'AS 6/3/2023 14:13:01'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers observersForPositionChanges'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/3/2023 14:12:59'!
attachForPositionChanges: anObserver 
	
	observersForPositionChanges add: anObserver! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/3/2023 14:13:40' prior: 50628591!
notifyPosition

	observersForPositionChanges do: [ :observer | observer updatePosition: position. ]! !
!MarsRover methodsFor: 'initialization' stamp: 'AS 6/3/2023 14:13:57' prior: 50627930!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	observers := OrderedCollection new.
	observersForPositionChanges := OrderedCollection new.! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 14:15:00'!
FAILURE!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/3/2023 14:15:00'!
FAILURE!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/3/2023 14:15:00'!
PASSED!

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/3/2023 14:15:00'!
PASSED!

!testRun: #ObserversTest #test05ObserverShouldOnlyShowRequestedChanges stamp: 'AS 6/3/2023 14:15:00'!
PASSED!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 14:15:10'!
FAILURE!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:15:30' prior: 50628430!
test01RoverMoveForwardReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attachForPositionChanges: log.
	rover attachForPositionChanges: window.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	
	self assert: '1@2' equals: window showPosition.! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 14:15:32'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/3/2023 14:15:34'!
FAILURE!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:15:51' prior: 50628445!
test02RoverMoveBackwardsReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attachForPositionChanges: log.
	rover attachForPositionChanges: window.
	
	rover process: 'b'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@0 equals: log lines first.
	
	self assert: '1@0' equals: window showPosition.! !

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/3/2023 14:15:53'!
PASSED!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:16:48'!
test06ObserverShouldOnlyShowHeadingRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attachForPositionChanges: log.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:16:59'!
test05ObserverShouldOnlyShowPositionRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attachForPositionChanges: log.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
! !

!methodRemoval: ObserversTest #test05ObserverShouldOnlyShowRequestedChanges stamp: 'AS 6/3/2023 14:16:59'!
test05ObserverShouldOnlyShowRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attachForPositionChanges: log.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:17:59' prior: 50628847!
test06ObserverShouldOnlyShowHeadingRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attachForPositionChanges: log.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:18:13' prior: 50628884!
test06ObserverShouldOnlyShowHeadingRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attachForHeadingChanges: log.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
! !

!testRun: #ObserversTest #test06ObserverShouldOnlyShowHeadingRequestedChanges stamp: 'AS 6/3/2023 14:18:21'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'AS 6/3/2023 14:18:52'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers observersForPositionChanges observersForHeadingChanges'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/3/2023 14:18:50'!
attachForHeadingChanges: anObserver 
	
	observersForHeadingChanges add: anObserver! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/3/2023 14:19:14' prior: 50628611!
notifyHeading

	observersForHeadingChanges do: [ :anObserver | anObserver updateHeading: head]! !
!MarsRover methodsFor: 'initialization' stamp: 'AS 6/3/2023 14:19:55' prior: 50628774!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	observers := OrderedCollection new.
	observersForPositionChanges := OrderedCollection new.
	observersForHeadingChanges := OrderedCollection new.! !
!MarsRover methodsFor: 'initialization' stamp: 'AS 6/3/2023 14:20:02' prior: 50628935!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.

	observersForPositionChanges := OrderedCollection new.
	observersForHeadingChanges := OrderedCollection new.! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/3/2023 14:20:34' prior: 50627968!
attach: anObserver 
	
	observersForPositionChanges add: anObserver.
	observersForHeadingChanges add: anObserver.! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 14:20:48'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/3/2023 14:20:48'!
PASSED!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/3/2023 14:20:48'!
PASSED!

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/3/2023 14:20:48'!
PASSED!

!testRun: #ObserversTest #test05ObserverShouldOnlyShowPositionRequestedChanges stamp: 'AS 6/3/2023 14:20:48'!
PASSED!

!testRun: #ObserversTest #test06ObserverShouldOnlyShowHeadingRequestedChanges stamp: 'AS 6/3/2023 14:20:48'!
PASSED!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:22:01' prior: 50628460!
test03RoverRotateRightReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attachForHeadingChanges: log.
	rover attachForHeadingChanges: window.
	
	rover process: 'r'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
	
	self assert: 'Apuntando al este' equals: window showHeading.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:22:12' prior: 50628527!
test04RoverRotateLeftReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attachForHeadingChanges: log.
	rover attachForHeadingChanges: window.
	
	rover process: 'l'.
	
	self assert: 1 equals: log lines size.
	self assert: 'West' equals: log lines first.
	
	self assert: 'Apuntando al oeste' equals: window showHeading.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:23:13'!
test07ObserverCanAttachToAllChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attach: log.
		
	rover process: 'fr'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 'East' equals: log lines second.
! !

!testRun: #ObserversTest #test07ObserverCanAttachToAllChanges stamp: 'AS 6/3/2023 14:23:19'!
PASSED!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 14:23:19'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/3/2023 14:23:19'!
PASSED!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/3/2023 14:23:19'!
PASSED!

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/3/2023 14:23:19'!
PASSED!

!testRun: #ObserversTest #test05ObserverShouldOnlyShowPositionRequestedChanges stamp: 'AS 6/3/2023 14:23:19'!
PASSED!

!testRun: #ObserversTest #test06ObserverShouldOnlyShowHeadingRequestedChanges stamp: 'AS 6/3/2023 14:23:19'!
PASSED!

!testRun: #ObserversTest #test07ObserverCanAttachToAllChanges stamp: 'AS 6/3/2023 14:23:19'!
PASSED!
!WindowTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 14:26:20' prior: 50628476!
test01RoverForwardWindowShowsLastPosition

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.
	
	rover attach: window.
	
	rover process: 'f'.
	
	self assert: '1@2' equals: window showPosition.
	self assert: '' equals: window showHeading.
! !

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 14:26:41'!
PASSED!
!WindowTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:27:48'!
test03RoverForwardAndRightRegisterPositionsAndHeading

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attach: window.
	 	
	rover process: 'ff'.
	
	self assert: '1@3' equals: window showPosition! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/3/2023 14:28:35'!
attachForAll: anObserver 
	
	observersForPositionChanges add: anObserver.
	observersForHeadingChanges add: anObserver.! !

!methodRemoval: MarsRover #attach: stamp: 'AS 6/3/2023 14:28:35'!
attach: anObserver 
	
	observersForPositionChanges add: anObserver.
	observersForHeadingChanges add: anObserver.!
!WindowTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:28:48' prior: 50629058!
test01RoverForwardWindowShowsLastPosition

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.
	
	rover attachForAll: window.
	
	rover process: 'f'.
	
	self assert: '1@2' equals: window showPosition.
	self assert: '' equals: window showHeading.
! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:28:54' prior: 50628487!
test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attachForAll: window.
	 	
	rover process: 'ff'.
	
	self assert: '1@3' equals: window showPosition! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:29:00' prior: 50629073!
test03RoverForwardAndRightRegisterPositionsAndHeading

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attachForAll: window.
	 	
	rover process: 'ff'.
	
	self assert: '1@3' equals: window showPosition! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:29:15' prior: 50629017!
test07ObserverCanAttachToAllChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attachForAll: log.
		
	rover process: 'fr'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 'East' equals: log lines second.
! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 14:29:23' prior: 50627973!
test01RoverForwardLogRegisterLastPosition

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	log := Log for: rover.
	
	rover attachForAll: log.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first
! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'AS 6/3/2023 14:29:29' prior: 50628000!
test02RoverForwardTwoStepsLogRegisterTwoLastPosition

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	log := Log for: rover.

	rover attachForAll: log.
	 	
	rover process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 1@3 equals: log lines second
! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:30:06' prior: 50629121!
test03RoverForwardAndRightRegisterPositionsAndHeading

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attachForAll: window.
	 	
	rover process: 'fr'.
	
	self assert: '1@2' equals: window showPosition.
	self assert: 'Apuntando al este' equals: window showHeading.! !

!testRun: #WindowTest #test03RoverForwardAndRightRegisterPositionsAndHeading stamp: 'AS 6/3/2023 14:30:10'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 14:30:10'!
PASSED!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 14:30:10'!
PASSED!

!testRun: #WindowTest #test03RoverForwardAndRightRegisterPositionsAndHeading stamp: 'AS 6/3/2023 14:30:10'!
PASSED!
!WindowTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:30:58'!
test04RoverForwardRightForwardRegisterLastPositionsAndHeading

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attachForAll: window.
	 	
	rover process: 'fr'.
	
	self assert: '1@2' equals: window showPosition.
	self assert: 'Apuntando al este' equals: window showHeading.! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/3/2023 14:31:20' prior: 50629201!
test04RoverForwardRightForwardRegisterLastPositionsAndHeading

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attachForAll: window.
	 	
	rover process: 'frf'.
	
	self assert: '2@2' equals: window showPosition.
	self assert: 'Apuntando al este' equals: window showHeading.! !

!testRun: #WindowTest #test04RoverForwardRightForwardRegisterLastPositionsAndHeading stamp: 'AS 6/3/2023 14:31:24'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 14:31:24'!
PASSED!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 14:31:24'!
PASSED!

!testRun: #WindowTest #test03RoverForwardAndRightRegisterPositionsAndHeading stamp: 'AS 6/3/2023 14:31:24'!
PASSED!

!testRun: #WindowTest #test04RoverForwardRightForwardRegisterLastPositionsAndHeading stamp: 'AS 6/3/2023 14:31:24'!
PASSED!

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/3/2023 15:05:03'!
PASSED!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/3/2023 15:05:03'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'AS 6/3/2023 15:05:07'!
PASSED!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/3/2023 15:05:09'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/3/2023 15:05:09'!
PASSED!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/3/2023 15:05:09'!
PASSED!

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/3/2023 15:05:09'!
PASSED!

!testRun: #ObserversTest #test05ObserverShouldOnlyShowPositionRequestedChanges stamp: 'AS 6/3/2023 15:05:09'!
PASSED!

!testRun: #ObserversTest #test06ObserverShouldOnlyShowHeadingRequestedChanges stamp: 'AS 6/3/2023 15:05:09'!
PASSED!

!testRun: #ObserversTest #test07ObserverCanAttachToAllChanges stamp: 'AS 6/3/2023 15:05:09'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/3/2023 15:05:12'!
PASSED!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/3/2023 15:05:12'!
PASSED!

!testRun: #WindowTest #test03RoverForwardAndRightRegisterPositionsAndHeading stamp: 'AS 6/3/2023 15:05:12'!
PASSED!

!testRun: #WindowTest #test04RoverForwardRightForwardRegisterLastPositionsAndHeading stamp: 'AS 6/3/2023 15:05:12'!
PASSED!

----STARTUP---- (4 June 2023 12:48:53) as F:\CUIS Univeristy Mars Rover Alternativo\CuisUniversity-5832.image!


----End fileIn of F:\CUIS Univeristy Mars Rover Alternativo\MarsRover-WithHeading.st----!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 12:52:18' prior: 50629567!
test01RoverMoveForwardReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log for: #Position.
	rover attach: window for: #Position.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	
	self assert: '1@2' equals: window showPosition.! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 12:52:23'!
ERROR!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 12:52:37'!
attach: log for: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 12:56:14' prior: 50630244!
attach: anObserver for: anAspect 
		
	(self getAspectObservers: anAspect) add: anObserver.
! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 12:56:19'!
ERROR!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 12:56:28'!
getAspectObservers: anAspect 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'AS 6/4/2023 12:59:40'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers observersForPositionChanges observersForHeadingChanges aspectObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:00:04' prior: 50630258!
getAspectObservers: anAspect 
	
	aspectObservers at: anAspect ifAbsent: [ aspectObservers add: anAspect. aspectObservers at: anAspect put: OrderedCollection new ]! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:00:13'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'AS 6/4/2023 13:00:54' prior: 50629754!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.

	observersForPositionChanges := OrderedCollection new.
	observersForHeadingChanges := OrderedCollection new.
	aspectObservers := Dictionary new.! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:01:04'!
ERROR!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:01:04'!
ERROR!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:05:17' prior: 50630273!
getAspectObservers: anAspect 
	
	aspectObservers at: anAspect ifAbsent: [ aspectObservers at: anAspect put: OrderedCollection new ]! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:05:19'!
ERROR!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:06:20' prior: 50630303!
getAspectObservers: anAspect 
	
	^aspectObservers at: anAspect ifAbsent: [ aspectObservers at: anAspect put: OrderedCollection new ].
	! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:06:25'!
FAILURE!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:06:25'!
FAILURE!

log lines!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:07:36'!
getobserversFor: anAspect 
	
	^aspectObservers at: anAspect ifAbsent: [ aspectObservers at: anAspect put: OrderedCollection new ].
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AS 6/4/2023 13:07:36' prior: 50630249!
attach: anObserver for: anAspect 
		
	(self getobserversFor: anAspect) add: anObserver.
! !

!methodRemoval: MarsRover #getAspectObservers: stamp: 'AS 6/4/2023 13:07:36'!
getAspectObservers: anAspect 
	
	^aspectObservers at: anAspect ifAbsent: [ aspectObservers at: anAspect put: OrderedCollection new ].
	!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:08:04'!
getObserversFor: anAspect 
	
	^aspectObservers at: anAspect ifAbsent: [ aspectObservers at: anAspect put: OrderedCollection new ].
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AS 6/4/2023 13:08:04' prior: 50630336!
attach: anObserver for: anAspect 
		
	(self getObserversFor: anAspect) add: anObserver.
! !

!methodRemoval: MarsRover #getobserversFor: stamp: 'AS 6/4/2023 13:08:04'!
getobserversFor: anAspect 
	
	^aspectObservers at: anAspect ifAbsent: [ aspectObservers at: anAspect put: OrderedCollection new ].
	!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:09:38' prior: 50629849!
notifyHeading

	| headingObservers |
	
	headingObservers := self getObserversFor: #Heading.
	headingObservers do: [ :anObserver | anObserver updateHeading: head]! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:10:21' prior: 50629855!
notifyPosition

	| positionObservers |
	
	positionObservers := self getObserversFor: #Position.
	positionObservers do: [ :anObserver | anObserver updateHeading: position]
! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:10:26'!
ERROR!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:10:26'!
ERROR!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:11:03' prior: 50630376!
notifyPosition

	| positionObservers |
	
	positionObservers := self getObserversFor: #Position.
	positionObservers do: [ :anObserver | anObserver updatePosition: position]
! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:11:08'!
PASSED!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 13:11:48' prior: 50629583!
test02RoverMoveBackwardsReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log for: #Position.
	rover attach: window for: #Position.
	
	rover process: 'b'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@0 equals: log lines first.
	
	self assert: '1@0' equals: window showPosition.! !

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/4/2023 13:11:53'!
PASSED!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 13:12:16' prior: 50629599!
test03RoverRotateRightReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log for: #Heading.
	rover attach: window for: #Heading.
	
	rover process: 'r'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
	
	self assert: 'Apuntando al este' equals: window showHeading.! !

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/4/2023 13:12:18'!
PASSED!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:12:18'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/4/2023 13:12:18'!
PASSED!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/4/2023 13:12:18'!
PASSED!

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/4/2023 13:12:18'!
FAILURE!

!testRun: #ObserversTest #test05ObserverShouldOnlyShowPositionRequestedChanges stamp: 'AS 6/4/2023 13:12:18'!
FAILURE!

!testRun: #ObserversTest #test06ObserverShouldOnlyShowHeadingRequestedChanges stamp: 'AS 6/4/2023 13:12:18'!
FAILURE!

!testRun: #ObserversTest #test07ObserverCanAttachToAllChanges stamp: 'AS 6/4/2023 13:12:18'!
FAILURE!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 13:12:47' prior: 50629615!
test04RoverRotateLeftReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log for: #Heading.
	rover attach: window for: #heading.
	
	rover process: 'l'.
	
	self assert: 1 equals: log lines size.
	self assert: 'West' equals: log lines first.
	
	self assert: 'Apuntando al oeste' equals: window showHeading.! !

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/4/2023 13:12:51'!
FAILURE!

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/4/2023 13:12:51'!
FAILURE!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 13:13:24' prior: 50630468!
test04RoverRotateLeftReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log for: #Heading.
	rover attach: window for: #Heading.
	
	rover process: 'l'.
	
	self assert: 1 equals: log lines size.
	self assert: 'West' equals: log lines first.
	
	self assert: 'Apuntando al oeste' equals: window showHeading.! !

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/4/2023 13:13:27'!
PASSED!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 13:13:40' prior: 50629631!
test05ObserverShouldOnlyShowPositionRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attach: log for: #Position.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
! !

!testRun: #ObserversTest #test05ObserverShouldOnlyShowPositionRequestedChanges stamp: 'AS 6/4/2023 13:13:45'!
PASSED!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 13:13:57' prior: 50629643!
test06ObserverShouldOnlyShowHeadingRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attach: log for: #Heading.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
! !

!testRun: #ObserversTest #test06ObserverShouldOnlyShowHeadingRequestedChanges stamp: 'AS 6/4/2023 13:14:02'!
PASSED!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 13:14:26' prior: 50629655!
test07ObserverCanAttachToAllChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attach: log for: { #Position. #Heading. }.
		
	rover process: 'fr'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 'East' equals: log lines second.
! !

!testRun: #ObserversTest #test07ObserverCanAttachToAllChanges stamp: 'AS 6/4/2023 13:14:29'!
FAILURE!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:15:36' prior: 50630356!
attach: anObserver for: anArrayOfAspect 
		
	anArrayOfAspect do: [ :anAspect | 	(self getObserversFor: anAspect) add: anObserver ].
! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:16:23'!
m1: anObserver m2: anAspect

	^ (self getObserversFor: anAspect) add: anObserver! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:16:23' prior: 50630561!
attach: anObserver for: anArrayOfAspect 
		
	anArrayOfAspect do: [ :anAspect | 	self m1: anObserver m2: anAspect ].
! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:17:22'!
add: anObserver to: anAspect

	^ (self getObserversFor: anAspect) add: anObserver! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AS 6/4/2023 13:17:22' prior: 50630574!
attach: anObserver for: anArrayOfAspect 
		
	anArrayOfAspect do: [ :anAspect | 	self add: anObserver to: anAspect ].
! !

!methodRemoval: MarsRover #m1:m2: stamp: 'AS 6/4/2023 13:17:22'!
m1: anObserver m2: anAspect

	^ (self getObserversFor: anAspect) add: anObserver!

!testRun: #ObserversTest #test07ObserverCanAttachToAllChanges stamp: 'AS 6/4/2023 13:17:48'!
PASSED!
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 13:18:19' prior: 50629679!
test01RoverForwardWindowShowsLastPosition

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.
	
	rover attach: window for: { #Position. #Heading. }.
	
	rover process: 'f'.
	
	self assert: '1@2' equals: window showPosition.
	self assert: '' equals: window showHeading.
! !

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/4/2023 13:18:21'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/4/2023 13:18:21'!
PASSED!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/4/2023 13:18:21'!
FAILURE!

!testRun: #WindowTest #test03RoverForwardAndRightRegisterPositionsAndHeading stamp: 'AS 6/4/2023 13:18:21'!
FAILURE!

!testRun: #WindowTest #test04RoverForwardRightForwardRegisterLastPositionsAndHeading stamp: 'AS 6/4/2023 13:18:21'!
FAILURE!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/4/2023 13:18:24'!
FAILURE!
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 13:18:48' prior: 50629691!
test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attach: window for: {#Position. #Heading }.
	 	
	rover process: 'ff'.
	
	self assert: '1@3' equals: window showPosition! !

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/4/2023 13:18:50'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/4/2023 13:18:50'!
PASSED!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/4/2023 13:18:50'!
PASSED!

!testRun: #WindowTest #test03RoverForwardAndRightRegisterPositionsAndHeading stamp: 'AS 6/4/2023 13:18:50'!
FAILURE!

!testRun: #WindowTest #test04RoverForwardRightForwardRegisterLastPositionsAndHeading stamp: 'AS 6/4/2023 13:18:50'!
FAILURE!

!testRun: #WindowTest #test03RoverForwardAndRightRegisterPositionsAndHeading stamp: 'AS 6/4/2023 13:18:53'!
FAILURE!
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 13:19:13' prior: 50629702!
test03RoverForwardAndRightRegisterPositionsAndHeading

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attach: window for: { #Position. #Heading }.
	 	
	rover process: 'fr'.
	
	self assert: '1@2' equals: window showPosition.
	self assert: 'Apuntando al este' equals: window showHeading.! !

!testRun: #WindowTest #test03RoverForwardAndRightRegisterPositionsAndHeading stamp: 'AS 6/4/2023 13:19:14'!
PASSED!

!testRun: #WindowTest #test04RoverForwardRightForwardRegisterLastPositionsAndHeading stamp: 'AS 6/4/2023 13:19:16'!
FAILURE!
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 13:19:26' prior: 50629715!
test04RoverForwardRightForwardRegisterLastPositionsAndHeading

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attach: window for: { #Position. #Heading }.
	 	
	rover process: 'frf'.
	
	self assert: '2@2' equals: window showPosition.
	self assert: 'Apuntando al este' equals: window showHeading.! !

!testRun: #WindowTest #test04RoverForwardRightForwardRegisterLastPositionsAndHeading stamp: 'AS 6/4/2023 13:19:29'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/4/2023 13:19:42'!
PASSED!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/4/2023 13:19:42'!
PASSED!

!testRun: #WindowTest #test03RoverForwardAndRightRegisterPositionsAndHeading stamp: 'AS 6/4/2023 13:19:42'!
PASSED!

!testRun: #WindowTest #test04RoverForwardRightForwardRegisterLastPositionsAndHeading stamp: 'AS 6/4/2023 13:19:42'!
PASSED!
!LogTest methodsFor: 'as yet unclassified' stamp: 'AS 6/4/2023 13:20:14' prior: 50629362!
test01RoverForwardLogRegisterLastPosition

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	log := Log for: rover.
	
	rover attach: log for: { #Position. #Heading }.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first
! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'AS 6/4/2023 13:20:24' prior: 50629374!
test02RoverForwardTwoStepsLogRegisterTwoLastPosition

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	log := Log for: rover.

	rover attach: log for: { #Position. #Heading }.
	 	
	rover process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 1@3 equals: log lines second
! !

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/4/2023 13:20:25'!
PASSED!

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/4/2023 13:20:25'!
PASSED!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/4/2023 13:20:25'!
PASSED!
!MarsRover methodsFor: 'moving' stamp: 'AS 6/4/2023 13:21:23' prior: 50629817!
moveForward
	
	head moveForward.
	self notify: #Position
! !
!MarsRover methodsFor: 'moving' stamp: 'AS 6/4/2023 13:21:38' prior: 50629809!
moveBackward
	
	head moveBackward.
	self notify: #Position! !
!MarsRover methodsFor: 'heading' stamp: 'AS 6/4/2023 13:22:01' prior: 50629779!
rotateLeft
	
	head rotateLeft.	
	self notify: #Heading.
	
	! !
!MarsRover methodsFor: 'heading' stamp: 'AS 6/4/2023 13:22:08' prior: 50629783!
rotateRight
	
	head rotateRight.	
	self notify: #Heading.! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:24:50'!
notify: anAspect withValue: aValue

	| observersToUpdate |
	
	observersToUpdate := self getObserversFor: anAspect.
	observersToUpdate do: [ :anObserver | anObserver update: anAspect withValue: aValue]! !
!MarsRover methodsFor: 'moving' stamp: 'AS 6/4/2023 13:25:27' prior: 50630766!
moveForward
	
	head moveForward.
	self notify: #Position withValue: position
! !
!MarsRover methodsFor: 'moving' stamp: 'AS 6/4/2023 13:25:37' prior: 50630771!
moveBackward
	
	head moveBackward.
	self notify: #Position withValue: position! !
!MarsRover methodsFor: 'heading' stamp: 'AS 6/4/2023 13:26:14' prior: 50630776!
rotateLeft
	
	head rotateLeft.	
	self notify: #Position withValue: head
	
	! !
!MarsRover methodsFor: 'heading' stamp: 'AS 6/4/2023 13:26:20' prior: 50630781!
rotateRight
	
	head rotateRight.	
	self notify: #Position withValue: head! !
!RoverObserver methodsFor: 'as yet unclassified' stamp: 'AS 6/4/2023 13:27:06'!
update: anAspect withValue: aValue
	
	self subclassResponsibility ! !
!Log methodsFor: 'accessing' stamp: 'AS 6/4/2023 13:28:34' overrides: 50630815!
update: anAspect withValue: aValue
	
	(anAspect = #Heading) ifTrue: [ self updateHeading: aValue ].
	(anAspect = #Position) ifTrue: [ self updatePosition: aValue ].
! !
!Log methodsFor: 'accessing' stamp: 'AS 6/4/2023 13:28:53' prior: 50630820 overrides: 50630815!
update: anAspect withValue: aValue
	
	(anAspect = #Heading) ifTrue: [ self updateHeading: aValue ].
	(anAspect = #Position) ifTrue: [ self updatePosition: aValue ].
	

! !
!RoverObserver methodsFor: 'assertions' stamp: 'AS 6/4/2023 13:30:25'!
signalInvalidAspect
	
	self error: self invalidAspectErrorDescription ! !
!RoverObserver methodsFor: 'assertions' stamp: 'AS 6/4/2023 13:30:55'!
invalidAspectErrorDescription
	
	^'Invalid aspect'! !
!Log methodsFor: 'accessing' stamp: 'AS 6/4/2023 13:31:12' prior: 50630829 overrides: 50630815!
update: anAspect withValue: aValue
	
	(anAspect = #Heading) ifTrue: [ self updateHeading: aValue ].
	(anAspect = #Position) ifTrue: [ self updatePosition: aValue ].
	
	self signalInvalidAspect.
	

! !
!RoverObserver methodsFor: 'accessing' stamp: 'AS 6/4/2023 13:31:42' prior: 50630815!
update: anAspect withValue: aValue
	
	(anAspect = #Heading) ifTrue: [ self updateHeading: aValue ].
	(anAspect = #Position) ifTrue: [ self updatePosition: aValue ].
	
	self signalInvalidAspect.
	

! !

!methodRemoval: Log #update:withValue: stamp: 'AS 6/4/2023 13:31:42'!
update: anAspect withValue: aValue
	
	(anAspect = #Heading) ifTrue: [ self updateHeading: aValue ].
	(anAspect = #Position) ifTrue: [ self updatePosition: aValue ].
	
	self signalInvalidAspect.
	

!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:32:06'!
FAILURE!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/4/2023 13:32:06'!
FAILURE!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/4/2023 13:32:06'!
FAILURE!

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/4/2023 13:32:06'!
FAILURE!

!testRun: #ObserversTest #test05ObserverShouldOnlyShowPositionRequestedChanges stamp: 'AS 6/4/2023 13:32:06'!
FAILURE!

!testRun: #ObserversTest #test06ObserverShouldOnlyShowHeadingRequestedChanges stamp: 'AS 6/4/2023 13:32:06'!
FAILURE!

!testRun: #ObserversTest #test07ObserverCanAttachToAllChanges stamp: 'AS 6/4/2023 13:32:06'!
ERROR!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:32:19'!
FAILURE!

log lines!

observersToUpdate size!

d := Dictionary new.!

d at: #Norte ifAbsent: [ d at: #Norte put: OrderedCollection new].!

(d at: #Norte) add: 'Uno'.!

(d at: #Norte) size.!

(d at: #Norte) at: 1.!

d size.!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:42:41'!
createObserversCollectionFor: anAspect

	^ aspectObservers at: anAspect put: OrderedCollection new! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:42:41' prior: 50630348!
getObserversFor: anAspect 
	
	^aspectObservers at: anAspect ifAbsent: [ self createObserversCollectionFor: anAspect ].
	! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:43:56' prior: 50630908!
createObserversCollectionFor: anAspect

	| observerCollection |	
	
	observerCollection := OrderedCollection new.
	aspectObservers 
		at: anAspect 
		put: observerCollection.
	^observerCollection.! !

d at: #Sur ifAbsent: [ d at: #Sur put: OrderedCollection new].!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:45:15' prior: 50630785!
notify: anAspect withValue: aValue

	| observersToUpdate |
	Halt.
	observersToUpdate := self getObserversFor: anAspect.
	observersToUpdate do: [ :anObserver | anObserver update: anAspect withValue: aValue]! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:45:35'!
FAILURE!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:47:57' prior: 50630932!
notify: anAspect withValue: aValue

	| observersToUpdate |
	self halt.
	observersToUpdate := self getObserversFor: anAspect.
	observersToUpdate do: [ :anObserver | anObserver update: anAspect withValue: aValue]! !

observersToUpdate size!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 13:52:17' prior: 50630225!
test01RoverMoveForwardReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log for: { #Position }.
	rover attach: window for: { #Position }.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	
	self assert: '1@2' equals: window showPosition.! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:52:35' prior: 50630945!
notify: anAspect withValue: aValue

	| observersToUpdate |

	observersToUpdate := self getObserversFor: anAspect.
	observersToUpdate do: [ :anObserver | anObserver update: anAspect withValue: aValue]! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 13:53:27' prior: 50630921!
createObserversCollectionFor: anAspect

	^aspectObservers 
		at: anAspect 
		put: OrderedCollection new.
! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:53:32'!
ERROR!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:53:32'!
ERROR!

anAspect = #Position!
!RoverObserver methodsFor: 'accessing' stamp: 'AS 6/4/2023 13:57:20' prior: 50630856!
update: anAspect withValue: aValue
	
	(anAspect = #Heading)
		ifTrue: [ self updateHeading: aValue ]
		ifFalse: [	(anAspect = #Position)
			ifTrue: [ self updatePosition: aValue ]
			ifFalse: 	self signalInvalidAspect. ]
	

! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:57:53'!
ERROR!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:57:53'!
ERROR!
!RoverObserver methodsFor: 'update' stamp: 'AS 6/4/2023 13:58:36' prior: 50630995!
update: anAspect withValue: aValue
	
	(anAspect = #Heading)
		ifTrue: [ self updateHeading: aValue ]
		ifFalse: [	(anAspect = #Position)
			ifTrue: [ self updatePosition: aValue ]
			ifFalse: 	self signalInvalidAspect. ]
	

! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:58:48'!
ERROR!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:58:48'!
ERROR!

anAspect = #Position!
!RoverObserver methodsFor: 'update' stamp: 'AS 6/4/2023 13:59:49' prior: 50631012!
update: anAspect withValue: aValue
	
	(anAspect = #Heading)
		ifTrue: [ self updateHeading: aValue ]
		ifFalse: [	(anAspect = #Position)
			ifTrue: [ self updatePosition: aValue ]
			ifFalse: 	[ self signalInvalidAspect. ] ]
	

! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 13:59:54'!
PASSED!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:00:15' prior: 50630403!
test02RoverMoveBackwardsReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log for: { #Position }.
	rover attach: window for: { #Position }.
	
	rover process: 'b'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@0 equals: log lines first.
	
	self assert: '1@0' equals: window showPosition.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:00:27' prior: 50630423!
test03RoverRotateRightReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log for: { #Heading }.
	rover attach: window for: { #Heading }.
	
	rover process: 'r'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
	
	self assert: 'Apuntando al este' equals: window showHeading.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:00:38' prior: 50630492!
test04RoverRotateLeftReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log for: { #Heading }.
	rover attach: window for: { #Heading }.
	
	rover process: 'l'.
	
	self assert: 1 equals: log lines size.
	self assert: 'West' equals: log lines first.
	
	self assert: 'Apuntando al oeste' equals: window showHeading.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:00:45' prior: 50630512!
test05ObserverShouldOnlyShowPositionRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attach: log for: { #Position }.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:00:53' prior: 50630528!
test06ObserverShouldOnlyShowHeadingRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attach: log for: { #Heading }.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 14:00:59'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/4/2023 14:00:59'!
PASSED!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/4/2023 14:00:59'!
FAILURE!

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/4/2023 14:00:59'!
FAILURE!

!testRun: #ObserversTest #test05ObserverShouldOnlyShowPositionRequestedChanges stamp: 'AS 6/4/2023 14:00:59'!
FAILURE!

!testRun: #ObserversTest #test06ObserverShouldOnlyShowHeadingRequestedChanges stamp: 'AS 6/4/2023 14:00:59'!
FAILURE!

!testRun: #ObserversTest #test07ObserverCanAttachToAllChanges stamp: 'AS 6/4/2023 14:00:59'!
FAILURE!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/4/2023 14:01:02'!
FAILURE!

log lines!

log lines size!
!MarsRover methodsFor: 'heading' stamp: 'AS 6/4/2023 14:02:39' prior: 50630810!
rotateRight
	
	head rotateRight.	
	self notify: #Heading withValue: head! !

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/4/2023 14:02:41'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'AS 6/4/2023 14:02:58' prior: 50630805!
rotateLeft
	
	head rotateLeft.	
	self notify: #Heading withValue: head
	
	! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 14:03:02'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/4/2023 14:03:02'!
PASSED!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/4/2023 14:03:02'!
PASSED!

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/4/2023 14:03:02'!
PASSED!

!testRun: #ObserversTest #test05ObserverShouldOnlyShowPositionRequestedChanges stamp: 'AS 6/4/2023 14:03:02'!
PASSED!

!testRun: #ObserversTest #test06ObserverShouldOnlyShowHeadingRequestedChanges stamp: 'AS 6/4/2023 14:03:02'!
PASSED!

!testRun: #ObserversTest #test07ObserverCanAttachToAllChanges stamp: 'AS 6/4/2023 14:03:02'!
PASSED!
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:03:14' prior: 50630637!
test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attach: window for: { #Position. #Heading }.
	 	
	rover process: 'ff'.
	
	self assert: '1@3' equals: window showPosition! !

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/4/2023 14:03:22'!
PASSED!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/4/2023 14:03:22'!
PASSED!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/4/2023 14:03:26'!
PASSED!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/4/2023 14:03:26'!
PASSED!

!testRun: #WindowTest #test03RoverForwardAndRightRegisterPositionsAndHeading stamp: 'AS 6/4/2023 14:03:26'!
PASSED!

!testRun: #WindowTest #test04RoverForwardRightForwardRegisterLastPositionsAndHeading stamp: 'AS 6/4/2023 14:03:26'!
PASSED!

Object subclass: #Aspect
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Aspect category: 'MarsRover-WithHeading' stamp: 'AS 6/4/2023 14:04:10'!
Object subclass: #Aspect
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Aspect subclass: #Position
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Position category: 'MarsRover-WithHeading' stamp: 'AS 6/4/2023 14:04:25'!
Aspect subclass: #Position
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Aspect subclass: #Heading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Heading category: 'MarsRover-WithHeading' stamp: 'AS 6/4/2023 14:04:32'!
Aspect subclass: #Heading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!methodRemoval: MarsRover #attachForAll: stamp: 'AS 6/4/2023 14:05:17'!
attachForAll: anObserver 
	
	observersForPositionChanges add: anObserver.
	observersForHeadingChanges add: anObserver.!

!methodRemoval: MarsRover #attachForHeadingChanges: stamp: 'AS 6/4/2023 14:05:24'!
attachForHeadingChanges: anObserver 
	
	observersForHeadingChanges add: anObserver!

!methodRemoval: MarsRover #attachForPositionChanges: stamp: 'AS 6/4/2023 14:05:31'!
attachForPositionChanges: anObserver 
	
	observersForPositionChanges add: anObserver!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 14:05:45' prior: 50630981!
createObserversCollectionFor: anAspect

	^aspectObservers 
		at: anAspect class name
		put: OrderedCollection new.
! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 14:06:02' prior: 50630914!
getObserversFor: anAspect 
	
	^aspectObservers 
		at: anAspect class name
		ifAbsent: [ self createObserversCollectionFor: anAspect ].
	! !

!methodRemoval: MarsRover #notifyHeading stamp: 'AS 6/4/2023 14:06:11'!
notifyHeading

	| headingObservers |
	
	headingObservers := self getObserversFor: #Heading.
	headingObservers do: [ :anObserver | anObserver updateHeading: head]!

!methodRemoval: MarsRover #notifyPosition stamp: 'AS 6/4/2023 14:06:13'!
notifyPosition

	| positionObservers |
	
	positionObservers := self getObserversFor: #Position.
	positionObservers do: [ :anObserver | anObserver updatePosition: position]
!

Object subclass: #MarsRover
	instanceVariableNames: 'position head aspectObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'AS 6/4/2023 14:06:49'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head aspectObservers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!RoverObserver methodsFor: 'update' stamp: 'AS 6/4/2023 14:08:28' prior: 50631030!
update: anAspect withValue: aValue
	
	anAspect update: self withValue: aValue.
	"
	(anAspect = #Heading)
		ifTrue: [ self updateHeading: aValue ]
		ifFalse: [	(anAspect = #Position)
			ifTrue: [ self updatePosition: aValue ]
			ifFalse: 	[ self signalInvalidAspect. ] ]
"	

! !
!Aspect methodsFor: 'update' stamp: 'AS 6/4/2023 14:09:12'!
update: anObserver withValue: aValue

	self subclassResponsibility .! !
!Heading methodsFor: 'update' stamp: 'AS 6/4/2023 14:10:03' overrides: 50631328!
update: anObserver withValue: aValue

	anObserver updateHeading: aValue! !
!Position methodsFor: 'update' stamp: 'AS 6/4/2023 14:10:20' overrides: 50631328!
update: anObserver withValue: aValue

	anObserver updatePosition: aValue! !
!ObserversTest methodsFor: 'aspects' stamp: 'AS 6/4/2023 14:11:22'!
position

	^{ Position new }! !
!ObserversTest methodsFor: 'aspects' stamp: 'AS 6/4/2023 14:11:38'!
heading

	^{ Heading new }! !
!ObserversTest methodsFor: 'aspects' stamp: 'AS 6/4/2023 14:11:57'!
positionAndHeading

	^{ Position new. Heading new. }! !
!MarsRover methodsFor: 'moving' stamp: 'AS 6/4/2023 14:12:22' prior: 50630794!
moveForward
	
	head moveForward.
	self notify: (Position new) withValue: position
! !
!MarsRover methodsFor: 'moving' stamp: 'AS 6/4/2023 14:12:32' prior: 50630799!
moveBackward
	
	head moveBackward.
	self notify: (Position new) withValue: position! !
!MarsRover methodsFor: 'heading' stamp: 'AS 6/4/2023 14:12:46' prior: 50631159!
rotateLeft
	
	head rotateLeft.	
	self notify: (Heading new) withValue: head
	
	! !
!MarsRover methodsFor: 'heading' stamp: 'AS 6/4/2023 14:12:56' prior: 50631150!
rotateRight
	
	head rotateRight.	
	self notify: (Heading new) withValue: head! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:13:32' prior: 50630955!
test01RoverMoveForwardReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log for: self position.
	rover attach: window for: self position.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	
	self assert: '1@2' equals: window showPosition.! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 14:13:34'!
PASSED!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:14:03' prior: 50631044!
test02RoverMoveBackwardsReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log for: self position.
	rover attach: window for: self position.
	
	rover process: 'b'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@0 equals: log lines first.
	
	self assert: '1@0' equals: window showPosition.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:14:16' prior: 50631061!
test03RoverRotateRightReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log for: self heading.
	rover attach: window for: self heading.
	
	rover process: 'r'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
	
	self assert: 'Apuntando al este' equals: window showHeading.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:14:28' prior: 50631078!
test04RoverRotateLeftReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	window := Window for: rover.
	
	rover attach: log for: self heading.
	rover attach: window for: self heading.
	
	rover process: 'l'.
	
	self assert: 1 equals: log lines size.
	self assert: 'West' equals: log lines first.
	
	self assert: 'Apuntando al oeste' equals: window showHeading.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:14:39' prior: 50631095!
test05ObserverShouldOnlyShowPositionRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attach: log for: self position.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:14:45' prior: 50631108!
test06ObserverShouldOnlyShowHeadingRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attach: log for: self heading.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:15:01' prior: 50630544!
test07ObserverCanAttachToAllChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log for: rover.
	rover attach: log for: self positionAndHeading.
		
	rover process: 'fr'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 'East' equals: log lines second.
! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 14:15:05'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/4/2023 14:15:05'!
PASSED!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/4/2023 14:15:05'!
PASSED!

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/4/2023 14:15:05'!
PASSED!

!testRun: #ObserversTest #test05ObserverShouldOnlyShowPositionRequestedChanges stamp: 'AS 6/4/2023 14:15:05'!
PASSED!

!testRun: #ObserversTest #test06ObserverShouldOnlyShowHeadingRequestedChanges stamp: 'AS 6/4/2023 14:15:05'!
PASSED!

!testRun: #ObserversTest #test07ObserverCanAttachToAllChanges stamp: 'AS 6/4/2023 14:15:05'!
PASSED!
!WindowTest methodsFor: 'aspects' stamp: 'AS 6/4/2023 14:15:34'!
heading

	^{ Heading new }! !
!WindowTest methodsFor: 'aspects' stamp: 'AS 6/4/2023 14:15:45'!
position

	^{ Position new }! !
!WindowTest methodsFor: 'aspects' stamp: 'AS 6/4/2023 14:15:59'!
positionAndHeading

	^{ Position new. Heading new.}! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:16:22' prior: 50630601!
test01RoverForwardWindowShowsLastPosition

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.
	
	rover attach: window for: self positionAndHeading.
	
	rover process: 'f'.
	
	self assert: '1@2' equals: window showPosition.
	self assert: '' equals: window showHeading.
! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:16:39' prior: 50631189!
test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attach: window for: self positionAndHeading.
	 	
	rover process: 'ff'.
	
	self assert: '1@3' equals: window showPosition! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:16:49' prior: 50630672!
test03RoverForwardAndRightRegisterPositionsAndHeading

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attach: window for: self positionAndHeading.
	 	
	rover process: 'fr'.
	
	self assert: '1@2' equals: window showPosition.
	self assert: 'Apuntando al este' equals: window showHeading.! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:16:59' prior: 50630694!
test04RoverForwardRightForwardRegisterLastPositionsAndHeading

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window for: rover.

	rover attach: window for: self positionAndHeading.
	 	
	rover process: 'frf'.
	
	self assert: '2@2' equals: window showPosition.
	self assert: 'Apuntando al este' equals: window showHeading.! !

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/4/2023 14:17:03'!
PASSED!

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/4/2023 14:17:03'!
PASSED!

!testRun: #WindowTest #test03RoverForwardAndRightRegisterPositionsAndHeading stamp: 'AS 6/4/2023 14:17:03'!
PASSED!

!testRun: #WindowTest #test04RoverForwardRightForwardRegisterLastPositionsAndHeading stamp: 'AS 6/4/2023 14:17:03'!
PASSED!
!LogTest methodsFor: 'aspects' stamp: 'AS 6/4/2023 14:18:01'!
positionAndHeading
	
	^{ Position new. Heading new. }! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:18:15' prior: 50630728!
test01RoverForwardLogRegisterLastPosition

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	log := Log for: rover.
	
	rover attach: log for: self positionAndHeading.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first
! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:18:25' prior: 50630741!
test02RoverForwardTwoStepsLogRegisterTwoLastPosition

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	log := Log for: rover.

	rover attach: log for: self positionAndHeading.
	 	
	rover process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 1@3 equals: log lines second
! !

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/4/2023 14:18:31'!
PASSED!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/4/2023 14:18:31'!
PASSED!
!Log methodsFor: 'accessing' stamp: 'AS 6/4/2023 14:19:10' overrides: 16920235!
initialize
	
	lines := OrderedCollection new.
! !

!methodRemoval: Window #for: stamp: 'AS 6/4/2023 14:19:25'!
for: aMarsRover
	
	super for: aMarsRover.!

!methodRemoval: Log #for: stamp: 'AS 6/4/2023 14:19:47'!
for: aMarsRover
	
	super for: aMarsRover.
	lines := OrderedCollection new.
!

!methodRemoval: RoverObserver #for: stamp: 'AS 6/4/2023 14:21:15'!
for: aMarsRover
	
	marsRover := aMarsRover.!

Object subclass: #RoverObserver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #RoverObserver category: 'MarsRover-WithHeading' stamp: 'AS 6/4/2023 14:21:20'!
Object subclass: #RoverObserver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:21:34' prior: 50631380!
test01RoverMoveForwardReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	window := Window new.
	
	rover attach: log for: self position.
	rover attach: window for: self position.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	
	self assert: '1@2' equals: window showPosition.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:21:43' prior: 50631400!
test02RoverMoveBackwardsReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	window := Window new.
	
	rover attach: log for: self position.
	rover attach: window for: self position.
	
	rover process: 'b'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@0 equals: log lines first.
	
	self assert: '1@0' equals: window showPosition.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:21:55' prior: 50631417!
test03RoverRotateRightReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	window := Window new.
	
	rover attach: log for: self heading.
	rover attach: window for: self heading.
	
	rover process: 'r'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
	
	self assert: 'Apuntando al este' equals: window showHeading.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:22:05' prior: 50631434!
test04RoverRotateLeftReportsToManyObservers

	| rover log window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	window := Window new.
	
	rover attach: log for: self heading.
	rover attach: window for: self heading.
	
	rover process: 'l'.
	
	self assert: 1 equals: log lines size.
	self assert: 'West' equals: log lines first.
	
	self assert: 'Apuntando al oeste' equals: window showHeading.! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:22:14' prior: 50631451!
test05ObserverShouldOnlyShowPositionRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	rover attach: log for: self position.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first.
! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:22:20' prior: 50631464!
test06ObserverShouldOnlyShowHeadingRequestedChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	rover attach: log for: self heading.
		
	rover process: 'fr'.
	
	self assert: 1 equals: log lines size.
	self assert: 'East' equals: log lines first.
! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:22:25' prior: 50631477!
test07ObserverCanAttachToAllChanges

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	rover attach: log for: self positionAndHeading.
		
	rover process: 'fr'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 'East' equals: log lines second.
! !

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 14:22:30'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/4/2023 14:22:30'!
PASSED!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/4/2023 14:22:30'!
PASSED!

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/4/2023 14:22:30'!
PASSED!

!testRun: #ObserversTest #test05ObserverShouldOnlyShowPositionRequestedChanges stamp: 'AS 6/4/2023 14:22:30'!
PASSED!

!testRun: #ObserversTest #test06ObserverShouldOnlyShowHeadingRequestedChanges stamp: 'AS 6/4/2023 14:22:30'!
PASSED!

!testRun: #ObserversTest #test07ObserverCanAttachToAllChanges stamp: 'AS 6/4/2023 14:22:30'!
PASSED!
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:22:40' prior: 50631527!
test01RoverForwardWindowShowsLastPosition

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window new.
	
	rover attach: window for: self positionAndHeading.
	
	rover process: 'f'.
	
	self assert: '1@2' equals: window showPosition.
	self assert: '' equals: window showHeading.
! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:22:45' prior: 50631540!
test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window new.

	rover attach: window for: self positionAndHeading.
	 	
	rover process: 'ff'.
	
	self assert: '1@3' equals: window showPosition! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:22:50' prior: 50631553!
test03RoverForwardAndRightRegisterPositionsAndHeading

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window new.

	rover attach: window for: self positionAndHeading.
	 	
	rover process: 'fr'.
	
	self assert: '1@2' equals: window showPosition.
	self assert: 'Apuntando al este' equals: window showHeading.! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:22:56' prior: 50631567!
test04RoverForwardRightForwardRegisterLastPositionsAndHeading

	| rover window |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	window := Window new.

	rover attach: window for: self positionAndHeading.
	 	
	rover process: 'frf'.
	
	self assert: '2@2' equals: window showPosition.
	self assert: 'Apuntando al este' equals: window showHeading.! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:23:06' prior: 50631601!
test01RoverForwardLogRegisterLastPosition

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	log := Log new.
	
	rover attach: log for: self positionAndHeading.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first
! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:23:12' prior: 50631613!
test02RoverForwardTwoStepsLogRegisterTwoLastPosition

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	log := Log new.

	rover attach: log for: self positionAndHeading.
	 	
	rover process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 1@3 equals: log lines second
! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:27:33'!
test08ObserverShouldNotBeUpdatedIfDetachedForAnAspect

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	rover attach: log for: self positionAndHeading.
		
	rover process: 'fr'.
	
	rover detach: log for: self position.
	
	rover process: 'fr'.
	
	self assert: 3 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 'East' equals: log lines second.
	self assert: 'South' equals: log lines third.
! !

!testRun: #ObserversTest #test08ObserverShouldNotBeUpdatedIfDetachedForAnAspect stamp: 'AS 6/4/2023 14:27:36'!
ERROR!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 14:27:45'!
detach: log for: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 14:27:55' prior: 50631889!
detach: log for: anAspect
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 14:29:01' prior: 50631894!
detach: anObserver for: anArrayOfAspect
	
	anArrayOfAspect do: [ :anAspect | 	self remove: anObserver to: anAspect ].! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 14:29:20'!
remove: anObserver to: anAspect

	^ (self getObserversFor: anAspect) remove: anObserver! !

!testRun: #ObserversTest #test08ObserverShouldNotBeUpdatedIfDetachedForAnAspect stamp: 'AS 6/4/2023 14:29:41'!
PASSED!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:30:39'!
test09ObserverCanDetachForAllAspect

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	rover attach: log for: self positionAndHeading.
		
	rover process: 'fr'.
	
	rover detach: log.
	
	rover process: 'fr'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 'East' equals: log lines second.

! !

!testRun: #ObserversTest #test09ObserverCanDetachForAllAspect stamp: 'AS 6/4/2023 14:30:48'!
ERROR!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 14:31:01'!
detach: log 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 14:31:12' prior: 50631932!
detach: anObserver 
	! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 14:33:13' prior: 50631936!
detach: anObserver 
	
	(aspectObservers values) do: [ :collection | collection remove: anObserver ].! !

!testRun: #ObserversTest #test09ObserverCanDetachForAllAspect stamp: 'AS 6/4/2023 14:33:29'!
PASSED!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:33:37' prior: 50631914!
test09ObserverCanDetachForAllAspect

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	rover attach: log for: self position.
		
	rover process: 'fr'.
	
	rover detach: log.
	
	rover process: 'fr'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 'East' equals: log lines second.

! !

!testRun: #ObserversTest #test09ObserverCanDetachForAllAspect stamp: 'AS 6/4/2023 14:33:42'!
ERROR!
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 14:34:33' prior: 50631940!
detach: anObserver 
	
	(aspectObservers values) do: [ :collection | collection remove: anObserver ifAbsent: [] ].! !

!testRun: #ObserversTest #test09ObserverCanDetachForAllAspect stamp: 'AS 6/4/2023 14:34:46'!
FAILURE!

!testRun: #ObserversTest #test09ObserverCanDetachForAllAspect stamp: 'AS 6/4/2023 14:34:46'!
FAILURE!

log lines size!
!ObserversTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:35:28' prior: 50631949!
test09ObserverCanDetachForAllAspect

	| rover log |
	
	rover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	rover attach: log for: self positionAndHeading.
		
	rover process: 'fr'.
	
	rover detach: log.
	
	rover process: 'fr'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 'East' equals: log lines second.

! !

!testRun: #ObserversTest #test09ObserverCanDetachForAllAspect stamp: 'AS 6/4/2023 14:35:29'!
PASSED!

!testRun: #ObserversTest #test01RoverMoveForwardReportsToManyObservers stamp: 'AS 6/4/2023 14:35:29'!
PASSED!

!testRun: #ObserversTest #test02RoverMoveBackwardsReportsToManyObservers stamp: 'AS 6/4/2023 14:35:29'!
PASSED!

!testRun: #ObserversTest #test03RoverRotateRightReportsToManyObservers stamp: 'AS 6/4/2023 14:35:29'!
PASSED!

!testRun: #ObserversTest #test04RoverRotateLeftReportsToManyObservers stamp: 'AS 6/4/2023 14:35:29'!
PASSED!

!testRun: #ObserversTest #test05ObserverShouldOnlyShowPositionRequestedChanges stamp: 'AS 6/4/2023 14:35:29'!
PASSED!

!testRun: #ObserversTest #test06ObserverShouldOnlyShowHeadingRequestedChanges stamp: 'AS 6/4/2023 14:35:29'!
PASSED!

!testRun: #ObserversTest #test07ObserverCanAttachToAllChanges stamp: 'AS 6/4/2023 14:35:29'!
PASSED!

!testRun: #ObserversTest #test08ObserverShouldNotBeUpdatedIfDetachedForAnAspect stamp: 'AS 6/4/2023 14:35:29'!
PASSED!

!testRun: #ObserversTest #test09ObserverCanDetachForAllAspect stamp: 'AS 6/4/2023 14:35:29'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'AS 6/4/2023 14:37:43' prior: 50630285!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.

	aspectObservers := Dictionary new.! !
!MarsRover class methodsFor: 'instance creation' stamp: 'AS 6/4/2023 14:39:18'!
at: aPosition heading: aHeadingType named: aName
	
	^self new initializeAt: aPosition heading: aHeadingType named: aName! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'AS 6/4/2023 14:39:45'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head aspectObservers name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'AS 6/4/2023 14:39:43'!
initializeAt: aPosition heading: aHeadingType named: aName

	position := aPosition.
	head := aHeadingType for: self.
	name := aName.

	aspectObservers := Dictionary new.! !
!MarsRover methodsFor: 'initialization' stamp: 'AS 6/4/2023 14:39:56' prior: 50632031!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	name := ''.

	aspectObservers := Dictionary new.! !
!MarsRover methodsFor: 'observers' stamp: 'AS 6/4/2023 14:40:53' prior: 50630972!
notify: anAspect withValue: aValue

	| observersToUpdate |

	observersToUpdate := self getObserversFor: anAspect.
	observersToUpdate do: [ :anObserver | anObserver update: anAspect withValue: aValue from: self ]! !
!RoverObserver methodsFor: 'update' stamp: 'AS 6/4/2023 14:41:49'!
update: anAspect withValue: aValue from: aMarsRover
	
	anAspect update: self withValue: aValue from: aMarsRover.
	"
	(anAspect = #Heading)
		ifTrue: [ self updateHeading: aValue ]
		ifFalse: [	(anAspect = #Position)
			ifTrue: [ self updatePosition: aValue ]
			ifFalse: 	[ self signalInvalidAspect. ] ]
"	

! !
!Aspect methodsFor: 'update' stamp: 'AS 6/4/2023 14:42:12'!
update: anObserver withValue: aValue from: aMarsRover

	self subclassResponsibility .! !
!Heading methodsFor: 'update' stamp: 'AS 6/4/2023 14:42:26' overrides: 50632091!
update: anObserver withValue: aValue from: aMarsRover

	anObserver updateHeading: aValue! !
!Position methodsFor: 'update' stamp: 'AS 6/4/2023 14:42:45' overrides: 50632091!
update: anObserver withValue: aValue from: aMarsRover

	anObserver updatePosition: aValue from: aMarsRover.! !
!Heading methodsFor: 'update' stamp: 'AS 6/4/2023 14:42:56' prior: 50632097 overrides: 50632091!
update: anObserver withValue: aValue from: aMarsRover

	anObserver updateHeading: aValue from: aMarsRover.! !
!RoverObserver methodsFor: 'update' stamp: 'AS 6/4/2023 14:43:19'!
updateHeading: aHeadingType from: aMarsRover
	
	self subclassResponsibility ! !
!RoverObserver methodsFor: 'update' stamp: 'AS 6/4/2023 14:43:29'!
updatePosition: aPosition from: aMarsRover
	
	self subclassResponsibility ! !
!Log methodsFor: 'update' stamp: 'AS 6/4/2023 14:43:48' overrides: 50632116!
updateHeading: aHeadingType from: aMarsRover
	
	| direction |
	
	(aHeadingType isKindOf: MarsRoverHeadingEast) ifTrue: [ direction := 'East' ].
	(aHeadingType isKindOf: MarsRoverHeadingNorth) ifTrue: [ direction := 'North' ].
	(aHeadingType isKindOf: MarsRoverHeadingSouth) ifTrue: [ direction := 'South' ].
	(aHeadingType isKindOf: MarsRoverHeadingWest) ifTrue: [ direction := 'West' ].
	
	lines add: direction.! !
!Log methodsFor: 'update' stamp: 'AS 6/4/2023 14:43:59' overrides: 50632121!
updatePosition: aPosition from: aMarsRover.
	
	lines add: aPosition.! !
!Log methodsFor: 'update' stamp: 'AS 6/4/2023 14:44:00' prior: 50632142 overrides: 50632121!
updatePosition: aPosition from: aMarsRover
	
	lines add: aPosition.! !
!Window methodsFor: 'update' stamp: 'AS 6/4/2023 14:44:11' overrides: 50632116!
updateHeading: aHeadingType from: aMarsRover
	
	| direction |
	
	(aHeadingType isKindOf: MarsRoverHeadingEast) ifTrue: [ direction := 'este' ].
	(aHeadingType isKindOf: MarsRoverHeadingNorth) ifTrue: [ direction := 'norte' ].
	(aHeadingType isKindOf: MarsRoverHeadingSouth) ifTrue: [ direction := 'sur' ].
	(aHeadingType isKindOf: MarsRoverHeadingWest) ifTrue: [ direction := 'oeste' ].
		
	heading := 'Apuntando al ', direction.! !
!Window methodsFor: 'update' stamp: 'AS 6/4/2023 14:44:19' overrides: 50632121!
updatePosition: aPosition from: aMarsRover
	
	position := aPosition asString. 
	! !
!Log methodsFor: 'update' stamp: 'AS 6/4/2023 14:45:09' prior: 50632126 overrides: 50632116!
updateHeading: aHeadingType from: aMarsRover
	
	| direction |
	
	(aHeadingType isKindOf: MarsRoverHeadingEast) ifTrue: [ direction := ': East' ].
	(aHeadingType isKindOf: MarsRoverHeadingNorth) ifTrue: [ direction := ': North' ].
	(aHeadingType isKindOf: MarsRoverHeadingSouth) ifTrue: [ direction := ': South' ].
	(aHeadingType isKindOf: MarsRoverHeadingWest) ifTrue: [ direction := ': West' ].
	
	lines add: aMarsRover name, direction.! !
!Log methodsFor: 'update' stamp: 'AS 6/4/2023 14:45:45' prior: 50632148 overrides: 50632121!
updatePosition: aPosition from: aMarsRover
	
	lines add: aMarsRover name, ': ', aPosition.! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:48:52'!
curiosity

	^ MarsRover at: 1@1 heading: MarsRoverHeadingNorth! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:48:52' prior: 50631854!
test02RoverForwardTwoStepsLogRegisterTwoLastPosition

	| rover log |
	
	rover := self curiosity.
	log := Log new.

	rover attach: log for: self positionAndHeading.
	 	
	rover process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 1@3 equals: log lines second
! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:48:52' prior: 50631842!
test01RoverForwardLogRegisterLastPosition

	| rover log |
	
	rover := self curiosity.
	log := Log new.
	
	rover attach: log for: self positionAndHeading.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assert: 1@2 equals: log lines first
! !
!LogTest methodsFor: 'rovers' stamp: 'AS 6/4/2023 14:50:04'!
curiosityAt: aPosition heading: aHeadingType

	^ MarsRover at: aPosition heading: aHeadingType named: 'Curiosity'! !
!LogTest methodsFor: 'rovers' stamp: 'AS 6/4/2023 14:50:22'!
curiosityName

	^ 'Curiosity'! !
!LogTest methodsFor: 'rovers' stamp: 'AS 6/4/2023 14:50:37' prior: 50632227!
curiosityAt: aPosition heading: aHeadingType

	^ MarsRover at: aPosition heading: aHeadingType named: self curiosityName ! !
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 14:51:00'!
east

	^ MarsRoverHeadingEast ! !
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 14:51:09'!
west

	^ MarsRoverHeadingWest! !
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 14:51:16'!
north

	^ MarsRoverHeadingNorth! !
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 14:51:24'!
south

	^ MarsRoverHeadingSouth! !

!methodRemoval: LogTest #curiosity stamp: 'AS 6/4/2023 14:51:41'!
curiosity

	^ MarsRover at: 1@1 heading: MarsRoverHeadingNorth!
!LogTest methodsFor: 'assertions' stamp: 'AS 6/4/2023 14:57:19'!
assertLine: aNumberOfLine on: aLog is: aPosition forRover: aRoverName


	self assert: aRoverName, ': ', aPosition equals: (aLog lines at: aNumberOfLine)! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 14:59:00' prior: 50632216!
test01RoverForwardLogRegisterLastPosition

	| rover log |
	
	rover := self curiosityAt: 1@1 heading: self north.
	log := Log new.
	
	rover attach: log for: self positionAndHeading.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assertLine: 1 on: log is: 1@2  forRover: rover name.
! !

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/4/2023 14:59:02'!
ERROR!

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/4/2023 14:59:02'!
ERROR!
!Log methodsFor: 'update' stamp: 'AS 6/4/2023 14:59:30' prior: 50632193 overrides: 50632121!
updatePosition: aPosition from: aMarsRover
	
	lines add: (aMarsRover name), ': ', aPosition.! !

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/4/2023 14:59:31'!
ERROR!
!Log methodsFor: 'update' stamp: 'AS 6/4/2023 14:59:45' prior: 50632288 overrides: 50632121!
updatePosition: aPosition from: aMarsRover
	
	lines add: (aMarsRover name), ': ', aPosition asString.! !

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/4/2023 14:59:47'!
ERROR!
!LogTest methodsFor: 'assertions' stamp: 'AS 6/4/2023 14:59:57' prior: 50632261!
assertLine: aNumberOfLine on: aLog is: aPosition forRover: aRoverName


	self assert: aRoverName, ': ', aPosition asString equals: (aLog lines at: aNumberOfLine)! !

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/4/2023 14:59:59'!
PASSED!

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/4/2023 15:00:03'!
PASSED!
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:00:49' prior: 50632203!
test02RoverForwardTwoStepsLogRegisterTwoLastPosition

	| rover log |
	
	rover := self curiosityAt: 1@1 heading: self north.
	log := Log new.

	rover attach: log for: self positionAndHeading.
	 	
	rover process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assert: 1@2 equals: log lines first.
	self assert: 1@3 equals: log lines second
! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:01:14' prior: 50632321!
test02RoverForwardTwoStepsLogRegisterTwoLastPosition

	| rover log |
	
	rover := self curiosityAt: 1@1 heading: self north.
	log := Log new.

	rover attach: log for: self positionAndHeading.
	 	
	rover process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assertLine: 1 on: log is: 1@2  forRover: rover name.
	self assertLine: 2 on: log is: 1@3  forRover: rover name.
! !

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/4/2023 15:01:17'!
PASSED!

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/4/2023 15:01:17'!
PASSED!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/4/2023 15:01:17'!
PASSED!
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:01:44'!
test03LogRegisterMoreThanOneRoverActivity

	| rover log |
	
	rover := self curiosityAt: 1@1 heading: self north.
	log := Log new.

	rover attach: log for: self positionAndHeading.
	 	
	rover process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assertLine: 1 on: log is: 1@2  forRover: rover name.
	self assertLine: 2 on: log is: 1@3  forRover: rover name.
! !
!LogTest methodsFor: 'rovers' stamp: 'AS 6/4/2023 15:02:17'!
opportunityName

	^ 'Opportunity'! !
!LogTest methodsFor: 'rovers' stamp: 'AS 6/4/2023 15:02:33'!
opportunityAt: aPosition heading: aHeadingType

	^ MarsRover at: aPosition heading: aHeadingType named: self opportunityName ! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:02:56' prior: 50632359!
test03LogRegisterMoreThanOneRoverActivity

	| curiosity log |
	
	curiosity := self curiosityAt: 1@1 heading: self north.
	log := Log new.

	curiosity attach: log for: self positionAndHeading.
	 	
	curiosity process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assertLine: 1 on: log is: 1@2  forRover: curiosity name.
	self assertLine: 2 on: log is: 1@3  forRover: curiosity name.
! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:07:17'!
test03LogRegisterPositionForMoreThanOneRoverActivity

	| curiosity opportunity log |
	
	curiosity := self curiosityAt: 1@1 heading: self north.
	opportunity := self opportunityAt: 4@3 heading: self east.
	
	log := Log new.

	curiosity attach: log for: self positionAndHeading.
	opportunity attach: log for: self positionAndHeading.
	 	
	curiosity process: 'ff'.
	opportunity process: 'br'.
	
	self assert: 4 equals: log lines size.
	self assertLine: 1 on: log is: 1@2  forRover: curiosity name.
	self assertLine: 2 on: log is: 1@3  forRover: curiosity name.
	self assertLine: 3 on: log is: 3@3  forRover: opportunity name.
	self assertLine: 4 on: log is: self south forRover: opportunity name.	
! !
!LogTest methodsFor: 'assertions' stamp: 'AS 6/4/2023 15:08:32'!
assertLine: aNumberOfLine on: aLog is: aRoverName positionedAt: aPosition


	self assert: aRoverName, ': ', aPosition asString equals: (aLog lines at: aNumberOfLine)! !
!LogTest methodsFor: 'assertions' stamp: 'AS 6/4/2023 15:10:45'!
assertLine: aNumberOfLine on: aLog is: aRoverName headingTo: aHeadingType


	| aPosition |
	self assert: aRoverName, ': ', aPosition asString equals: (aLog lines at: aNumberOfLine)! !
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 15:13:52'!
directionFrom: aHeadingType
	
	(aHeadingType isKindOf: MarsRoverHeadingEast) ifTrue: [^'East'].
	(aHeadingType isKindOf: MarsRoverHeadingWest) ifTrue: [^'West'].
	(aHeadingType isKindOf: MarsRoverHeadingNorth) ifTrue: [^'North'].
	(aHeadingType isKindOf: MarsRoverHeadingSouth) ifTrue: [^'South'].! !
!LogTest methodsFor: 'assertions' stamp: 'AS 6/4/2023 15:15:11' prior: 50632431!
assertLine: aNumberOfLine on: aLog is: aRoverName headingTo: aHeadingType

	self 
		assert: aRoverName, ': ', (self directionFrom: aHeadingType)
		equals: (aLog lines at: aNumberOfLine)! !

!methodRemoval: LogTest #assertLine:on:is:forRover: stamp: 'AS 6/4/2023 15:15:18'!
assertLine: aNumberOfLine on: aLog is: aPosition forRover: aRoverName


	self assert: aRoverName, ': ', aPosition asString equals: (aLog lines at: aNumberOfLine)!
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:16:40' prior: 50632269!
test01RoverForwardLogRegisterLastPosition

	| rover log |
	
	rover := self curiosityAt: 1@1 heading: self north.
	log := Log new.
	
	rover attach: log for: self positionAndHeading.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assertLine: 1 on: log is: rover name positionedAt: 1@2. 
! !
!LogTest methodsFor: 'assertions' stamp: 'AS 6/4/2023 15:17:17'!
assertLine: aNumberOfLine on: aLog is: aRoverName positionatedAt: aPosition


	self assert: aRoverName, ': ', aPosition asString equals: (aLog lines at: aNumberOfLine)! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'AS 6/4/2023 15:17:17' prior: 50632467!
test01RoverForwardLogRegisterLastPosition

	| rover log |
	
	rover := self curiosityAt: 1@1 heading: self north.
	log := Log new.
	
	rover attach: log for: self positionAndHeading.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assertLine: 1 on: log is: rover name positionatedAt: 1@2. 
! !

!methodRemoval: LogTest #assertLine:on:is:positionedAt: stamp: 'AS 6/4/2023 15:17:17'!
assertLine: aNumberOfLine on: aLog is: aRoverName positionedAt: aPosition


	self assert: aRoverName, ': ', aPosition asString equals: (aLog lines at: aNumberOfLine)!
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:17:43' prior: 50632335!
test02RoverForwardTwoStepsLogRegisterTwoLastPosition

	| rover log |
	
	rover := self curiosityAt: 1@1 heading: self north.
	log := Log new.

	rover attach: log for: self positionAndHeading.
	 	
	rover process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assertLine: 1 on: log is: rover name positionatedAt: 1@2. 
	self assertLine: 1 on: log is: rover name positionatedAt: 1@3. 
! !

!methodRemoval: LogTest #test03LogRegisterMoreThanOneRoverActivity stamp: 'AS 6/4/2023 15:18:00'!
test03LogRegisterMoreThanOneRoverActivity

	| curiosity log |
	
	curiosity := self curiosityAt: 1@1 heading: self north.
	log := Log new.

	curiosity attach: log for: self positionAndHeading.
	 	
	curiosity process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assertLine: 1 on: log is: 1@2  forRover: curiosity name.
	self assertLine: 2 on: log is: 1@3  forRover: curiosity name.
!
!LogTest methodsFor: 'aspects' stamp: 'AS 6/4/2023 15:18:14'!
position
	
	^{ Position new }! !
!LogTest methodsFor: 'aspects' stamp: 'AS 6/4/2023 15:18:23'!
heading
	
	^{ Heading new }! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:19:16' prior: 50632399!
test03LogRegisterPositionForMoreThanOneRoverActivity

	| curiosity opportunity log |
	
	curiosity := self curiosityAt: 1@1 heading: self north.
	opportunity := self opportunityAt: 4@3 heading: self east.
	
	log := Log new.

	curiosity attach: log for: self positionAndHeading.
	opportunity attach: log for: self positionAndHeading.
	 	
	curiosity process: 'ff'.
	opportunity process: 'br'.
	
	self assert: 4 equals: log lines size.
	self assertLine: 1 on: log is: curiosity name positionatedAt: 1@2. 
	self assertLine: 1 on: log is: curiosity name positionatedAt: 1@3. 	
	self assertLine: 1 on: log is: opportunity name positionatedAt: 3@2. 
	self assertLine: 1 on: log is: curiosity name headingTo: self south.
! !

!testRun: #LogTest #test01RoverForwardLogRegisterLastPosition stamp: 'AS 6/4/2023 15:19:19'!
PASSED!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/4/2023 15:19:19'!
FAILURE!

!testRun: #LogTest #test03LogRegisterPositionForMoreThanOneRoverActivity stamp: 'AS 6/4/2023 15:19:19'!
FAILURE!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/4/2023 15:19:24'!
FAILURE!
!LogTest methodsFor: 'assertions' stamp: 'AS 6/4/2023 15:20:50'!
assertLine: aNumberOfLine on: aLog is: aRoverName withPosition: aPosition


	self assert: aRoverName, ': ', aPosition asString equals: (aLog lines at: aNumberOfLine)! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'AS 6/4/2023 15:20:50' prior: 50632546!
test03LogRegisterPositionForMoreThanOneRoverActivity

	| curiosity opportunity log |
	
	curiosity := self curiosityAt: 1@1 heading: self north.
	opportunity := self opportunityAt: 4@3 heading: self east.
	
	log := Log new.

	curiosity attach: log for: self positionAndHeading.
	opportunity attach: log for: self positionAndHeading.
	 	
	curiosity process: 'ff'.
	opportunity process: 'br'.
	
	self assert: 4 equals: log lines size.
	self assertLine: 1 on: log is: curiosity name withPosition: 1@2. 
	self assertLine: 1 on: log is: curiosity name withPosition: 1@3. 	
	self assertLine: 1 on: log is: opportunity name withPosition: 3@2. 
	self assertLine: 1 on: log is: curiosity name headingTo: self south.
! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'AS 6/4/2023 15:20:50' prior: 50632509!
test02RoverForwardTwoStepsLogRegisterTwoLastPosition

	| rover log |
	
	rover := self curiosityAt: 1@1 heading: self north.
	log := Log new.

	rover attach: log for: self positionAndHeading.
	 	
	rover process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assertLine: 1 on: log is: rover name withPosition: 1@2. 
	self assertLine: 1 on: log is: rover name withPosition: 1@3. 
! !
!LogTest methodsFor: 'as yet unclassified' stamp: 'AS 6/4/2023 15:20:50' prior: 50632488!
test01RoverForwardLogRegisterLastPosition

	| rover log |
	
	rover := self curiosityAt: 1@1 heading: self north.
	log := Log new.
	
	rover attach: log for: self positionAndHeading.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assertLine: 1 on: log is: rover name withPosition: 1@2. 
! !

!methodRemoval: LogTest #assertLine:on:is:positionatedAt: stamp: 'AS 6/4/2023 15:20:50'!
assertLine: aNumberOfLine on: aLog is: aRoverName positionatedAt: aPosition


	self assert: aRoverName, ': ', aPosition asString equals: (aLog lines at: aNumberOfLine)!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/4/2023 15:20:58'!
FAILURE!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/4/2023 15:20:58'!
FAILURE!
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:21:30' prior: 50632619!
test02RoverForwardTwoStepsLogRegisterTwoLastPosition

	| rover log |
	
	rover := self curiosityAt: 1@1 heading: self north.
	log := Log new.

	rover attach: log for: self positionAndHeading.
	 	
	rover process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assertLine: 1 on: log is: (rover name) withPosition: 1@2. 
	self assertLine: 1 on: log is: (rover name) withPosition: 1@3. 
! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:21:51' prior: 50632634!
test01RoverForwardLogRegisterLastPosition

	| rover log |
	
	rover := self curiosityAt: 1@1 heading: self north.
	log := Log new.
	
	rover attach: log for: self positionAndHeading.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assertLine: 1 on: log is: (rover name) withPosition: 1@2. 
! !

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/4/2023 15:21:54'!
FAILURE!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/4/2023 15:21:54'!
FAILURE!
!MarsRover methodsFor: 'accessing' stamp: 'AS 6/4/2023 15:22:45' overrides: 16903442!
name
	
	^name.! !

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/4/2023 15:22:52'!
FAILURE!

!testRun: #LogTest #test02RoverForwardTwoStepsLogRegisterTwoLastPosition stamp: 'AS 6/4/2023 15:22:52'!
FAILURE!
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:23:22' prior: 50632662!
test02RoverForwardTwoStepsLogRegisterTwoLastPosition

	| rover log |
	
	rover := self curiosityAt: 1@1 heading: self north.
	log := Log new.

	rover attach: log for: self positionAndHeading.
	 	
	rover process: 'ff'.
	
	self assert: 2 equals: log lines size.
	self assertLine: 1 on: log is: rover name withPosition: 1@2. 
	self assertLine: 2 on: log is: rover name withPosition: 1@3. 
! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:23:28' prior: 50632677!
test01RoverForwardLogRegisterLastPosition

	| rover log |
	
	rover := self curiosityAt: 1@1 heading: self north.
	log := Log new.
	
	rover attach: log for: self positionAndHeading.
	
	rover process: 'f'.
	
	self assert: 1 equals: log lines size.
	self assertLine: 1 on: log is: rover name withPosition: 1@2. 
! !
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:23:35' prior: 50632594!
test03LogRegisterPositionForMoreThanOneRoverActivity

	| curiosity opportunity log |
	
	curiosity := self curiosityAt: 1@1 heading: self north.
	opportunity := self opportunityAt: 4@3 heading: self east.
	
	log := Log new.

	curiosity attach: log for: self positionAndHeading.
	opportunity attach: log for: self positionAndHeading.
	 	
	curiosity process: 'ff'.
	opportunity process: 'br'.
	
	self assert: 4 equals: log lines size.
	self assertLine: 1 on: log is: curiosity name withPosition: 1@2. 
	self assertLine: 2 on: log is: curiosity name withPosition: 1@3. 	
	self assertLine: 3 on: log is: opportunity name withPosition: 3@2. 
	self assertLine: 4 on: log is: curiosity name headingTo: self south.
! !

!testRun: #LogTest #test03LogRegisterPositionForMoreThanOneRoverActivity stamp: 'AS 6/4/2023 15:23:36'!
FAILURE!
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:24:08' prior: 50632736!
test03LogRegisterPositionForMoreThanOneRoverActivity

	| curiosity opportunity log |
	
	curiosity := self curiosityAt: 1@1 heading: self north.
	opportunity := self opportunityAt: 4@3 heading: self east.
	
	log := Log new.

	curiosity attach: log for: self positionAndHeading.
	opportunity attach: log for: self positionAndHeading.
	 	
	curiosity process: 'ff'.
	opportunity process: 'br'.
	
	self assert: 4 equals: log lines size.
	self assertLine: 1 on: log is: curiosity name withPosition: 1@2. 
	self assertLine: 2 on: log is: curiosity name withPosition: 1@3. 	
	self assertLine: 3 on: log is: opportunity name withPosition: 3@3. 
	self assertLine: 4 on: log is: curiosity name headingTo: self south.
! !

!testRun: #LogTest #test03LogRegisterPositionForMoreThanOneRoverActivity stamp: 'AS 6/4/2023 15:24:10'!
ERROR!

!testRun: #LogTest #test03LogRegisterPositionForMoreThanOneRoverActivity stamp: 'AS 6/4/2023 15:24:35'!
ERROR!

!testRun: #LogTest #test03LogRegisterPositionForMoreThanOneRoverActivity stamp: 'AS 6/4/2023 15:25:20'!
ERROR!

!testRun: #LogTest #test03LogRegisterPositionForMoreThanOneRoverActivity stamp: 'AS 6/4/2023 15:25:20'!
ERROR!

(self directionFrom: aHeadingType)!

(self directionFrom: MarsRoverHeadingSouth new)!
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 15:28:44' prior: 50632439!
directionFrom: aHeadingType
	
	(aHeadingType isKindOf: MarsRoverHeadingEast) ifTrue: [^'East'].
	(aHeadingType isKindOf: MarsRoverHeadingWest) ifTrue: [^'West'].
	(aHeadingType isKindOf: MarsRoverHeadingNorth) ifTrue: [^'North'].
	(aHeadingType isKindOf: MarsRoverHeadingSouth) ifTrue: [^'South'].
		! !

!testRun: #LogTest #test03LogRegisterPositionForMoreThanOneRoverActivity stamp: 'AS 6/4/2023 15:28:49'!
ERROR!

!testRun: #LogTest #test03LogRegisterPositionForMoreThanOneRoverActivity stamp: 'AS 6/4/2023 15:28:49'!
ERROR!

self south!
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 15:29:57' prior: 50632243!
east

	^ MarsRoverHeadingEast new! !
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 15:30:02' prior: 50632249!
north

	^ MarsRoverHeadingNorth new! !
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 15:30:06' prior: 50632253!
south

	^ MarsRoverHeadingSouth new! !
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 15:30:10' prior: 50632246!
west

	^ MarsRoverHeadingWest new! !

!testRun: #LogTest #test03LogRegisterPositionForMoreThanOneRoverActivity stamp: 'AS 6/4/2023 15:30:13'!
ERROR!

!testRun: #LogTest #test03LogRegisterPositionForMoreThanOneRoverActivity stamp: 'AS 6/4/2023 15:30:13'!
ERROR!
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 15:30:36' prior: 50632827!
east

	^ MarsRoverHeadingEast! !
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 15:30:41' prior: 50632831!
north

	^ MarsRoverHeadingNorth! !
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 15:30:45' prior: 50632835!
south

	^ MarsRoverHeadingSouth! !
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 15:30:49' prior: 50632839!
west

	^ MarsRoverHeadingWest! !
!LogTest methodsFor: 'heading' stamp: 'AS 6/4/2023 15:31:28' prior: 50632807!
directionFrom: aHeadingType
	
	(aHeadingType = MarsRoverHeadingEast) ifTrue: [^'East'].
	(aHeadingType = MarsRoverHeadingWest) ifTrue: [^'West'].
	(aHeadingType = MarsRoverHeadingNorth) ifTrue: [^'North'].
	(aHeadingType = MarsRoverHeadingSouth) ifTrue: [^'South'].
		! !

!testRun: #LogTest #test03LogRegisterPositionForMoreThanOneRoverActivity stamp: 'AS 6/4/2023 15:31:33'!
FAILURE!

!testRun: #LogTest #test03LogRegisterPositionForMoreThanOneRoverActivity stamp: 'AS 6/4/2023 15:31:33'!
FAILURE!
!LogTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:31:53' prior: 50632765!
test03LogRegisterPositionForMoreThanOneRoverActivity

	| curiosity opportunity log |
	
	curiosity := self curiosityAt: 1@1 heading: self north.
	opportunity := self opportunityAt: 4@3 heading: self east.
	
	log := Log new.

	curiosity attach: log for: self positionAndHeading.
	opportunity attach: log for: self positionAndHeading.
	 	
	curiosity process: 'ff'.
	opportunity process: 'br'.
	
	self assert: 4 equals: log lines size.
	self assertLine: 1 on: log is: curiosity name withPosition: 1@2. 
	self assertLine: 2 on: log is: curiosity name withPosition: 1@3. 	
	self assertLine: 3 on: log is: opportunity name withPosition: 3@3. 
	self assertLine: 4 on: log is: opportunity name headingTo: self south.
! !

!testRun: #LogTest #test03LogRegisterPositionForMoreThanOneRoverActivity stamp: 'AS 6/4/2023 15:31:55'!
PASSED!
!Log methodsFor: 'update' stamp: 'AS 6/4/2023 15:33:56' prior: 50632176 overrides: 50632116!
updateHeading: aHeadingType from: aMarsRover
	
	| direction |
	
	(aHeadingType isKindOf: MarsRoverHeadingEast) ifTrue: [ direction := 'East' ].
	(aHeadingType isKindOf: MarsRoverHeadingNorth) ifTrue: [ direction := 'North' ].
	(aHeadingType isKindOf: MarsRoverHeadingSouth) ifTrue: [ direction := 'South' ].
	(aHeadingType isKindOf: MarsRoverHeadingWest) ifTrue: [ direction := 'West' ].
	
	lines add: aMarsRover name, ': ', direction.! !

!methodRemoval: Aspect #update:withValue: stamp: 'AS 6/4/2023 15:35:19'!
update: anObserver withValue: aValue

	self subclassResponsibility .!

!methodRemoval: Heading #update:withValue: stamp: 'AS 6/4/2023 15:35:24'!
update: anObserver withValue: aValue

	anObserver updateHeading: aValue!

!methodRemoval: Position #update:withValue: stamp: 'AS 6/4/2023 15:35:28'!
update: anObserver withValue: aValue

	anObserver updatePosition: aValue!

!methodRemoval: RoverObserver #update:withValue: stamp: 'AS 6/4/2023 15:35:42'!
update: anAspect withValue: aValue
	
	anAspect update: self withValue: aValue.
	"
	(anAspect = #Heading)
		ifTrue: [ self updateHeading: aValue ]
		ifFalse: [	(anAspect = #Position)
			ifTrue: [ self updatePosition: aValue ]
			ifFalse: 	[ self signalInvalidAspect. ] ]
"	

!

!methodRemoval: RoverObserver #updateHeading: stamp: 'AS 6/4/2023 15:35:48'!
updateHeading: aHeadingType
	
	self subclassResponsibility !

!methodRemoval: RoverObserver #updatePosition: stamp: 'AS 6/4/2023 15:35:49'!
updatePosition: aPosition
	
	self subclassResponsibility !

!methodRemoval: Log #updateHeading: stamp: 'AS 6/4/2023 15:35:52'!
updateHeading: aHeadingType
	
	| direction |
	
	(aHeadingType isKindOf: MarsRoverHeadingEast) ifTrue: [ direction := 'East' ].
	(aHeadingType isKindOf: MarsRoverHeadingNorth) ifTrue: [ direction := 'North' ].
	(aHeadingType isKindOf: MarsRoverHeadingSouth) ifTrue: [ direction := 'South' ].
	(aHeadingType isKindOf: MarsRoverHeadingWest) ifTrue: [ direction := 'West' ].
	
	lines add: direction.!

!methodRemoval: Log #updatePosition: stamp: 'AS 6/4/2023 15:35:54'!
updatePosition: aPosition
	
	lines add: aPosition.!

!methodRemoval: Window #updateHeading: stamp: 'AS 6/4/2023 15:35:58'!
updateHeading: aHeadingType
	
	| direction |
	
	(aHeadingType isKindOf: MarsRoverHeadingEast) ifTrue: [ direction := 'este' ].
	(aHeadingType isKindOf: MarsRoverHeadingNorth) ifTrue: [ direction := 'norte' ].
	(aHeadingType isKindOf: MarsRoverHeadingSouth) ifTrue: [ direction := 'sur' ].
	(aHeadingType isKindOf: MarsRoverHeadingWest) ifTrue: [ direction := 'oeste' ].
		
	heading := 'Apuntando al ', direction.!

!methodRemoval: Window #updatePosition: stamp: 'AS 6/4/2023 15:36:02'!
updatePosition: aPosition
	
	position := aPosition asString. 
	!
!Window methodsFor: 'update' stamp: 'AS 6/4/2023 15:36:21' prior: 50632153 overrides: 50632116!
updateHeading: aHeadingType from: aMarsRover
	
	| direction |
	
	(aHeadingType isKindOf: MarsRoverHeadingEast) ifTrue: [ direction := 'este' ].
	(aHeadingType isKindOf: MarsRoverHeadingNorth) ifTrue: [ direction := 'norte' ].
	(aHeadingType isKindOf: MarsRoverHeadingSouth) ifTrue: [ direction := 'sur' ].
	(aHeadingType isKindOf: MarsRoverHeadingWest) ifTrue: [ direction := 'oeste' ].
		
	heading := aMarsRover name, ': Apuntando al ', direction.! !

RoverObserver subclass: #Window
	instanceVariableNames: 'positions headings'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Window category: 'MarsRover-WithHeading' stamp: 'AS 6/4/2023 15:37:26'!
RoverObserver subclass: #Window
	instanceVariableNames: 'positions headings'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Window methodsFor: 'initialization' stamp: 'AS 6/4/2023 15:37:49' prior: 50630206 overrides: 16920235!
initialize

	positions := Dictionary new.
	headings := Dictionary new.! !
!Window methodsFor: 'update' stamp: 'AS 6/4/2023 15:41:48' prior: 50633002 overrides: 50632116!
updateHeading: aHeadingType from: aMarsRover
	
	| direction |
	
	(aHeadingType isKindOf: MarsRoverHeadingEast) ifTrue: [ direction := 'este' ].
	(aHeadingType isKindOf: MarsRoverHeadingNorth) ifTrue: [ direction := 'norte' ].
	(aHeadingType isKindOf: MarsRoverHeadingSouth) ifTrue: [ direction := 'sur' ].
	(aHeadingType isKindOf: MarsRoverHeadingWest) ifTrue: [ direction := 'oeste' ].
		
	headings at: aMarsRover name put: direction.
! !
!Window methodsFor: 'update' stamp: 'AS 6/4/2023 15:42:12' prior: 50632170 overrides: 50632121!
updatePosition: aPosition from: aMarsRover
	
	positions at: aMarsRover name put: aPosition. 
	! !
!Window methodsFor: 'show' stamp: 'AS 6/4/2023 15:45:55' prior: 50630177!
showHeading

	| lines |
	
	lines := OrderedCollection new.
	
	(headings keys) do: [ :aKey | lines add: (aKey, ': ', 'Apuntando al ', headings at: aKey) ].
	
	^lines.! !
!Window methodsFor: 'show' stamp: 'AS 6/4/2023 15:46:50' prior: 50630181!
showPosition

	| lines |
	
	lines := OrderedCollection new.
	
	(positions keys) do: [ :aKey | lines add: (aKey, ': ', (positions at: aKey) asString) ].
	
	^lines.! !
!WindowTest methodsFor: 'rovers' stamp: 'AS 6/4/2023 15:47:38'!
curiosityName

	^ 'Curiosity'! !
!WindowTest methodsFor: 'rovers' stamp: 'AS 6/4/2023 15:47:59'!
opportunityName

	^ 'Opportunity'! !
!WindowTest methodsFor: 'rovers' stamp: 'AS 6/4/2023 15:49:48'!
curiosityAt: aPosition heading: aHeadingType

	^ MarsRover at: aPosition heading: aHeadingType named: self curiosityName ! !
!WindowTest methodsFor: 'rovers' stamp: 'AS 6/4/2023 15:50:05'!
opprtunityAt: aPosition heading: aHeadingType

	^ MarsRover at: aPosition heading: aHeadingType named: self opportunityName ! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:51:59' prior: 50631789!
test01RoverForwardWindowShowsLastPosition

	| rover window |
	
	rover := self curiosityAt: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	
	rover attach: window for: self positionAndHeading.
	
	rover process: 'f'.
	
	self assert: 'Curiosity: 1@2' equals: window showPosition.
	self assert: '' equals: window showHeading.
! !

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/4/2023 15:52:03'!
FAILURE!

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/4/2023 15:52:03'!
FAILURE!
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:53:14' prior: 50633099!
test01RoverForwardWindowShowsLastPosition

	| rover window positionLines|
	
	rover := self curiosityAt: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	
	rover attach: window for: self positionAndHeading.
	
	rover process: 'f'.
	
	positionLines := window showPosition.
	
	self assert: 'Curiosity: 1@2' equals: positionLines first.
	self assert: '' equals: window showHeading.
! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:53:49' prior: 50633119!
test01RoverForwardWindowShowsLastPosition

	| rover window positionLines headingLines|
	
	rover := self curiosityAt: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	
	rover attach: window for: self positionAndHeading.
	
	rover process: 'f'.
	
	positionLines := window showPosition.
	headingLines := window showHeading.
	
	self assert: 'Curiosity: 1@2' equals: positionLines first.
	self assert: '' equals: headingLines first.
! !

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/4/2023 15:53:51'!
ERROR!
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:54:42' prior: 50633134!
test01RoverForwardWindowShowsLastPosition

	| rover window positionLines headingLines|
	
	rover := self curiosityAt: 1@1 heading: MarsRoverHeadingNorth.
	
	window := Window new.
	
	rover attach: window for: self positionAndHeading.
	
	rover process: 'f'.
	
	positionLines := window showPosition.
	headingLines := window showHeading.
	
	self assert: 'Curiosity: 1@2' equals: positionLines first.
	self assert: headingLines isEmpty.
! !

!testRun: #WindowTest #test01RoverForwardWindowShowsLastPosition stamp: 'AS 6/4/2023 15:54:45'!
PASSED!
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:55:42' prior: 50631802!
test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother

	| rover window |
	
	rover := self curiosityAt: 1@1 heading: MarsRoverHeadingNorth.
	window := Window new.

	rover attach: window for: self positionAndHeading.
	 	
	rover process: 'ff'.
	
	self assert: '1@3' equals: window showPosition! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:56:15' prior: 50633174!
test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother

	| rover window positionLines headingLines |
	
	rover := self curiosityAt: 1@1 heading: MarsRoverHeadingNorth.
	window := Window new.

	rover attach: window for: self positionAndHeading.
	 	
	rover process: 'ff'.
	
	positionLines := window showPosition.
	headingLines := window showHeading.
	
	self assert: 'Curiosity: 1@3' equals: positionLines first.
	self assert: headingLines isEmpty.
! !

!testRun: #WindowTest #test02RoverForwardTwoStepsWindowRegisterPositionsOneAfterAnother stamp: 'AS 6/4/2023 15:56:19'!
PASSED!
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:56:54' prior: 50631814!
test03RoverForwardAndRightRegisterPositionsAndHeading

	| rover window positionLines headingLines |
	
	rover := self curiosityAt: 1@1 heading: MarsRoverHeadingNorth.
	window := Window new.

	rover attach: window for: self positionAndHeading.
	 	
	rover process: 'fr'.
	
	self assert: '1@2' equals: window showPosition.
	self assert: 'Apuntando al este' equals: window showHeading.! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:57:17' prior: 50633207!
test03RoverForwardAndRightRegisterPositionsAndHeading

	| rover window positionLines headingLines |
	
	rover := self curiosityAt: 1@1 heading: MarsRoverHeadingNorth.
	window := Window new.

	rover attach: window for: self positionAndHeading.
	 	
	rover process: 'fr'.
	
	positionLines := window showPosition.
	headingLines := window showHeading.
		
	self assert: '1@2' equals: window showPosition.
	self assert: 'Apuntando al este' equals: window showHeading.! !
!WindowTest methodsFor: 'test' stamp: 'AS 6/4/2023 15:58:04' prior: 50633222!
test03RoverForwardAndRightRegisterPositionsAndHeading

	| rover window positionLines headingLines |
	
	rover := self curiosityAt: 1@1 heading: MarsRoverHeadingNorth.
	window := Window new.

	rover attach: window for: self positionAndHeading.
	 	
	rover process: 'fr'.
	
	positionLines := window showPosition.
	headingLines := window showHeading.
		
	self assert: 'Curiosity: 1@3' equals: positionLines first.
	self assert: 'Curiosity: Apuntando al este' equals: headingLines first.
! !

!testRun: #WindowTest #test03RoverForwardAndRightRegisterPositionsAndHeading stamp: 'AS 6/4/2023 15:58:07'!
ERROR!
!Window methodsFor: 'show' stamp: 'AS 6/4/2023 15:58:37' prior: 50633062!
showHeading

	| lines |
	
	lines := OrderedCollection new.
	
	(headings keys) do: [ :aKey | lines add: (aKey, ': ', 'Apuntando al ', (headings at: aKey)) ].
	
	^lines.! !

!testRun: #WindowTest #test03RoverForwardAndRightRegisterPositionsAndHeading stamp: 'AS 6/4/2023 15:58:38'!
FAILURE!

----STARTUP---- (5 June 2023 09:53:30) as F:\CUIS Univeristy Mars Rover Alternativo\CuisUniversity-5832.image!


----SNAPSHOT----(5 June 2023 09:54:09) CuisUniversity-5832.image priorSource: 9366758!

----End fileIn of F:\CUIS Univeristy Mars Rover Alternativo\MarsRover-WithHeading.st----!

----STARTUP---- (5 June 2023 15:05:40) as F:\CUIS Univeristy Mars Rover Alternativo\CuisUniversity-5832.image!


----End fileIn of F:\CUIS Univeristy Repaso\Mars Rover\MarsRover-WithHeading-OneRover-b.st----!

RoverAspect subclass: #Temperature
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Temperature category: 'MarsRover-WithHeading' stamp: 'AS 6/5/2023 15:07:54'!
RoverAspect subclass: #Temperature
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'command processing' stamp: 'AS 6/5/2023 15:10:39' prior: 50634751!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ].
	
	(aSequenceOfCommands includes: 'rrrr') ifTrue: [ self temperatureChange: 1 ].! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'AS 6/5/2023 15:11:29'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observers temperature'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'temperature' stamp: 'AS 6/5/2023 15:11:28'!
temperatureChange: anAmount
	
	temperature := temperature + anAmount.! !
!MarsRover methodsFor: 'temperature' stamp: 'AS 6/5/2023 15:11:59' prior: 50635175!
temperatureChange: anAmount
	
	temperature := temperature + anAmount.
	self notify: Temperature new withValue: temperature.! !
!MarsRover methodsFor: 'initialization' stamp: 'AS 6/5/2023 15:12:26' prior: 50634621!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	temperature := 30.
	self initializeObservers
! !
!ObserversTest methodsFor: 'test' stamp: 'AS 6/5/2023 15:13:55'!
test17

	| rover log |
	
	rover := self roverAt: 1@1 heading: MarsRoverHeadingNorth.
	
	log := Log new.
	rover attach: log for: { Temperature new }.
		
	rover process: 'rrrr'.
	
	self assert: 1 equals: log lines size.
	self assert: 31 equals: log lines first.
! !
!RoverObserver methodsFor: 'update' stamp: 'AS 6/5/2023 15:14:30'!
updateTemperature: aTemperature from: aMarsRover
	
	self subclassResponsibility ! !
!Log methodsFor: 'update' stamp: 'AS 6/5/2023 15:14:51'!
updateTemperature: aTemperature for: aMarsRover
	
	lines add: aTemperature.! !
!Temperature methodsFor: 'no messages' stamp: 'AS 6/5/2023 15:15:21' overrides: 50634981!
update: anObserver withValue: aValue for: aMarsRover

	anObserver updateTemperature: aValue for: aMarsRover! !

!testRun: #ObserversTest #test17 stamp: 'AS 6/5/2023 15:15:30'!
FAILURE!

!testRun: #ObserversTest #test17 stamp: 'AS 6/5/2023 15:15:30'!
FAILURE!

(aSequenceOfCommands includes: 'rrrr')!

aSequenceOfCommands!

aSequenceOfCommands equivalentTo: 'rrrr' !

aSequenceOfCommands equivalentTo: 'rrrr' !

aSequenceOfCommands = 'rrrr' !
!MarsRover methodsFor: 'command processing' stamp: 'AS 6/5/2023 15:17:05' prior: 50635158!
process: aSequenceOfCommands

	aSequenceOfCommands do: [:aCommand | self processCommand: aCommand ].
	
	(aSequenceOfCommands = 'rrrr') ifTrue: [ self temperatureChange: 1 ].! !

!testRun: #ObserversTest #test17 stamp: 'AS 6/5/2023 15:17:06'!
PASSED!

!testRun: #ObserversTest #test17 stamp: 'AS 6/5/2023 15:17:10'!
PASSED!

----STARTUP---- (8 June 2023 15:13:06) as F:\CUIS Univeristy Mars Rover Alternativo\CuisUniversity-5832.image!


----End fileIn of E:\ISW1\Otros\Repo_TP_Exactas-main\Repo_TP_Exactas-main\ingenieria de software 1\20-TusLibros\Iteracion-1\Ejercicio-Libros-Entrega.st----!

----STARTUP---- (8 June 2023 15:16:46) as F:\CUIS Univeristy Mars Rover Alternativo\CuisUniversity-5832.image!


----End fileIn of F:\CUIS Univeristy Mars Rover Alternativo\TusLibros.st----!
!CartTest methodsFor: 'test' stamp: 'AS 6/8/2023 15:19:29'!
test08CannotAddZeroQuantity
	
	| cart book | 
	
	book := '1234567890123'.
	cart := Cart new.
	
	self
		should: [ cart add: book quantity: 0. ]
		raise: Error
		withExceptionDo: [ : anError |
			self assert: cart isEmpty.
		]! !

!testRun: #CartTest #test08CannotAddZeroQuantity stamp: 'AS 6/8/2023 15:19:33'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'AS 6/8/2023 15:20:25' prior: 50635552!
add: aBook quantity: aQuantity

	| availableQuantity totalRequestedQuantity |
	
	(aQuantity = 0) ifTrue: [self error: 'Book quantity must have above zero'. ].
	
	availableQuantity := inventory at: aBook ifAbsent: [
		self error: 'Book not available'
	].

	totalRequestedQuantity := aQuantity + (self quantityOf: aBook).

	(availableQuantity > totalRequestedQuantity) ifTrue: [
		contents at: aBook put: totalRequestedQuantity
	] ifFalse: [
		self error: 'Book quantity not available'
	]! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'AS 6/8/2023 15:20:28'!
PASSED!

!testRun: #CartTest #test02ABookCanBeAdded stamp: 'AS 6/8/2023 15:20:28'!
PASSED!

!testRun: #CartTest #test03AnNotAvailableBookCanNotBeAdded stamp: 'AS 6/8/2023 15:20:28'!
PASSED!

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'AS 6/8/2023 15:20:28'!
PASSED!

!testRun: #CartTest #test05ANotAvailableQuantityOfABookCanNotBeAdded stamp: 'AS 6/8/2023 15:20:28'!
PASSED!

!testRun: #CartTest #test06QuantitiesOfASameBookCanBeAddedSequentially stamp: 'AS 6/8/2023 15:20:28'!
PASSED!

!testRun: #CartTest #test07QuantitiesOfASameBookCanNotBeAddedSequentiallyIfNotAvailable stamp: 'AS 6/8/2023 15:20:28'!
PASSED!

!testRun: #CartTest #test08CannotAddZeroQuantity stamp: 'AS 6/8/2023 15:20:28'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'AS 6/8/2023 15:20:54'!
test08CannotAddNegativeQuantity
	
	| cart book | 
	
	book := '1234567890123'.
	cart := Cart new.
	
	self
		should: [ cart add: book quantity: -1. ]
		raise: Error
		withExceptionDo: [ : anError |
			self assert: cart isEmpty.
		]! !

!testRun: #CartTest #test08CannotAddNegativeQuantity stamp: 'AS 6/8/2023 15:20:55'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'AS 6/8/2023 15:21:06' prior: 50635601!
add: aBook quantity: aQuantity

	| availableQuantity totalRequestedQuantity |
	
	(aQuantity <= 0) ifTrue: [self error: 'Book quantity must have above zero'. ].
	
	availableQuantity := inventory at: aBook ifAbsent: [
		self error: 'Book not available'
	].

	totalRequestedQuantity := aQuantity + (self quantityOf: aBook).

	(availableQuantity > totalRequestedQuantity) ifTrue: [
		contents at: aBook put: totalRequestedQuantity
	] ifFalse: [
		self error: 'Book quantity not available'
	]! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'AS 6/8/2023 15:21:08'!
PASSED!

!testRun: #CartTest #test02ABookCanBeAdded stamp: 'AS 6/8/2023 15:21:08'!
PASSED!

!testRun: #CartTest #test03AnNotAvailableBookCanNotBeAdded stamp: 'AS 6/8/2023 15:21:08'!
PASSED!

!testRun: #CartTest #test04AQuantityOfABookCanBeAdded stamp: 'AS 6/8/2023 15:21:08'!
PASSED!

!testRun: #CartTest #test05ANotAvailableQuantityOfABookCanNotBeAdded stamp: 'AS 6/8/2023 15:21:08'!
PASSED!

!testRun: #CartTest #test06QuantitiesOfASameBookCanBeAddedSequentially stamp: 'AS 6/8/2023 15:21:08'!
PASSED!

!testRun: #CartTest #test07QuantitiesOfASameBookCanNotBeAddedSequentiallyIfNotAvailable stamp: 'AS 6/8/2023 15:21:08'!
PASSED!

!testRun: #CartTest #test08CannotAddNegativeQuantity stamp: 'AS 6/8/2023 15:21:08'!
PASSED!

!testRun: #CartTest #test08CannotAddZeroQuantity stamp: 'AS 6/8/2023 15:21:08'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'AS 6/8/2023 15:21:28'!
test09CannotAddZeroQuantity
	
	| cart book | 
	
	book := '1234567890123'.
	cart := Cart new.
	
	self
		should: [ cart add: book quantity: 0. ]
		raise: Error
		withExceptionDo: [ : anError |
			self assert: cart isEmpty.
		]! !

!methodRemoval: CartTest #test08CannotAddZeroQuantity stamp: 'AS 6/8/2023 15:21:29'!
test08CannotAddZeroQuantity
	
	| cart book | 
	
	book := '1234567890123'.
	cart := Cart new.
	
	self
		should: [ cart add: book quantity: 0. ]
		raise: Error
		withExceptionDo: [ : anError |
			self assert: cart isEmpty.
		]!
!CartTest methodsFor: 'test' stamp: 'AS 6/8/2023 15:21:43'!
test08CannotAddZeroQuantity
	
	| cart book | 
	
	book := '1234567890123'.
	cart := Cart new.
	
	self
		should: [ cart add: book quantity: 0. ]
		raise: Error
		withExceptionDo: [ : anError |
			self assert: cart isEmpty.
		]! !

!methodRemoval: CartTest #test09CannotAddZeroQuantity stamp: 'AS 6/8/2023 15:21:43'!
test09CannotAddZeroQuantity
	
	| cart book | 
	
	book := '1234567890123'.
	cart := Cart new.
	
	self
		should: [ cart add: book quantity: 0. ]
		raise: Error
		withExceptionDo: [ : anError |
			self assert: cart isEmpty.
		]!
!CartTest methodsFor: 'test' stamp: 'AS 6/8/2023 15:21:50'!
test09CannotAddNegativeQuantity
	
	| cart book | 
	
	book := '1234567890123'.
	cart := Cart new.
	
	self
		should: [ cart add: book quantity: -1. ]
		raise: Error
		withExceptionDo: [ : anError |
			self assert: cart isEmpty.
		]! !

!methodRemoval: CartTest #test08CannotAddNegativeQuantity stamp: 'AS 6/8/2023 15:21:50'!
test08CannotAddNegativeQuantity
	
	| cart book | 
	
	book := '1234567890123'.
	cart := Cart new.
	
	self
		should: [ cart add: book quantity: -1. ]
		raise: Error
		withExceptionDo: [ : anError |
			self assert: cart isEmpty.
		]!